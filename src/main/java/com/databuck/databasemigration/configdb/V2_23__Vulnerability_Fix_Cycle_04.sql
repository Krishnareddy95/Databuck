/* 
   28-Sept-2020 : Login group concept which can be map to normal logins or LDAP login. Also link login group to projects
*/

create table if not exists login_group (
   row_id                  int(11) not null auto_increment primary key,
   group_name          		varchar(255),       
   unique key unique_group (group_name)
) engine=innodb auto_increment=1 default charset=latin1;

create table if not exists login_group_to_role (
   row_id                  int(11) not null auto_increment primary key,
   login_group_row_id      int(11) not null,
   role_row_id					int(11) not null,
   unique key unique_role (login_group_row_id, role_row_id)
) engine=innodb auto_increment=1 default charset=latin1;

create table if not exists login_group_to_project (
   row_id                  int(11) not null auto_increment primary key,
   login_group_row_id      int(11) not null,
   project_row_id				int(11) not null,
   unique key unique_project (login_group_row_id, project_row_id)
) engine=innodb auto_increment=1 default charset=latin1;

/* select module and role row ids into mysql session variables */
set @nDataConnRowId     = (select idTask from Module where upper(trim(taskName)) = 'Data Connection');
set @nDataTmplRowId     = (select idTask from Module where upper(trim(taskName)) = 'Data Template');
set @nExtnTmplRowId     = (select idTask from Module where upper(trim(taskName)) = 'Extend Template & Rule');
set @nValCheckRowId     = (select idTask from Module where upper(trim(taskName)) = 'Validation Check');
set @nTasksRowId        = (select idTask from Module where upper(trim(taskName)) = 'Tasks');
set @nResultsRowId      = (select idTask from Module where upper(trim(taskName)) = 'Results');
set @nUserSettingsRowId = (select idTask from Module where upper(trim(taskName)) = 'User Settings');
set @nGlobalRuleRowId   = (select idTask from Module where upper(trim(taskName)) = 'Global Rule');
set @nDashConfigRowId   = (select idTask from Module where upper(trim(taskName)) = 'Dash Configuration');
set @nDashboardRowId    = (select idTask from Module where upper(trim(taskName)) = 'Dashboard');
set @nAppSettingsRowId  = (select idTask from Module where upper(trim(taskName)) = 'Application Settings');

select 
	@nDataConnRowId, @nDataTmplRowId, @nExtnTmplRowId, @nValCheckRowId, @nTasksRowId, @nResultsRowId, 
	@nUserSettingsRowId, @nGlobalRuleRowId, @nDashConfigRowId, @nDashboardRowId, @nAppSettingsRowId;

set @nAdminRoleRowId = (select case when (select count(*) from Role where upper(trim(roleName)) = 'ADMIN') > 0 then (select idRole from Role where upper(trim(roleName)) = 'ADMIN') else -1 end as RoleRowId); 
select @nAdminRoleRowId; 

/* insert component and access control for admin user to 'Login_Group_Mapping' */
start transaction;

insert into component (component_name,component_title,component_type,module_row_id,http_url) 
select core_qry.component_name, component_title,  component_type, module_row_id, http_url
from (
	select 
		'Login_Group_Mapping' as component_name,'Login Group Mapping' as component_title,
		0 as component_type,@nUserSettingsRowId as module_row_id,'/loginGroupMapping' as http_url
	from component
	where @nAdminRoleRowId > 0
    and  component_name = 'Login_Group_Mapping'
    and  (select count(*) from component where component_name = 'Login_Group_Mapping') < 1
) core_qry;   

commit;

start transaction;

/* insert all access rights for admin user */
insert into component_access (role_row_id, component_row_id)
select @nAdminRoleRowId, row_id 
from component 
where @nAdminRoleRowId > -1 
and component_name = 'Login_Group_Mapping'
and  (select count(*) from component_access where component_name = 'Login_Group_Mapping') < 1;

commit;

