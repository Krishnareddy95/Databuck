package com.databuck.security;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.regex.*;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.safety.*;
import org.jsoup.select.*;

import org.springframework.stereotype.Service;

import com.databuck.util.DatabuckUtility;

@Service
public class CheckVulnerability {

	public int getVulnerabilityTagCounts(String sTextData) {
    	int nRetValue = 0, nHtmlTags = 0;
    	Document oHtmlDocument =  null;
    	Elements aAllHtmlTags = null;
    	String sSafeTags = "#root,html,head,body", sEffectiveTextData = "";
    	List<String> sSafeTagsList = new ArrayList<String>();
    	sSafeTagsList.add("#root");
    	sSafeTagsList.add("html");
    	sSafeTagsList.add("head");
    	sSafeTagsList.add("body");
    	
    	

    	try {
    		sTextData = ( (sTextData == null) || (sTextData.isEmpty()) ) ? "" : sTextData;
    		

    		sEffectiveTextData = santizeHtmlTextForBaseTags(sTextData);
    		nHtmlTags = (sEffectiveTextData.length() == sTextData.length()) ? 0 : 1; // if found one or more base tags count it as 1

    		oHtmlDocument =  Jsoup.parse(sEffectiveTextData);
        	aAllHtmlTags = oHtmlDocument.select("*");

        	for (int nIndex = 0; nIndex < aAllHtmlTags.size(); nIndex++) {
        		/*if (sSafeTags.indexOf(aAllHtmlTags.get(nIndex).tagName()) < 0) {
        			++nHtmlTags;
        		}*/
        		if (!sSafeTagsList.contains(aAllHtmlTags.get(nIndex).tagName())) {
        			++nHtmlTags;
        		}
        	}
        	nRetValue = nHtmlTags;
    	}
    	catch (Exception oException) {
    		oException.printStackTrace();
    		nRetValue = 0;
    	}
    	return nRetValue;
    }

	public String wipeOutVulnerabilityTags(String sOrgTextData) {
    	String sRetValue = "", sWorkingText = "";
    	int nHtmlTags = 0;
    	Document oHtmlDocument =  null;
    	Elements aAllHtmlTags = null;
    	String sSafeTags = " #root,html,head,body";

		try {
			sWorkingText = ( (sOrgTextData == null) || (sOrgTextData.isEmpty()) ) ? "" : sOrgTextData;
			sWorkingText = santizeHtmlTextForBaseTags(sWorkingText);

    		oHtmlDocument =  Jsoup.parse(sWorkingText);
        	aAllHtmlTags = oHtmlDocument.select("*");

        	for (int nIndex = 0; nIndex < aAllHtmlTags.size(); nIndex++) {
        		if (sSafeTags.indexOf(aAllHtmlTags.get(nIndex).tagName()) < 0) {
        			aAllHtmlTags.get(nIndex).remove();
        		}
        	}
        	sRetValue = oHtmlDocument.select("body").get(0).ownText();
		} catch (Exception oException) {
    		oException.printStackTrace();
    		sRetValue = sOrgTextData;
		}
		return sRetValue;
	}

	private static String santizeHtmlTextForBaseTags(String sOriginalTextData) {
		String sRetValue = sOriginalTextData, sWorkingText = sOriginalTextData;

		HashMap<String, String> oBaseTagsInfo = new HashMap<String, String>() {{
	        put("head", "<head>.*</head>");
	        put("html", "<html>.*</html>");
	        put("body", "<body>.*</body>");
	        put("jsp", "<jsp.*>");
	    }};
	    
	    HashMap<String, String> oBaseTagsInfo2 = new HashMap<String, String>() {{
	        put("frame", "<frame>.*</frame>");
	        put("DOCTYPE", "<!DOCTYPE>.*</!DOCTYPE>");
	        put("DOM1", "<!-->.*</!-->");
	    }};

		try {
			for (String sKey: oBaseTagsInfo.keySet()) {
				Pattern oRegExPattern = Pattern.compile(oBaseTagsInfo.get(sKey), Pattern.CASE_INSENSITIVE);
				Matcher oMatcher = oRegExPattern.matcher(sWorkingText);
				boolean lMatchFound = oMatcher.find();

				//System.out.println(String.format("%1$s,  %2$s, %3$s", sKey, oBaseTagsInfo.get(sKey), lMatchFound));

				if (lMatchFound) {
					sWorkingText = oMatcher.replaceAll("");
					//System.out.println(String.format("%1$s = %2$s", sKey, sWorkingText));
				}
			};
			
			 for (String sKey: oBaseTagsInfo2.keySet()) {
					Pattern oRegExPattern1 = Pattern.compile(oBaseTagsInfo2.get(sKey), Pattern.CASE_INSENSITIVE);
					Matcher oMatcher1 = oRegExPattern1.matcher(sWorkingText);
					boolean lMatchFound1 = oMatcher1.find();

					//System.out.println(String.format("%1$s,  %2$s, %3$s", sKey, oBaseTagsInfo.get(sKey), lMatchFound));

					if (lMatchFound1) {
						sWorkingText = oMatcher1.replaceAll("<frameset>tag</frameset>");
						//System.out.println(String.format("%1$s = %2$s", sKey, sWorkingText));
					}
			};

			sRetValue = sWorkingText;
		} catch(Exception oException) {
			oException.printStackTrace();
			sRetValue = sOriginalTextData;
		}
		return sRetValue;
	}
}
