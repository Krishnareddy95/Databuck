package com.databuck.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.databuck.bean.ListApplications;
import com.databuck.bean.ListApplicationsandListDataSources;
import com.databuck.bean.ListDataDefinition;
import com.databuck.bean.ListDataSchema;
import com.databuck.bean.ListDataSource;
import com.databuck.bean.listModelGovernance;
import com.databuck.bean.listStatisticalMatchingConfig;
import com.databuck.dao.IListDataSourceDAO;
import com.databuck.dao.ITemplateViewDAO;
import com.databuck.dao.IValidationCheckDAO;
import com.databuck.service.RBACController;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.Multimap;
import org.springframework.jdbc.core.JdbcTemplate;

@Controller
public class ValidationCheckController {

	@Autowired
	ITemplateViewDAO templateviewdao;

	@Autowired
	IValidationCheckDAO validationcheckdao;
	@Autowired
	private RBACController rbacController;
	@Autowired
	private IListDataSourceDAO listdatasourcedao;
	@Autowired
	private JdbcTemplate jdbcTemplate;
	@Autowired
	private JdbcTemplate jdbcTemplate1;
	

	@RequestMapping(value = "/saveDataIntoListDMCriteria", method = RequestMethod.POST)
	public void saveDataIntoListDMCriteria(HttpServletResponse response, HttpServletRequest request,
			HttpSession session, @RequestParam Long idApp, @RequestParam Long idData, @RequestParam Long rightSourceId,
			@RequestParam String expression, @RequestParam String matchingRuleAutomatic,
			@RequestParam Long leftSourceId, @RequestParam String matchType, @RequestParam double absoluteThresholdId,
			@RequestParam double unMatchedAnomalyThreshold,
			@RequestParam String groupbyid, @RequestParam String measurementid, @RequestParam String dateFormat,
			@RequestParam String incrementalMatching, @RequestParam String rightSliceEnd,
			@RequestParam String recordCount, @RequestParam String primaryKey) {
		expression = expression.replaceAll("\\s", "").trim();
		System.out.println("expression=" + expression);
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		boolean flag = true;
		if (measurementid.equalsIgnoreCase("Y")) {
			boolean leftTemplateflag = validationcheckdao.checkMeasurementColumnForLeftTemplate(leftSourceId);
			System.out.println("leftTemplateflag=" + leftTemplateflag);
			if (!leftTemplateflag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("leftsource",
							"Please select one match value column for your Validation Check in First Data Template.");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			if (flag) {
				boolean rightTemplateflag = validationcheckdao.checkMeasurementColumnForRightTemplate(rightSourceId);
				System.out.println("rightTemplateflag=" + rightTemplateflag);
				if (!rightTemplateflag) {
					flag = false;
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object.
						json.put("rightsource",
								"Please select one match value column for your Validation Check in Second Data Template.");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		}
		if (flag) {
			if (groupbyid.equalsIgnoreCase("Y")) {
				boolean leftTemplateflag = validationcheckdao
						.checkWhetherTheSameDgroupAreSelectedInDataTemplate(expression.trim(), leftSourceId);
				// boolean leftTemplateflag =
				// validationcheckdao.checkDgroupColumnForLeftTemplate(leftSourceId);
				System.out.println("leftTemplateflag=" + leftTemplateflag);
				if (!leftTemplateflag) {
					flag = false;
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("leftsource",
								"Subsegment(s) should be from the key matching column(s). Please configure again.");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		}
		System.out.println("incrementalMatching=" + incrementalMatching);
		if (flag) {
			if (incrementalMatching.equalsIgnoreCase("Y")) {
				boolean incrementalLeft = validationcheckdao.checkWhetherIncrementalForLeftTemplate(leftSourceId);
				// boolean leftTemplateflag =
				// validationcheckdao.checkDgroupColumnForLeftTemplate(leftSourceId);
				System.out.println("incrementalLeft=" + incrementalLeft);
				if (!incrementalLeft) {
					flag = false;
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("leftsource",
								"Please select atleast one Last Read Time column for First Source Template.");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		}
		if (flag) {
			if (incrementalMatching.equalsIgnoreCase("Y")) {
				boolean incrementalLeft = validationcheckdao.checkWhetherIncrementalForLeftTemplate(rightSourceId);
				// boolean leftTemplateflag =
				// validationcheckdao.checkDgroupColumnForLeftTemplate(leftSourceId);
				System.out.println("incrementalLeft=" + incrementalLeft);
				if (!incrementalLeft) {
					flag = false;
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object.
						json.put("rightsource",
								"Please select atleast one Last Read Time column for Second Source Template.");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		}
		validationcheckdao.deleteEntryFromListDMRules(idApp, "Primary Key Matching");
		if (flag) {
			// primaryKeyMatching
			if (primaryKey.equalsIgnoreCase("Y")) {
				Long primaryKeyidDM = validationcheckdao.getIddmFromListDMRules(idApp, "Primary Key Matching");
				if (primaryKeyidDM == 0) {
					primaryKeyidDM = validationcheckdao.insertIntoListDMRules(idApp, "Primary Key Matching",
							"One to One");
				}
				System.out.println("primaryKeyidDM=" + primaryKeyidDM);
				Long primaryKeyMatchingUpdate = validationcheckdao
						.updateListDMRulesForPrimaryKeyMatching(primaryKeyidDM, idApp, rightSourceId, leftSourceId);
				if (primaryKeyMatchingUpdate <= 0) {
					flag = false;
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object.
						json.put("leftsource",
								"Please select atleast one Primary Key column for First Source Template.");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		}
		/*
		 * if(flag){ boolean rightTemplateflag =
		 * validationcheckdao.checkDgroupColumnForRightTemplate(rightSourceId);
		 * System.out.println("rightTemplateflag="+rightTemplateflag);
		 * if(!rightTemplateflag){ flag=false; try { JSONObject json = new
		 * JSONObject(); // put some value pairs into the JSON object .
		 * json.put("rightsource",
		 * "Please select one dgroup column for your Validation Check in Second Data Template."
		 * ); response.getWriter().println(json); } catch (Exception e) {
		 * e.printStackTrace(); } } }
		 */
		if (flag) {
			System.out.println("rightSliceEnd=" + rightSliceEnd);
			System.out.println("measurementid=" + measurementid);
			System.out.println("idApp=" + idApp);
			// System.out.println("idDM=" + idDM);
			System.out.println("rightSourceId=" + rightSourceId);
			System.out.println("leftSourceId=" + rightSourceId);
			System.out.println("expression=" + expression);
			System.out.println("matchingRuleAutomatic=" + matchingRuleAutomatic);
			validationcheckdao.deleteEntryFromListDMRules(idApp, "Measurements Match");
			Long idDM = validationcheckdao.getIddmFromListDMRules(idApp, "Key Fields Match");
			if (idDM == 0) {
				idDM = validationcheckdao.insertIntoListDMRules(idApp, matchType, "One to One");
				System.out.println("idDM=" + idDM);
			}

			if (measurementid.equalsIgnoreCase("Y")) {
				Long measurementIdDM = validationcheckdao.insertIntoListDMRules(idApp, "Measurements Match",
						"One to One");
				validationcheckdao.insertDataIntoListDMCriteriaForMeasurementMatch(measurementIdDM, leftSourceId,
						rightSourceId);
			}
			/*
			 * ListApplications listApplicationsData =
			 * validationcheckdao.getdatafromlistapplications(idApp);
			 * if(listApplicationsData.getOutOfNormCheck().equalsIgnoreCase("Y")
			 * ){ matchingRuleAutomatic="N"; }
			 */
			validationcheckdao.updateDataIntoListApplications(idApp, rightSourceId, absoluteThresholdId, groupbyid,
					measurementid, dateFormat, rightSliceEnd, expression, matchingRuleAutomatic, recordCount,
					primaryKey, unMatchedAnomalyThreshold);
			if (matchingRuleAutomatic.equalsIgnoreCase("Y")) {
				// validationcheckdao.deleteEntryFromListDMRules(idApp,"Key
				// Fields Match");
				// Long idDM1 = validationcheckdao.insertIntoListDMRules(idApp,
				// "Key Fields Match","One to One");
				List<String> rightSourceColumnNames = validationcheckdao
						.getDisplayNamesFromListDataDefinition(rightSourceId);
				List<String> LeftSourceColumnNames = validationcheckdao
						.getDisplayNamesFromListDataDefinition(leftSourceId);
				int updateMatchingRuleAutomatic = validationcheckdao.updateMatchingRuleAutomaticIntoListDMCriteria(
						rightSourceColumnNames, LeftSourceColumnNames, idDM, idApp);
				System.out.println("updateMatchingRuleAutomatic=" + updateMatchingRuleAutomatic);

				if (updateMatchingRuleAutomatic > 0) {
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("success", "Match Key created successfully");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
				} else {
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("fail", "No Matching key found");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			} else if (expression != "") {
				int insertDataIntoListDMCriteria = validationcheckdao.insertDataIntoListDMCriteria(expression.trim(),
						idDM, idApp);
				System.out.println("insertDataIntoListDMCriteria=" + insertDataIntoListDMCriteria);

				if (insertDataIntoListDMCriteria >= 1) {
					try {
						JSONObject json = new JSONObject();
						json.put("success", "Match Key created successfully");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
				} else if (insertDataIntoListDMCriteria == -1) {
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("fail1", "Matching key already exists");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
				} else {
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("fail", "No Matching key found");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			} else {
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "No Matching key found");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		/*
		 * try { response.getWriter().println("success"); } catch (IOException
		 * e) { e.printStackTrace(); }
		 */

	}

	@RequestMapping(value = "/updateDataIntolistStatisticalMatchingConfig", method = RequestMethod.POST)
	public void updateDataIntolistStatisticalMatchingConfig(
			@RequestBody listStatisticalMatchingConfig listStatisticalMatchingConfig, HttpServletResponse response,
			HttpSession session) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		// System.out.println("leftSourceId="+leftSourceId);
		System.out.println("idApp=" + listStatisticalMatchingConfig.getIdApp());
		System.out.println("rightSourceId=" + listStatisticalMatchingConfig.getRightSourceId());
		System.out.println("leftSourceId=" + listStatisticalMatchingConfig.getLeftSourceId());
		System.out.println("expression=" + listStatisticalMatchingConfig.getExpression());
		System.out.println("measurementSum=" + listStatisticalMatchingConfig.getMeasurementSum());
		System.out.println("getMeasurementSumThreshold=" + listStatisticalMatchingConfig.getMeasurementSumThreshold());
		System.out.println("getMeasurementSumType=" + listStatisticalMatchingConfig.getMeasurementSumType());
		validationcheckdao.updateDataIntoListApplication(listStatisticalMatchingConfig.getIdApp(),
				listStatisticalMatchingConfig.getRightSourceId());
		int update = validationcheckdao.updateintolistStatisticalMatchingConfig(listStatisticalMatchingConfig);
		if (update > 0) {
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("success", "Match Key created successfully");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("fail", "No Matching key found");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	@RequestMapping(value = "/saveDataIntolistStatisticalMatchingConfig", method = RequestMethod.POST)
	public void saveDataIntolistStatisticalMatchingConfig(
			@RequestBody listStatisticalMatchingConfig listStatisticalMatchingConfig, HttpServletResponse response,
			HttpSession session) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		// System.out.println("leftSourceId="+leftSourceId);
		System.out.println("idApp=" + listStatisticalMatchingConfig.getIdApp());
		System.out.println("rightSourceId=" + listStatisticalMatchingConfig.getRightSourceId());
		System.out.println("leftSourceId=" + listStatisticalMatchingConfig.getLeftSourceId());
		System.out.println("expression=" + listStatisticalMatchingConfig.getExpression());
		System.out.println("measurementSum=" + listStatisticalMatchingConfig.getMeasurementSum());
		System.out.println("getMeasurementSumThreshold=" + listStatisticalMatchingConfig.getMeasurementSumThreshold());
		System.out.println("getMeasurementSumType=" + listStatisticalMatchingConfig.getMeasurementSumType());

		boolean flag = true;
		List<ListDataDefinition> listdatadefinition = templateviewdao
				.view(listStatisticalMatchingConfig.getLeftSourceId());

		if (listStatisticalMatchingConfig.getGroupBy().equalsIgnoreCase("Y")) {
			if (flag) {
				boolean checkDataTemplateForDGroup = validationcheckdao.checkDataTemplateForDGroup(listdatadefinition);
				System.out.println("checkDataTemplateForDGroup=" + checkDataTemplateForDGroup);
				if (!checkDataTemplateForDGroup) {
					flag = false;
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("firstSource", "Please select atleast one dgroup from first source template");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// return true;
				}
			}
			if (flag) {
				List<ListDataDefinition> secondlistdatadefinition = templateviewdao
						.view(listStatisticalMatchingConfig.getRightSourceId());
				boolean checkDataTemplateForDGroup = validationcheckdao
						.checkDataTemplateForDGroup(secondlistdatadefinition);
				System.out.println("checkDataTemplateForDGroup=" + checkDataTemplateForDGroup);
				if (!checkDataTemplateForDGroup) {
					flag = false;
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("secondSource", "Please select atleast one dgroup from second source template");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// return true;
				}
			}
		}
		if (flag) {
			validationcheckdao.updateDataIntoListApplication(listStatisticalMatchingConfig.getIdApp(),
					listStatisticalMatchingConfig.getRightSourceId());
			int update = validationcheckdao.insertintolistStatisticalMatchingConfig(listStatisticalMatchingConfig);
			System.out.println("update=" + update);
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("success", "Validation Check Created Successfully");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}

		}

	}

	@RequestMapping(value = "/saveDataIntolistApplicationForDataMatchingGroup", method = RequestMethod.POST)
	public void saveDataIntolistApplicationForDataMatchingGroup(@RequestParam Long idApp, @RequestParam Long idData,
			@RequestParam Long secondSourceId, @RequestParam double absoluteThresholdId, HttpServletResponse response,
			HttpSession session) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		// System.out.println("leftSourceId="+leftSourceId);
		System.out.println("saveDataIntolistApplicationForDataMatchingGroup");
		System.out.println("idApp=" + idApp);
		System.out.println("idData=" + idData);
		System.out.println("secondSourceId=" + secondSourceId);
		System.out.println("absoluteThresholdId=" + absoluteThresholdId);
		boolean flag = true;
		List<ListDataDefinition> listdatadefinition = templateviewdao.view(idData);

		if (flag) {
			boolean checkDataTemplateForDGroup = validationcheckdao.checkDataTemplateForDGroup(listdatadefinition);
			System.out.println("checkDataTemplateForDGroup=" + checkDataTemplateForDGroup);
			if (!checkDataTemplateForDGroup) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("firstSource", "Please select atleast one dgroup from first source template");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			List<ListDataDefinition> secondlistdatadefinition = templateviewdao.view(secondSourceId);
			boolean checkDataTemplateForDGroup = validationcheckdao
					.checkDataTemplateForDGroup(secondlistdatadefinition);
			System.out.println("checkDataTemplateForDGroup=" + checkDataTemplateForDGroup);
			if (!checkDataTemplateForDGroup) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("secondSource", "Please select atleast one dgroup from second source template");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			int update = validationcheckdao.saveDataIntolistApplicationForDataMatchingGroup(idApp, secondSourceId,
					absoluteThresholdId);
			System.out.println("update=" + update);
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("success", "Validation Check Created Successfully");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}

		}

	}

	@RequestMapping(value = "/changeDataColumnAjax", method = RequestMethod.POST)
	public void changeDataColumnAjax(HttpServletResponse response, HttpServletRequest request, HttpSession session,
			@RequestParam Long idData) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		System.out.println("idData=" + idData);
		List<String> listDataDefinitionColumnNames = validationcheckdao.getDisplayNamesFromListDataDefinition(idData);
		ObjectMapper mapper = new ObjectMapper();

		try {
			String jsonInString = mapper.writeValueAsString(listDataDefinitionColumnNames);
			System.out.println("jsonInString=" + jsonInString);

			JSONObject displayName = new JSONObject();
			displayName.put("success", jsonInString);
			System.out.println("displayName=" + displayName);

			response.getWriter().println(displayName);
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

	}

	@RequestMapping(value = "/matchingKeys")
	public ModelAndView matchingKeys(HttpSession session, HttpServletRequest request) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}
		boolean rbac = rbacController.rbac("Validation Check", "C", session);
		if (rbac) {

			String matchCategory = request.getParameter("mcardinality");
			System.out.println("matchCategory=" + matchCategory);
			String matchtype = request.getParameter("matchtype");
			System.out.println("matchtype=" + matchtype);

			Long idApp = Long.parseLong(request.getParameter("idApp"));
			System.out.println("idApp=" + idApp);
			Long idData = Long.parseLong(request.getParameter("idData"));
			System.out.println("idData=" + idData);
			String apptype = request.getParameter("apptype");
			System.out.println("apptype=" + apptype);
			String applicationName = request.getParameter("applicationName");
			System.out.println("applicationName=" + applicationName);
			String description = request.getParameter("description");
			System.out.println("description=" + description);
			String name = request.getParameter("name");
			System.out.println("name=" + name);
			Long idDM = validationcheckdao.insertIntoListDMRules(idApp, matchtype, matchCategory);
			System.out.println("idDM=" + idDM);
			List<ListDataSource> getlistdatasourcesname = templateviewdao.getlistdatasourcesname();

			List listRefFunctionsname = validationcheckdao.getDataFromlistRefFunctions();

			List listDataDefinitionColumnNames = validationcheckdao.getDisplayNamesFromListDataDefinition(idData);

			List matchingRules = validationcheckdao.getMatchingRules(idApp);
			System.out.println("matchingRulesSize=" + matchingRules.size());

			ModelAndView model = new ModelAndView("matchKeyCreateView");
			if (matchingRules.size() >= 1) {
				model.addObject("matchingRulesTrue", true);
			}

			model.addObject("matchingRules", matchingRules);

			model.addObject("listDataDefinitionColumnNames", listDataDefinitionColumnNames);
			model.addObject("listRefFunctionsname", listRefFunctionsname);
			model.addObject("getlistdatasourcesname", getlistdatasourcesname);
			model.addObject("currentSection", "Validation Check");
			model.addObject("currentLink", "VCView");
			model.setViewName("matchKeyCreateView");
			model.addObject("idApp", idApp);
			model.addObject("idData", idData);
			model.addObject("apptype", apptype);
			model.addObject("idDM", idDM);
			model.addObject("applicationName", applicationName);
			model.addObject("description", description);
			model.addObject("name", name);

			return model;
		} else
			return new ModelAndView("loginPage");
	}

	@RequestMapping(value = "/updateDataIntoListDfTranrule", method = RequestMethod.POST)
	public void updateDataIntoListDfTranrule(HttpServletResponse response, HttpServletRequest request,
			HttpSession session, @RequestParam String numericalStats, @RequestParam String recordAnomaly,
			@RequestParam Long idApp, @RequestParam String nullCount, @RequestParam String stringStat) {
		Object user = session.getAttribute("user");
		System.out.println("user:updateDataIntoListDfTranrule" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		System.out.println("idApp=" + idApp);
		// System.out.println("thresholdAll="+thresholdAll);
		// System.out.println("thresholdIdentity="+thresholdIdentity);
		System.out.println("nullCount=" + nullCount);
		// int update =
		// validationcheckdao.updatedataintolistdftranrule(idApp,thresholdAll,thresholdIdentity);
		// System.out.println("update="+update);

		int updateintolistapplications = validationcheckdao.updateintolistapplications(idApp, numericalStats,
				recordAnomaly, nullCount, stringStat);
		System.out.println("updateintolistapplications=" + updateintolistapplications);

		if (1 > 0) {
			try {
				response.getWriter().println("Data Connection customized successfully");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} /*
			 * else { try { response.getWriter().println("There is a problem");
			 * } catch (IOException e) { // TODO Auto-generated catch block
			 * e.printStackTrace(); } }
			 */
	}

	@RequestMapping(value = "/createValidationCheckCustomize")
	public ModelAndView createValidationCheckCustomize(HttpServletRequest request, HttpSession session, String defaultValues) {
		ModelAndView modelAndView = new ModelAndView("ValidationSuccess");

		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}
		boolean rbac = rbacController.rbac("Validation Check", "C", session);
		if (rbac) {
			try {
				Long idApp = Long.parseLong(request.getParameter("idApp"));
				System.out.println("idApp=" + idApp);
				Long idData = Long.parseLong(request.getParameter("idData"));
				System.out.println("idData=" + idData);

				String recordCount = request.getParameter("recordCount");

				System.out.println("recordCount=" + recordCount);

				/*
				 * String
				 * recordCountText=request.getParameter("recordCountText");
				 * 
				 * Long record=0l;
				 * if(!(recordCountText==null||recordCountText.equals(""))){
				 * record=Long.parseLong(recordCountText); }
				 * System.out.println("record="+record);
				 */

				String nullCount = request.getParameter("nullCount");
				System.out.println("nullCount=" + nullCount);
				String nullCountText = request.getParameter("nullCountText");
				Double nullCountTextNull = 0.0;
				if (!(nullCountText == null || nullCountText.equals(""))) {
					nullCountTextNull = Double.parseDouble(nullCountText);
				}
				System.out.println("nullCountTextNull=" + nullCountTextNull);

				String duplicateCount = request.getParameter("duplicateCount");
				System.out.println("duplicateCount=" + duplicateCount);

				String duplicateCountText = request.getParameter("duplicateCountText");
				Double duplicateCountTextNull = 0.0;
				if (!(duplicateCountText == null || duplicateCountText.equals(""))) {
					duplicateCountTextNull = Double.parseDouble(duplicateCountText);
				}
				System.out.println("duplicateCountTextNull=" + duplicateCountTextNull);

				String duplicateCountAll = request.getParameter("duplicateCountAll");
				System.out.println("duplicateCountAll=" + duplicateCountAll);
				String duplicateCountAllText = request.getParameter("duplicateCountAllText");
				Double duplicateCountAllTextNull = 0.0;
				if (!(duplicateCountAllText == null || duplicateCountAllText.equals(""))) {
					duplicateCountAllTextNull = Double.parseDouble(duplicateCountAllText);
				}
				System.out.println("duplicateCountAllTextNull=" + duplicateCountAllTextNull);

				String incrementalCheck = request.getParameter("incrementalCheck");
				System.out.println("incrementalCheck=" + incrementalCheck);
				String incrementalCheckText = request.getParameter("incrementalCheckText");
				System.out.println("incrementalCheckText=" + incrementalCheckText);

				String numericalStats = request.getParameter("numericalStats");
				System.out.println("numericalStats=" + numericalStats);
				String numericalStatsText = request.getParameter("numericalStatsText");
				Double numericalStatsTextNull = 0.0;
				if (!(numericalStatsText == null || numericalStatsText.equals(""))) {
					numericalStatsTextNull = Double.parseDouble(numericalStatsText);
				}
				System.out.println("numericalStatsTextNull=" + numericalStatsTextNull);

				String stringStat = request.getParameter("stringStat");
				System.out.println("stringStat=" + stringStat);
				String stringStatText = request.getParameter("stringStatText");
				Double stringStatTextNull = 0.0;
				if (!(stringStatText == null || stringStatText.equals(""))) {
					stringStatTextNull = Double.parseDouble(stringStatText);
				}
				System.out.println("stringStatTextNull=" + stringStatTextNull);

				String columnOrderVal = request.getParameter("columnOrderVal");
				System.out.println("columnOrderVal=" + columnOrderVal);

				String fileNameVal = request.getParameter("fileNameVal");
				System.out.println("fileNameVal=" + fileNameVal);
				String numberofRows = request.getParameter("numberofRows");
				Double rows = 0.0;
				if (!(numberofRows == null || numberofRows.equals("")))
					rows = Double.parseDouble(numberofRows);
				System.out.println("numberofRows=" + numberofRows);

				//
				String recordAnomaly = request.getParameter("recordAnomalyid");
				System.out.println("recordAnomaly=" + recordAnomaly);

				String recordAnomalyThreshold = request.getParameter("recordAnomalyThresholdId");
				Double recordAnomalyThresholdnull = 3.0;
				if (!(recordAnomalyThreshold == null || recordAnomalyThreshold.equals("")))
					recordAnomalyThresholdnull = Double.parseDouble(recordAnomalyThreshold);
				System.out.println("recordAnomalyThresholdnull=" + recordAnomalyThresholdnull);

				String DFSetComparison = request.getParameter("DFSetComparisonId");
				Double DFSetComparisonnull = 0.0;
				if (!(DFSetComparison == null || DFSetComparison.equals("")))
					DFSetComparisonnull = Double.parseDouble(DFSetComparison);
				System.out.println("DFSetComparisonnull=" + DFSetComparisonnull);
				String timeSeries = "";
				String[] timeSeriesCheckbox = request.getParameterValues("check_id");

				String recordCountAnomalyType = request.getParameter("recordCountAnomalyType");
				System.out.println("recordCountAnomalyType=" + recordCountAnomalyType);

				String applyRules = request.getParameter("applyRules");
				System.out.println("applyRules=" + applyRules);

				String applyDerivedColumns = request.getParameter("applyDerivedColumns");
				System.out.println("applyDerivedColumns=" + applyDerivedColumns);

				String nameofEntityColumn = request.getParameter("nameofEntityColumn");
				System.out.println("nameofEntityColumn=" + nameofEntityColumn);
				String csvDirectory = request.getParameter("csvDirectory");
				System.out.println("csvDirectory=" + csvDirectory);

				String groupEquality = request.getParameter("groupEquality");
				System.out.println("groupEquality=" + groupEquality);

				String groupEqualityText = request.getParameter("groupEqualityText");
				Double groupEqualityThreshold = 0.0;
				if (!(groupEqualityText == null || groupEqualityText.equals("")))
					groupEqualityThreshold = Double.parseDouble(groupEqualityText);
				System.out.println("groupEqualityThreshold=" + groupEqualityThreshold);
				System.out.println("groupEqualityText=" + groupEqualityText);
				// System.out.println("timeSeriesCheckbox="+timeSeriesCheckbox);
				if (timeSeriesCheckbox != null) {
					for (int i = 0; i < timeSeriesCheckbox.length; i++) {
						timeSeries = timeSeries + timeSeriesCheckbox[i] + ",";
						/*
						 * if (timeSeriesCheckbox[i].equalsIgnoreCase("month"))
						 * { String monthdropdown =
						 * request.getParameter("monthdropdown");
						 * System.out.println("monthdropdown=" + monthdropdown);
						 * timeSeries = timeSeries + monthdropdown; } if
						 * (timeSeriesCheckbox[i].equalsIgnoreCase("dayOfWeek"))
						 * { String dowdropdown =
						 * request.getParameter("dowdropdown");
						 * System.out.println("dowdropdown=" + dowdropdown);
						 * timeSeries = timeSeries + dowdropdown; } if
						 * (timeSeriesCheckbox[i].equalsIgnoreCase("hourOfDay"))
						 * { String hoddropdown =
						 * request.getParameter("hoddropdown");
						 * System.out.println("hoddropdown=" + hoddropdown);
						 * timeSeries = timeSeries + hoddropdown; } if
						 * (timeSeriesCheckbox[i].equalsIgnoreCase("dayOfMonth")
						 * ) { String domdropdown =
						 * request.getParameter("domdropdown");
						 * System.out.println("domdropdown=" + domdropdown);
						 * timeSeries = timeSeries + domdropdown; }
						 */
						System.out.println("timeSeries=" + timeSeriesCheckbox[i]);
						// timeSeries = timeSeries + "), ";
					}
					timeSeries = timeSeries.toString().substring(0, timeSeries.length() - 1);
				}
				/*
				 * if (timeSeries.contains("None")) { timeSeries =
				 * timeSeries.toString().substring(0, timeSeries.length() - 1);
				 * }
				 */
				System.out.println("timeSeries=" + timeSeries.trim());

				String dataDriftCheck = request.getParameter("dataDriftCheck");
				System.out.println("dataDriftCheck=" + dataDriftCheck);

				String dataDriftCheckText = request.getParameter("dataDriftCheckText");
				// System.out.println("dataDriftCheckText="+dataDriftCheckText);
				Double dataDriftCheckTextnull = 0.0;
				if (!(dataDriftCheckText == null || dataDriftCheckText.equals("")))
					dataDriftCheckTextnull = Double.parseDouble(dataDriftCheckText);
				System.out.println("dataDriftCheckTextnull=" + dataDriftCheckTextnull);

				String updateFrequency = request.getParameter("frequencyid");
				System.out.println("updateFrequency=" + updateFrequency);
				String frequencyDays = request.getParameter("EveryDay");
				Double frequencyDaysnull = 0.0;
				if (!(frequencyDays == null || frequencyDays.equals("")))
					frequencyDaysnull = Double.parseDouble(frequencyDays);
				System.out.println("frequencyDaysnull=" + frequencyDaysnull);

				String outofNorm = request.getParameter("outofNorm");
				System.out.println("outofNorm=" + outofNorm);
				String outofNormThreshold = request.getParameter("outofNormThreshold");
				Double outofNormThresholdnull = 0.0;
				if (!(outofNormThreshold == null || outofNormThreshold.equals("")))
					outofNormThresholdnull = Double.parseDouble(outofNormThreshold);
				System.out.println("outofNormThresholdnull=" + outofNormThresholdnull);

				String incrementalMatching = request.getParameter("incrementalTypeId");
				System.out.println("incrementalMatching=" + incrementalMatching);
				String buildHistoricFingerPrint = request.getParameter("buildHistoricId");
				System.out.println("buildHistoricFingerPrint=" + buildHistoricFingerPrint);
				String historicStartDate = null;
				String historicEndDate = null;
				String historicDateFormat = null;
				if (buildHistoricFingerPrint == null)
					buildHistoricFingerPrint = "N";
				if (buildHistoricFingerPrint.equalsIgnoreCase("Y")) {
					historicStartDate = request.getParameter("startdateid");
					System.out.println("historicStartDate=" + historicStartDate);
					historicEndDate = request.getParameter("enddateid");
					System.out.println("historicEndDate=" + historicEndDate);
					historicDateFormat = request.getParameter("dateformatid");
					System.out.println("historicDateFormat=" + historicDateFormat);
				}
				ListApplications listApplication = new ListApplications();
				listApplication.setIncrementalMatching(incrementalMatching);
				listApplication.setBuildHistoricFingerPrint(buildHistoricFingerPrint);
				listApplication.setHistoricStartDate(historicStartDate);
				listApplication.setHistoricEndDate(historicEndDate);
				listApplication.setHistoricDateFormat(historicDateFormat);

				// validationcheckdao.insertintolistdfsetruleandtranrule(idApp,
				// DFSetComparisonnull);
				String dGroupNullCheck = request.getParameter("dGroupNullCheck");
				String dGroupDateRuleCheck = request.getParameter("dGroupDateRuleCheck");

				int updateintolistapplication = validationcheckdao.updateintolistapplication(outofNorm, columnOrderVal,
						fileNameVal, rows, nameofEntityColumn, idApp, nullCount, recordAnomaly, numericalStats,
						stringStat, dataDriftCheck, updateFrequency, frequencyDaysnull, recordCount,
						DFSetComparisonnull, timeSeries, recordCountAnomalyType, applyRules, applyDerivedColumns,
						csvDirectory, groupEquality, groupEqualityThreshold, dGroupNullCheck, dGroupDateRuleCheck, listApplication);
				System.out.println("updateintolistapplication=" + updateintolistapplication);

				int updateintolistdatadefinitions = validationcheckdao.updateintolistdatadefinitions(idData,
						recordCount, nullCountTextNull, incrementalCheck, numericalStats, numericalStatsTextNull,
						stringStat, stringStatTextNull, recordAnomaly, recordAnomalyThresholdnull,
						dataDriftCheckTextnull, outofNormThresholdnull);
				System.out.println("updateintolistdatadefinitions=" + updateintolistdatadefinitions);

				int insertintolistdftranrule = validationcheckdao.insertintolistdftranrule(idApp, duplicateCount,
						duplicateCountTextNull, duplicateCountAll, duplicateCountAllTextNull);
				System.out.println("insertintolistdftranrule=" + insertintolistdftranrule);

				modelAndView.addObject("currentSection", "Validation Check");
				modelAndView.addObject("currentLink", "Add New");
				/*
				 * List<String> warningmsgs =
				 * validationcheckdao.validationCheckprerequisite(idApp, idData,
				 * duplicateCountAll
				 * ,nullCount,duplicateCount,recordAnomaly,stringStat,
				 * numericalStats ); if(warningmsgs.size()!=0) {
				 * modelAndView.setViewName("showWarnings");
				 * modelAndView.addObject("warningmsgs", warningmsgs); }
				 */

			} catch (Exception e) {
				e.printStackTrace();
				return modelAndView;
			}

			return modelAndView;
		} else
			return new ModelAndView("loginPage");
	}

	@RequestMapping(value = "/updateValidationCheckAjax", method = RequestMethod.POST)
	public void ajax(@RequestBody ListApplications listApplications, HttpServletResponse response,
			HttpSession session) {

		boolean flag = true;
		Object user = session.getAttribute("user");
		System.out.println("data:" + listApplications);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		List<ListDataDefinition> listdatadefinition = templateviewdao.view(listApplications.getIdData());
		if (flag) {
			boolean applyRulesFlag = validationcheckdao.checkTheConfigurationForapplyRules(listdatadefinition,
					listApplications);
			System.out.println("applyRulesFlag=" + applyRulesFlag);
			if (!applyRulesFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("rules", "The rules are configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean applyDerivedColumnsFlag = validationcheckdao
					.checkTheConfigurationForapplyDerivedColumns(listdatadefinition, listApplications);
			System.out.println("applyDerivedColumnsFlag=" + applyDerivedColumnsFlag);
			if (!applyDerivedColumnsFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("derivedcols", "The Derived Columns are configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean buildHistoricFlag = validationcheckdao.checkTheConfigurationForBuildHistoric(listdatadefinition,
					listApplications);
			System.out.println("buildHistoricFlag=" + buildHistoricFlag);
			if (!buildHistoricFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The last read time check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {

			boolean identityFlag = validationcheckdao.checkTheConfigurationForDupRowIdentity(listdatadefinition,
					listApplications);
			System.out.println("identityFlag=" + identityFlag);
			if (!identityFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The duplicate identity check (primary key) is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean AllFlag = validationcheckdao.checkTheConfigurationForDupRowAll(listdatadefinition,
					listApplications);
			System.out.println("AllFlag=" + AllFlag);
			if (!AllFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The duplicate all check (duplicate key) is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean dataDriftFlag = validationcheckdao.checkTheConfigurationForDataDrift(listdatadefinition,
					listApplications);
			System.out.println("dataDriftFlag=" + dataDriftFlag);
			if (!dataDriftFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The data drift check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean numFieldFlag = validationcheckdao.checkTheConfigurationForNumField(listdatadefinition,
					listApplications);
			System.out.println("numFieldFlag=" + numFieldFlag);
			if (!numFieldFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The numerical fingerprint check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean stringFieldFlag = validationcheckdao.checkTheConfigurationForstringField(listdatadefinition,
					listApplications);
			System.out.println("stringFieldFlag=" + stringFieldFlag);
			if (!stringFieldFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The string fingerprint check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			// System.out.println("recordcountanomaly="+listApplications.getRecordCountAnomaly());
			// System.out.println("getkeyBasedRecordCountAnomaly="+listApplications.getkeyBasedRecordCountAnomaly());
			boolean dGroupFlag = validationcheckdao.checkTheConfigurationFordGroup(listdatadefinition,
					listApplications);
			System.out.println("dGroupFlag=" + dGroupFlag);
			if (!dGroupFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The subsegment check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean recordAnomalyFlag = validationcheckdao.checkTheConfigurationForRecordAnomaly(listdatadefinition,
					listApplications);
			System.out.println("recordAnomalyFlag=" + recordAnomalyFlag);
			if (!recordAnomalyFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The record anomaly check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean nonNullFlag = validationcheckdao.checkTheConfigurationForNonNullField(listdatadefinition,
					listApplications);
			System.out.println("nonNullFlag=" + nonNullFlag);
			if (!nonNullFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The Null check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		// incremental check in VC source should not have incremental select in
		// DT pre check
		if (flag) {
			if (listApplications.getIncrementalMatching().equalsIgnoreCase("Y")) {
				Long idData = listApplications.getIdData();
				boolean incrementalCheck = validationcheckdao.checkForIncrementalInListDataAccess(idData);
				if (!incrementalCheck) {
					flag = false;
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("incremental",
								"Cannot use data slices in source with Historic and Incremental Type of Application");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// return true;
				}
			}
		}
		//
		if (flag) {
			if (listApplications.getTimelinessKeyChk().equalsIgnoreCase("Y")) {
			boolean timelinessKeyFlag = validationcheckdao.checkTheConfigurationForTimelinessKeyField(listdatadefinition,
					listApplications);
				System.out.println("timelinessKeyFlag=" + timelinessKeyFlag);
				if (!timelinessKeyFlag) {
					flag = false;
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("fail", "The TimelinessKey check is configured incorrectly");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// return true;
				}
			}
		}
		if (flag) {
			boolean defaultCheckFlag = validationcheckdao.checkTheConfigurationDefaultCheck(listdatadefinition,
					listApplications);
			System.out.println("defaultCheckFlag=" + defaultCheckFlag);
			if (!defaultCheckFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The Default check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean patternCheckFlag = validationcheckdao.checkTheConfigurationPatternCheck(listdatadefinition,
					listApplications);
			System.out.println("patternCheckFlag=" + patternCheckFlag);
			if (!patternCheckFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The Pattern check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}

		// Changes to allow user to select either DateRuleCheck or DGroupDateRuleCheck
		// only at one time
		if (flag) {
			if (listApplications.getDateRuleChk() != null && listApplications.getDateRuleChk().equalsIgnoreCase("Y")
					&& listApplications.getdGroupDateRuleCheck() != null
					&& listApplications.getdGroupDateRuleCheck().equalsIgnoreCase("Y")) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "Choose either DateRuleCheck or DGroupDateRuleCheck, both can't be enabled together.");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		if (flag) {
			boolean dateRuleCheckFlag = validationcheckdao.checkTheConfigurationDateRuleCheck(listdatadefinition,
					listApplications);
			System.out.println("dateRuleCheckFlag=" + dateRuleCheckFlag);
			if (!dateRuleCheckFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The Date Rule check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}

		if (flag) {
			boolean dgroupNonNullFlag = validationcheckdao.checkConfigurationForDGroupNullCheck(listdatadefinition,
					listApplications);
			System.out.println("dgroupNonNullFlag=" + dgroupNonNullFlag);
			if (!dgroupNonNullFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The DGroup Null check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}

		if (flag) {
			boolean dGroupDateRuleCheckFlag = validationcheckdao.checkConfigurationDgroupDateRuleCheck(listdatadefinition,
					listApplications);
			System.out.println("dGroupDateRuleCheckFlag=" + dGroupDateRuleCheckFlag);
			if (!dGroupDateRuleCheckFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The DGroup DateRule check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}

		// sumeet---create
		if (flag) {
			if (listApplications.getBadData().equalsIgnoreCase("Y")) {
			boolean badDataCheckFlag = validationcheckdao.checkTheBadData(listdatadefinition,
					listApplications);
				System.out.println("badDataCheckFlag=" + badDataCheckFlag);
				if (!badDataCheckFlag) {
					flag = false;
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("fail", "The Bad Data check is configured incorrectly");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// return true;
				}
			}
		}

		// ---------- [priyanka 25-12-2018] --

		// chnges for length Check

		
		
		if (flag) {
			if (listApplications.getlengthCheck().equalsIgnoreCase("Y")) {

				System.out.println("ValidationCheckController if ( uncom listApplications.getlengthCheck().equalsIgnoreCase(\"Y\")) ...........");

				Long idData = listApplications.getIdData();
				boolean lengthCheck = validationcheckdao.checkForLengthCheck(listdatadefinition,
						listApplications);
				System.out.println("lengthCheck=" + lengthCheck);
				if (!lengthCheck) {
					flag = false;
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("fail", "The Length check is configured incorrectly");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// return true;
				}
			}
		}

		// -------------------

		if (flag) {
			boolean defaultCheckFlag = validationcheckdao.defaultCheckFlag(listdatadefinition,
					listApplications);
			System.out.println("defaultCheckFlag=" + defaultCheckFlag);
			if (!defaultCheckFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The Default check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}

		if (flag) {

			Long idApp = listApplications.getIdApp();
			validationcheckdao.insertintolistdfsetruleandtranrule(idApp,
					listApplications.getRecordCountAnomalyThreshold(), listApplications.getDuplicateCheck());

			/*if(listApplications.getHistoricDateFormat()==""){
				String automaticDateFormat = validationcheckdao.getAutomaticDateFormat(listApplications);
				listApplications.setHistoricDateFormat(automaticDateFormat);
			}*/
			int updateintolistapplication = validationcheckdao
					.updateintolistapplicationForAjaxRequest(listApplications);
			System.out.println("updateintolistapplication=" + updateintolistapplication);
			System.out.println("datadriftthreshold=" + listApplications.getDataDriftThreshold());
			// Sumeet_21_08_2018
			int updateintolistdatadefinitions = validationcheckdao.updateintolistdatadefinitions(
					listApplications.getIdData(), "N", listApplications.getNonNullThreshold(), "N", "N",
					listApplications.getNumericalStatThreshold(), "N", listApplications.getStringStatThreshold(), "N",
					listApplications.getRecordAnomalyThreshold(), listApplications.getDataDriftThreshold(), 0.0);
			System.out.println("updateintolistdatadefinitions=" + updateintolistdatadefinitions);

			int insertintolistdftranrule = validationcheckdao.insertintolistdftranrule(idApp,
					listApplications.getDupRowIdentity(), listApplications.getDupRowIdentityThreshold(),
					listApplications.getDupRowAll(), listApplications.getDupRowAllThreshold());
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("success", "Validation Check Created Successfully");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}

		}
	}

	@RequestMapping(value = "/customizeUpdateValidationCheckAjax", method = RequestMethod.POST)
	public void customizeUpdateValidationCheckAjax(@RequestBody ListApplications listApplications,
			HttpServletResponse response, HttpSession session) {

		boolean flag = true;
		Object user = session.getAttribute("user");
		System.out.println("data:" + listApplications);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		List<ListDataDefinition> listdatadefinition = templateviewdao.view(listApplications.getIdData());

		if (flag) {
			boolean buildHistoricFlag = validationcheckdao.checkTheConfigurationForPatternCheckTab(listdatadefinition,
					listApplications);
			System.out.println("buildHistoricFlag=" + buildHistoricFlag);
			if (!buildHistoricFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The Pattern check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		//////////////////////////////////////////////////////
		if (flag) {
			if (listApplications.getBadData().equalsIgnoreCase("Y")) {
			boolean badDataCheckFlag = validationcheckdao.checkTheBadData(listdatadefinition,
					listApplications);
				System.out.println("badDataCheckFlag=" + badDataCheckFlag);
				if (!badDataCheckFlag) {
					flag = false;
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("fail", "The Bad Data check is configured incorrectly");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// return true;
				}
			}
		}
		/////////////////////////////////////////////////////
		if (flag) {
			boolean buildHistoricFlag = validationcheckdao.checkTheConfigurationForBuildHistoric(listdatadefinition,
					listApplications);
			System.out.println("buildHistoricFlag=" + buildHistoricFlag);
			if (!buildHistoricFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The incremental type check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {

			boolean identityFlag = validationcheckdao.checkTheConfigurationForDupRowIdentity(listdatadefinition,
					listApplications);
			System.out.println("identityFlag=" + identityFlag);
			if (!identityFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The duplicate identity check (primary key) is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean applyRulesFlag = validationcheckdao.checkTheConfigurationForapplyRules(listdatadefinition,
					listApplications);
			System.out.println("applyRulesFlag=" + applyRulesFlag);
			if (!applyRulesFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("rules", "The rules are configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean applyDerivedColumnsFlag = validationcheckdao
					.checkTheConfigurationForapplyDerivedColumns(listdatadefinition, listApplications);
			System.out.println("applyDerivedColumnsFlag=" + applyDerivedColumnsFlag);
			if (!applyDerivedColumnsFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("derivedcols", "The Derived Columns are configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean AllFlag = validationcheckdao.checkTheConfigurationForDupRowAll(listdatadefinition,
					listApplications);
			System.out.println("AllFlag=" + AllFlag);
			if (!AllFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The duplicate all check (dupkey) is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean dataDriftFlag = validationcheckdao.checkTheConfigurationForDataDrift(listdatadefinition,
					listApplications);
			System.out.println("dataDriftFlag=" + dataDriftFlag);
			if (!dataDriftFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The data drift check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean numFieldFlag = validationcheckdao.checkTheConfigurationForNumField(listdatadefinition,
					listApplications);
			System.out.println("numFieldFlag=" + numFieldFlag);
			if (!numFieldFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The numerical stat check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean stringFieldFlag = validationcheckdao.checkTheConfigurationForstringField(listdatadefinition,
					listApplications);
			System.out.println("stringFieldFlag=" + stringFieldFlag);
			if (!stringFieldFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The string stat check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			// System.out.println("recordcountanomaly="+listApplications.getRecordCountAnomaly());
			// System.out.println("getkeyBasedRecordCountAnomaly="+listApplications.getkeyBasedRecordCountAnomaly());
			boolean dGroupFlag = validationcheckdao.checkTheConfigurationFordGroup(listdatadefinition,
					listApplications);
			System.out.println("dGroupFlag=" + dGroupFlag);
			if (!dGroupFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The dgroup check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean recordAnomalyFlag = validationcheckdao.checkTheConfigurationForRecordAnomaly(listdatadefinition,
					listApplications);
			System.out.println("recordAnomalyFlag=" + recordAnomalyFlag);
			if (!recordAnomalyFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The record anomaly check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			boolean nonNullFlag = validationcheckdao.checkTheConfigurationForNonNullField(listdatadefinition,
					listApplications);
			System.out.println("nonNullFlag=" + nonNullFlag);
			if (!nonNullFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The nonnull check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}
		if (flag) {
			if (listApplications.getIncrementalMatching().equalsIgnoreCase("Y")) {
				Long idData = listApplications.getIdData();
				boolean incrementalCheck = validationcheckdao.checkForIncrementalInListDataAccess(idData);
				System.out.println("incrementalCheck=" + incrementalCheck);
				if (!incrementalCheck) {
					flag = false;
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("incremental",
								"Cannot use data slices in source with Historic and Incremental Type of Application");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// return true;
				}
			}
		}

		// Changes to allow user to select either DateRuleCheck or DGroupDateRuleCheck
		// only at one time
		if (flag) {
			if (listApplications.getDateRuleChk() != null && listApplications.getDateRuleChk().equalsIgnoreCase("Y")
					&& listApplications.getdGroupDateRuleCheck() != null
					&& listApplications.getdGroupDateRuleCheck().equalsIgnoreCase("Y")) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "Choose either DateRuleCheck or DGroupDateRuleCheck, both can't be enabled together.");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		if (flag) {
			if (listApplications.getDateRuleChk().equalsIgnoreCase("Y")) {
				System.out.println("-----------in validationCheckControllerD getDateRuleChk");
				Long idData = listApplications.getIdData();
				System.out.println("validationCheckControllerD idData=>" + idData);

				// boolean dateRuleCheck = validationcheckdao.checkFordateRuleCheck(idData);
				boolean dateRuleCheck = validationcheckdao.checkFordateRuleCheck(listdatadefinition, listApplications);
				System.out.println("validationCheckControllerD dateRuleCheck=>" + dateRuleCheck);

				if (!dateRuleCheck) {
					flag = false;
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("fail",
								"The Date Rule check is configured incorrectly");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// return true;
				}
			}
		}

		if (flag) {
			boolean dGroupDateRuleCheckFlag = validationcheckdao
					.checkConfigurationDgroupDateRuleCheck(listdatadefinition, listApplications);
			System.out.println("dGroupDateRuleCheckFlag=" + dGroupDateRuleCheckFlag);
			if (!dGroupDateRuleCheckFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The DGroup DateRule check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}

		if (flag) {
			boolean dgroupNonNullFlag = validationcheckdao.checkConfigurationForDGroupNullCheck(listdatadefinition,
					listApplications);
			System.out.println("dgroupNonNullFlag=" + dgroupNonNullFlag);
			if (!dgroupNonNullFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The DGroup Null check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}

		
		if (flag) {
			boolean defaultCheckFlag = validationcheckdao.checkTheConfigurationDefaultCheck(listdatadefinition,
					listApplications);
			System.out.println("defaultCheckFlag=" + defaultCheckFlag);
			if (!defaultCheckFlag) {
				flag = false;
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("fail", "The Default check is configured incorrectly");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}
				// return true;
			}
		}

		//////////////////// --AKSHAY 4/3/2019--////////////////////////////
		if (flag) {
			if(listApplications.getTimelinessKeyChk().equalsIgnoreCase("Y"))
			{
			boolean time = validationcheckdao.checkTheConfigurationForTimelinessKeyField(listdatadefinition, listApplications);
				System.out.println("time=" + time);
				if (!time) {
					flag = false;
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("fail", "The TimelinessKey check is configured incorrectly");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// return true;
				}
		}}
		/////////////////////////////////////////////////////////////////
		// changes for lengthCheck 31Dec18
		if (flag) {
			if (listApplications.getlengthCheck().equalsIgnoreCase("Y")) {
				System.out.println("validationCheckController if (flag) listApplications.getlengthCheck().equalsIgnoreCase(\"Y\") -> ");
				Long idData = listApplications.getIdData();
//				boolean dateRuleCheck = validationcheckdao.checkFordateRuleCheck(idData);
				boolean lengthCheck = validationcheckdao.checkForLengthCheck(listdatadefinition, listApplications);

				System.out.println("lengthCheck=" + lengthCheck);
				if (!lengthCheck) {
					flag = false;
					try {
						JSONObject json = new JSONObject();
						// put some value pairs into the JSON object .
						json.put("fail", "The Length check is configured incorrectly");
						response.getWriter().println(json);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// return true;
				}
			}
			if (flag) {
				Long idApp = listApplications.getIdApp();
				validationcheckdao.updateintolistdfsetruleandtranrule(idApp,
						listApplications.getRecordCountAnomalyThreshold(), listApplications.getDuplicateCheck());

				int updateintolistapplication = validationcheckdao
						.updateintolistapplicationForAjaxRequest(listApplications);
				System.out.println("updateintolistapplication=" + updateintolistapplication);
				System.out.println("datadriftthreshold=" + listApplications.getDataDriftThreshold());

				// Sumeet_21_08_2018
				int updateintolistdatadefinitions = validationcheckdao.updateintolistdatadefinitions(
						listApplications.getIdData(), "N", listApplications.getNonNullThreshold(), "N", "N",
					 listApplications.getNumericalStatThreshold(), "N", listApplications.getStringStatThreshold(), "N",
					 listApplications.getRecordAnomalyThreshold(), listApplications.getDataDriftThreshold(), 0.0);
				System.out.println("updateintolistdatadefinitions=" + updateintolistdatadefinitions);

				int insertintolistdftranrule = validationcheckdao.updateintolistdftranrule(idApp,
						listApplications.getDupRowIdentity(), listApplications.getDupRowIdentityThreshold(),
						listApplications.getDupRowAll(), listApplications.getDupRowAllThreshold());
				System.out.println("insertintolistdftranrule=" + insertintolistdftranrule);
				try {
					JSONObject json = new JSONObject();
					// put some value pairs into the JSON object .
					json.put("success", "Validation Check Customized Successfully");
					response.getWriter().println(json);
				} catch (Exception e) {
					e.printStackTrace();
				}

			}
		}

	}

	@RequestMapping(value = "/saveValidationCheckCustomizedData")
	public ModelAndView saveValidationCheckCustomizedData(HttpServletRequest request, HttpSession session) {
		ModelAndView modelAndView = new ModelAndView("demo");
		modelAndView.addObject("msg", "Validation Check	Customized Successfully");
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}
		boolean rbac = rbacController.rbac("Validation Check", "C", session);
		if (rbac) {
			try {
				Long idApp = Long.parseLong(request.getParameter("idApp"));
				System.out.println("idApp=" + idApp);
				Long idData = Long.parseLong(request.getParameter("idData"));
				System.out.println("idData=" + idData);

				String recordCount = request.getParameter("recordCount");

				System.out.println("recordCount=" + recordCount);

				/*
				 * String
				 * recordCountText=request.getParameter("recordCountText");
				 * 
				 * Long record=0l;
				 * if(!(recordCountText==null||recordCountText.equals(""))){
				 * record=Long.parseLong(recordCountText); }
				 * System.out.println("record="+record);
				 */

				String nullCount = request.getParameter("nullCount");
				System.out.println("nullCount=" + nullCount);

				String duplicateCount = request.getParameter("duplicateCount");
				System.out.println("duplicateCount=" + duplicateCount);

				String duplicateCountText = request.getParameter("duplicateCountText");
				Double duplicateCountTextNull = 0.0;
				if (!(duplicateCountText == null || duplicateCountText.equals(""))) {
					duplicateCountTextNull = Double.parseDouble(duplicateCountText);
				}
				System.out.println("duplicateCountTextNull=" + duplicateCountTextNull);

				String duplicateCountAll = request.getParameter("duplicateCountAll");
				System.out.println("duplicateCountAll=" + duplicateCountAll);
				String duplicateCountAllText = request.getParameter("duplicateCountAllText");
				Double duplicateCountAllTextNull = 0.0;
				if (!(duplicateCountAllText == null || duplicateCountAllText.equals(""))) {
					duplicateCountAllTextNull = Double.parseDouble(duplicateCountAllText);
				}
				System.out.println("duplicateCountAllTextNull=" + duplicateCountAllTextNull);

				String numericalStats = request.getParameter("numericalStats");
				System.out.println("numericalStats=" + numericalStats);

				String stringStat = request.getParameter("stringStat");
				System.out.println("stringStat=" + stringStat);

				String columnOrderVal = request.getParameter("columnOrderVal");
				System.out.println("columnOrderVal=" + columnOrderVal);

				String fileNameVal = request.getParameter("fileNameVal");
				System.out.println("fileNameVal=" + fileNameVal);

				//
				String recordAnomaly = request.getParameter("recordAnomalyid");
				System.out.println("recordAnomaly=" + recordAnomaly);

				String DFSetComparison = request.getParameter("DFSetComparisonId");
				Double DFSetComparisonnull = 0.0;
				if (!(DFSetComparison == null || DFSetComparison.equals("")))
					DFSetComparisonnull = Double.parseDouble(DFSetComparison);
				System.out.println("DFSetComparisonnull=" + DFSetComparisonnull);
				String timeSeries = "";
				String[] timeSeriesCheckbox = request.getParameterValues("check_id");

				String recordCountAnomalyType = request.getParameter("recordCountAnomalyType");
				System.out.println("recordCountAnomalyType=" + recordCountAnomalyType);

				String applyRules = request.getParameter("applyRules");
				System.out.println("applyRules=" + applyRules);

				String applyDerivedColumns = request.getParameter("applyDerivedColumns");
				System.out.println("applyDerivedColumns=" + applyDerivedColumns);

				String startDate = request.getParameter("startdateid");
				System.out.println("startDate=" + startDate);
				String endDate = request.getParameter("enddateid");
				System.out.println("endDate=" + endDate);
				String dateformat = request.getParameter("dateformatid");
				System.out.println("dateformatid=" + dateformat);
				// System.out.println("timeSeriesCheckbox="+timeSeriesCheckbox);
				if (timeSeriesCheckbox != null) {
					for (int i = 0; i < timeSeriesCheckbox.length; i++) {
						timeSeries = timeSeries + timeSeriesCheckbox[i] + ",";
						/*
						 * if (timeSeriesCheckbox[i].equalsIgnoreCase("month"))
						 * { String monthdropdown =
						 * request.getParameter("monthdropdown");
						 * System.out.println("monthdropdown=" + monthdropdown);
						 * timeSeries = timeSeries + monthdropdown; } if
						 * (timeSeriesCheckbox[i].equalsIgnoreCase("dayOfWeek"))
						 * { String dowdropdown =
						 * request.getParameter("dowdropdown");
						 * System.out.println("dowdropdown=" + dowdropdown);
						 * timeSeries = timeSeries + dowdropdown; } if
						 * (timeSeriesCheckbox[i].equalsIgnoreCase("hourOfDay"))
						 * { String hoddropdown =
						 * request.getParameter("hoddropdown");
						 * System.out.println("hoddropdown=" + hoddropdown);
						 * timeSeries = timeSeries + hoddropdown; } if
						 * (timeSeriesCheckbox[i].equalsIgnoreCase("dayOfMonth")
						 * ) { String domdropdown =
						 * request.getParameter("domdropdown");
						 * System.out.println("domdropdown=" + domdropdown);
						 * timeSeries = timeSeries + domdropdown; }
						 */
						System.out.println("timeSeries=" + timeSeriesCheckbox[i]);
						// timeSeries = timeSeries + "), ";
					}
					timeSeries = timeSeries.toString().substring(0, timeSeries.length() - 1);
				}
				System.out.println("timeSeries=" + timeSeries.trim());

				String dataDriftCheck = request.getParameter("dataDriftCheck");
				System.out.println("dataDriftCheck=" + dataDriftCheck);
				String updateFrequency = request.getParameter("frequencyid");
				System.out.println("updateFrequency=" + updateFrequency);
				String frequencyDays = request.getParameter("EveryDay");
				int frequencyDaysnull = 0;
				if (!(frequencyDays == null || frequencyDays.equals("")))
					frequencyDaysnull = Integer.parseInt(frequencyDays);
				System.out.println("frequencyDaysnull=" + frequencyDaysnull);
				String outofNorm = request.getParameter("outofNorm");
				System.out.println("outofNorm=" + outofNorm);
				String incrementalMatching = request.getParameter("incrementalTypeId");
				System.out.println("incrementalMatching=" + incrementalMatching);
				String buildHistoricFingerPrint = request.getParameter("buildHistoricId");
				System.out.println("buildHistoricFingerPrint=" + buildHistoricFingerPrint);
				String historicStartDate = null;
				String historicEndDate = null;
				String historicDateFormat = null;
				if (buildHistoricFingerPrint == null)
					buildHistoricFingerPrint = "N";
				// if (buildHistoricFingerPrint.equalsIgnoreCase("Y")) {
				historicStartDate = request.getParameter("startdateid");
				System.out.println("historicStartDate=" + historicStartDate);
				historicEndDate = request.getParameter("enddateid");
				System.out.println("historicEndDate=" + historicEndDate);
				historicDateFormat = request.getParameter("dateformatid");
				System.out.println("historicDateFormat=" + historicDateFormat);
				// }
				String nameofEntityColumn = request.getParameter("nameofEntityColumn");
				System.out.println("nameofEntityColumn=" + nameofEntityColumn);
				String csvDirectory = request.getParameter("csvDirectory");
				System.out.println("csvDirectory=" + csvDirectory);

				String groupEquality = request.getParameter("groupEquality");
				System.out.println("groupEquality=" + groupEquality);

				String groupEqualityText = request.getParameter("groupEqualityText");
				Double groupEqualityThreshold = 0.0;
				if (!(groupEqualityText == null || groupEqualityText.equals("")))
					groupEqualityThreshold = Double.parseDouble(groupEqualityText);
				System.out.println("groupEqualityThreshold=" + groupEqualityThreshold);
				// sumeet
				String badData = request.getParameter("badData");
				System.out.println("badData=" + badData);

				// 24_DEC_2018 (12.43pm) Priyanka
				String lengthCheck = request.getParameter("lengthCheck");
				System.out.println("lengthCheck =" + lengthCheck);

				
				// changes for DateRuleChk 8jan2019 priyanka
				String dateRuleCheck = request.getParameter("dateRuleCheck");
				System.out.println("dateRuleCheck =>" + dateRuleCheck);

				ListApplications listApplication = new ListApplications();
				listApplication.setIncrementalMatching(incrementalMatching);
				listApplication.setBuildHistoricFingerPrint(buildHistoricFingerPrint);
				listApplication.setHistoricStartDate(historicStartDate);
				listApplication.setHistoricEndDate(historicEndDate);
				listApplication.setHistoricDateFormat(historicDateFormat);
				listApplication.setCsvDir(csvDirectory);
				listApplication.setGroupEquality(groupEquality);
				listApplication.setGroupEqualityThreshold(groupEqualityThreshold);
				listApplication.setOutOfNormCheck(outofNorm);
				listApplication.setColOrderValidation(columnOrderVal);
				listApplication.setFileNameValidation(fileNameVal);
				listApplication.setEntityColumn(nameofEntityColumn);
				listApplication.setIdApp(idApp);
				listApplication.setNonNullCheck(nullCount);
				listApplication.setRecordAnomalyCheck(recordAnomaly);
				listApplication.setNumericalStatCheck(numericalStats);
				listApplication.setStringStatCheck(stringStat);
				listApplication.setDataDriftCheck(dataDriftCheck);
				listApplication.setUpdateFrequency(updateFrequency);
				listApplication.setFrequencyDays(frequencyDaysnull);
				listApplication.setRecordCountAnomaly(recordCount);
				listApplication.setRecordCountAnomalyThreshold(DFSetComparisonnull);
				listApplication.setTimeSeries(timeSeries);
				listApplication.setApplyRules(applyRules);
				listApplication.setApplyDerivedColumns(applyDerivedColumns);
				listApplication.setBadData(badData);
				listApplication.setlengthCheck(lengthCheck);

				// Date Rule Change
				listApplication.setDateRuleChk(dateRuleCheck);

				int updateintolistapplication = validationcheckdao.updateintolistapplicationforCustomize(outofNorm,
						columnOrderVal, fileNameVal, 0.0, nameofEntityColumn, idApp, nullCount, recordAnomaly,
						numericalStats, stringStat, dataDriftCheck, updateFrequency, frequencyDaysnull, recordCount,
						DFSetComparisonnull, timeSeries, recordCountAnomalyType, applyRules, applyDerivedColumns,
						badData, lengthCheck, dateRuleCheck, listApplication);
				System.out.println("updateintolistapplication=" + updateintolistapplication);

				int insertintolistdftranrule = validationcheckdao.updateintolistdftranrule(idApp, duplicateCount,
						duplicateCountTextNull, duplicateCountAll, duplicateCountAllTextNull);
				System.out.println("insertintolistdftranrule=" + insertintolistdftranrule);

				modelAndView.addObject("currentSection", "Validation Check");
				modelAndView.addObject("currentLink", "VCView");
				/*
				 * List<String> warningmsgs =
				 * validationcheckdao.validationCheckprerequisite(idApp, idData,
				 * duplicateCountAll
				 * ,nullCount,duplicateCount,recordAnomaly,stringStat,
				 * numericalStats ); if(warningmsgs.size()!=0) {
				 * modelAndView.setViewName("showWarnings");
				 * modelAndView.addObject("warningmsgs", warningmsgs); }
				 */

			} catch (Exception e) {
				e.printStackTrace();
				return modelAndView;
			}

			return modelAndView;
		} else
			return new ModelAndView("loginPage");
	}

	@RequestMapping(value = "/deleteValidationCheckajax", method = RequestMethod.POST)
	public void deleteValidationCheckajax(HttpServletResponse response, HttpServletRequest request, HttpSession session,
			@RequestParam Long idApp) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		System.out.println("idApp=" + idApp);
		// Integer countofRec = validationcheckdao.getCountFromResult_masterById(idApp);
		int delete = -1;
		/*if (countofRec == 0) {
			delete = validationcheckdao.deletefromlistapplications(idApp, "delete");
		} else {*/
		delete = validationcheckdao.deletefromlistapplications(idApp, "updateActive");
		// }
		System.out.println("delete=" + delete);
		if (delete > 0) {
			try {
				response.getWriter().println("Validation Check deleted successfully");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			try {
				response.getWriter().println("There is a problem");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	@RequestMapping(value = "/dataApplicationDeleteView")
	public ModelAndView dataApplicationDeleteView(HttpServletRequest request, HttpSession session) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}
		boolean rbac = rbacController.rbac("Validation Check", "D", session);
		if (rbac) {

			Long idApp = Long.parseLong(request.getParameter("idApp"));
			System.out.println("idApp=" + idApp);
			String listappName = request.getParameter("laName");
			System.out.println("listappName=" + listappName);
			String listsourceName = request.getParameter("lsName");
			System.out.println("listsourceName=" + listsourceName);

			ModelAndView modelAndView = new ModelAndView("dataApplicationDeleteView");
			modelAndView.addObject("listsourceName", listsourceName);
			modelAndView.addObject("listappName", listappName);
			modelAndView.addObject("idApp", idApp);
			modelAndView.addObject("currentSection", "Validation Check");
			modelAndView.addObject("currentLink", "VCView");
			return modelAndView;
		} else
			return new ModelAndView("loginPage");
	}

	@RequestMapping(value = "/dataSourceDisplayAllView")
	public ModelAndView dataSourceDisplayAllView(HttpServletRequest request, HttpSession session) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}
		boolean rbac = rbacController.rbac("Validation Check", "R", session);
		if (rbac) {

			Long idData = Long.parseLong(request.getParameter("idData"));
			System.out.println("idData=" + idData);

			List listdatasource = validationcheckdao.getdatafromlistdatasource(idData);

			ModelAndView modelAndView = new ModelAndView("dataSourceDisplayAllView");
			modelAndView.addObject("listdatasource", listdatasource);
			modelAndView.addObject("currentSection", "Validation Check");
			modelAndView.addObject("currentLink", "VCView");
			return modelAndView;
		} else
			return new ModelAndView("loginPage");
	}

	@RequestMapping(value = "/finishSchemaCustomization")
	public ModelAndView finishSchemaCustomization(HttpSession session) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}
		ModelAndView modelAndView = new ModelAndView("finishSchemaCustomization");
		modelAndView.addObject("currentSection", "Validation Check");
		modelAndView.addObject("currentLink", "VCView");
		return modelAndView;
	}

	 @RequestMapping(value = "/copyConnection")
	    public void copyConnection(HttpServletRequest request, HttpSession session, HttpServletResponse response, 
	    		@RequestParam String newConnectionName, @RequestParam int idDataSchema){
			 
			 System.out.println("newConnectionName is " + newConnectionName );
			 System.out.println("idDataSchema is " + idDataSchema );
	
			  String updateListDatasSchema = ("insert into listDataSchema (schemaName, schemaType, "
			     		+ "ipAddress, databaseSchema, username, password, port, project_id, domain, "
			     		+ "gss_jaas, krb5conf, autoGenerate, suffixes, "
			     		+ "prefixes, createdAt, updatedAt, createdBy, "
			     		+ "updatedBy, hivejdbchost, hivejdbcport, sslEnb, "
			     		+ "sslTrustStorePath, trustPassword, Action) (select '" + newConnectionName + "' as schemaName, schemaType, "
			     		+ "ipAddress, databaseSchema, username, password, port, project_id, domain, "
			     		+ "gss_jaas, krb5conf, autoGenerate, suffixes, "
			     		+ "prefixes, createdAt, updatedAt, createdBy, "
			     		+ "updatedBy, hivejdbchost, hivejdbcport, sslEnb, "
			     		+ "sslTrustStorePath, trustPassword, 'Yes' from listDataSchema where "
			     		+ "idDataSchema = " + idDataSchema + ")");
			     jdbcTemplate.execute(updateListDatasSchema);
			     System.out.println("listdataschema updated");
			     

			     JSONObject json = new JSONObject();
				 json.put("success", "Connection Check Coppyed Successfully");
	 }
	 @RequestMapping(value = "/copyRules")
	    public void copyRules(HttpServletRequest request, HttpSession session, HttpServletResponse response, 
	    		@RequestParam String newRuleName, @RequestParam int idListColrules){
			 
			 System.out.println("newRuleName is " + newRuleName );
			 System.out.println("idListColrules is " + idListColrules );
	
			  String updateListColRules = ("insert into listColRules (idData, idCol, ruleName, "
			  		+ "description, createdAt, ruleType, expression, external, "
			  		+ "externalDatasetName, idRightData, matchingRules, matchType, project_id) "
			  		+ "(select idData, idCol, '" + newRuleName + "' as ruleName, description, createdAt, ruleType, expression,"
			  		+ " external, "
			  		+ "externalDatasetName, idRightData, matchingRules, matchType, project_id "
			  		+ "from listColRules where "
			     		+ "idListColrules = " + idListColrules + ")");
			     jdbcTemplate.execute(updateListColRules);
			     System.out.println("ListColRules updated");
			     

			     JSONObject json = new JSONObject();
				 json.put("success", "Rule Coppyed Successfully");
	 }
	 
	 @RequestMapping(value = "/copyGlobalRules")
	 public void copyGlobalRules(HttpServletRequest request, HttpSession session, HttpServletResponse response, 
	 @RequestParam String newRuleName, @RequestParam int idListColrules){

	 System.out.println("newRuleName is " + newRuleName );
	 System.out.println("idListColrules is " + idListColrules );

	 String updateListColRules = ("insert into listColGlobalRules (ruleName, "
	 + "description, createdAt, expression,"
	 + " project_id) "
	 + "(select '" + newRuleName + "' as ruleName, description, createdAt, expression,"
	 + "project_id "
	 + "from listColGlobalRules where "
	 + "idListColrules = " + idListColrules + ")");
	 jdbcTemplate.execute(updateListColRules);
	 System.out.println("listColGlobalRules updated");


	 JSONObject json = new JSONObject();
	 json.put("success", "Rule Copied Successfully");
	 }
	 
	
	    @RequestMapping(value = "/copyValidation")
	    public void copyValidation(HttpServletRequest request, HttpSession session, HttpServletResponse response, 
	    		@RequestParam String newValidationName, @RequestParam int idApp){
			 
			 System.out.println("newTemplateName is " + newValidationName );
			 System.out.println("idData is " + idApp );
			 
			 String maxIdAppQuery = "select max(idApp) as idApp from listApplications";
			 SqlRowSet maxIdAppRowSet =  jdbcTemplate.queryForRowSet(maxIdAppQuery);
			 int maxIdApp = 0;
				if (maxIdAppRowSet.next()) {
					maxIdApp = Integer.parseInt(maxIdAppRowSet.getString("idApp"));
				}
				
			 newValidationName = (maxIdApp + 1) + "_" + newValidationName;
			 String updateListApplications = ("insert into listApplications (name, description, "
			     		+ "appType, idData, idRightData, createdBy, createdAt, updatedAt, updatedBy, "
			     		+ "fileNameValidation, entityColumn, colOrderValidation, matchingThreshold, "
			     		+ "nonNullCheck, numericalStatCheck, stringStatCheck, recordAnomalyCheck, "
			     		+ "incrementalMatching, incrementalTimestamp, dataDriftCheck, updateFrequency, "
			     		+ "frequencyDays, recordCountAnomaly, recordCountAnomalyThreshold, timeSeries, "
			     		+ "keyGroupRecordCountAnomaly, outOfNormCheck, applyRules, applyDerivedColumns, "
			     		+ "csvDir, groupEquality, groupEqualityThreshold, buildHistoricFingerPrint, "
			     		+ "historicStartDate, historicEndDate, historicDateFormat, active, correlationcheck, "
			     		+ "project_id, lengthcheck, timelinessKeyCheck, defaultCheck, defaultValues, "
			     		+ "patternCheck, dateRuleCheck, badData, idLeftData, prefix1, prefix2) (select '" + newValidationName + "' as name, description, appType, "
			     		+ "idData, idRightData, createdBy, createdAt, updatedAt, updatedBy, "
			     		+ "fileNameValidation, entityColumn, colOrderValidation, matchingThreshold, "
			     		+ "nonNullCheck, numericalStatCheck, stringStatCheck, recordAnomalyCheck, "
			     		+ "incrementalMatching, incrementalTimestamp, dataDriftCheck, updateFrequency, "
			     		+ "frequencyDays, recordCountAnomaly, recordCountAnomalyThreshold, timeSeries, "
			     		+ "keyGroupRecordCountAnomaly, outOfNormCheck, applyRules, applyDerivedColumns, "
			     		+ "csvDir, groupEquality, groupEqualityThreshold, buildHistoricFingerPrint, "
			     		+ "historicStartDate, historicEndDate, historicDateFormat, active, correlationcheck, "
			     		+ "project_id, lengthcheck, timelinessKeyCheck, defaultCheck, defaultValues, "
			     		+ "patternCheck, dateRuleCheck, badData, idLeftData, prefix1, prefix2 from listApplications where "
			     		+ "idApp = " + idApp + ")");
			     jdbcTemplate.execute(updateListApplications);
			     System.out.println("liastApplication updated");
			     

			     JSONObject json = new JSONObject();
				 json.put("success", "Validation Check Coppyed Successfully");
	 }
	

	@RequestMapping(value = "/validationCheck_View")
	public ModelAndView validationCheckView(HttpSession session) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}
		boolean rbac = rbacController.rbac("Validation Check", "R", session);
		if (rbac) {

			System.out.println("conrtoller for validationCheck_View");
			List listappslistds = validationcheckdao.getdatafromlistappsandlistdatasources();

			
			
		/*	for (Iterator iterator = listappslistds.iterator(); iterator.hasNext();) {
				ListApplicationsandListDataSources object = (ListApplicationsandListDataSources) iterator.next();
				System.out.println("In loop =>"+object.getAppType());
				if(object.getAppType().equals("Schema Matching")) {
				
				
			}
			 */
			/*
			 * Map<String,String> module =(Map<String,String>)
			 * session.getAttribute("module");
			 * System.out.println("module="+module); for (Map.Entry m :
			 * module.entrySet()) {
			 * System.out.println("idTask="+m.getKey()+"accessControl="+m.
			 * getValue()); }listappslistds
			 */
			ModelAndView modelAndView = new ModelAndView("validationView");
			modelAndView.addObject("listappslistds", listappslistds);
			modelAndView.addObject("currentSection", "Validation Check");
			modelAndView.addObject("currentLink", "VCView");
			return modelAndView;
		} else
			return new ModelAndView("loginPage");
	}

	@RequestMapping(value = "/dataApplicationCreateView")
	public ModelAndView listValidation(ModelAndView modelAndView, HttpSession session) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}
		boolean rbac = rbacController.rbac("Validation Check", "C", session);
		if (rbac) {
			System.out.println("dataApplicationCreateView");
			List<ListDataSource> getlistdatasourcesname = templateviewdao.getlistdatasourcesname();

			int idData = 0;

			for (ListDataSource listDataSource : getlistdatasourcesname) {
				idData = listDataSource.getIdData();
			}

			System.out.println("idData dataApplicationCreateView=>" + idData);

			
			Long idDataLong = (long) idData;

			// fOR kafka
			String dataLocation = templateviewdao.getDataLocationByidData(idDataLong);

			System.out.println("dataApplicationCreateView dataLocation = " + dataLocation);

			modelAndView.addObject("dataLocationName", dataLocation);

			List<ListDataSchema> listdataschema = listdatasourcedao.getListDataSchema();
			modelAndView.addObject("getlistdatasourcesname", getlistdatasourcesname);
			modelAndView.addObject("currentSection", "Validation Check");
			modelAndView.addObject("currentLink", "Add New");
			modelAndView.setViewName("dataApplicationCreateView");
			modelAndView.addObject("listdataschema", listdataschema);
			return modelAndView;
		} else
			return new ModelAndView("loginPage");
	}

	@RequestMapping(value = "/createValidationCheckAjax", method = RequestMethod.POST)
	public ModelAndView createValidationCheckAjax(HttpServletRequest request, HttpServletResponse response,
			HttpSession session) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}
		boolean rbac = rbacController.rbac("Validation Check", "C", session);
		if (rbac) {

			Long idUser = (Long) session.getAttribute("idUser");
			System.out.println("idUser=" + idUser);
			System.out.println("createValidationCheckAjax");

			String name = request.getParameter("dataset");
			System.out.println("name=" + name);
			String description = request.getParameter("description");
			System.out.println("description=" + description);

			String getlistName = request.getParameter("getlistName");
			System.out.println("getlistName=" + getlistName);

			String apptype = request.getParameter("apptype");
			System.out.println("apptype=" + apptype);
			if (apptype.equalsIgnoreCase("Matching")) {
				apptype = request.getParameter("matchapptype");
				System.out.println("apptype=" + apptype);

			}
			Long idData = -1l;
			try {
				System.out.println("idData=" + idData);
				idData = Long.parseLong(request.getParameter("sourceid"));

			} catch (Exception e) {

			}

			String threshold_id = request.getParameter("threshold_id");
			Double matchingThreshold = 0.0;
			if (!(threshold_id == null || threshold_id.equals(""))) {
				matchingThreshold = Double.parseDouble(threshold_id);
			}
			System.out.println("matchingThreshold=" + matchingThreshold);

			String incrementalMatching = request.getParameter("incremental_Matching_Id");
			if (incrementalMatching == null) {
				incrementalMatching = "N";
			}
			System.out.println("incrementalMatching=" + incrementalMatching);
			String dateFormat = request.getParameter("dateformatid");
			System.out.println("dateFormat=" + dateFormat);
			String leftSliceEnd = request.getParameter("leftsliceend");
			System.out.println("leftSliceEnd=" + leftSliceEnd);

			long idApp = validationcheckdao.insertintolistapplications(name, description, apptype, idData, idUser,
					matchingThreshold, incrementalMatching, dateFormat, leftSliceEnd);
			int updateApplicationNameWithIdApp = validationcheckdao.updateApplicationNameWithIdApp(name, idApp);
			System.out.println("updateApplicationNameWithIdApp=" + updateApplicationNameWithIdApp);
			System.out.println("idApp=" + idApp);
			String applicationName = validationcheckdao.getNameFromListDataSources(idData);

			System.out.println("applicationName=" + applicationName);

			if (apptype.equals("Data Forensics")) {
				ModelAndView model = new ModelAndView();

				String dataLocation = validationcheckdao.getDataLocationInListDataSources(idData);
				System.out.println("dataLocation=" + dataLocation);
				if (dataLocation.equalsIgnoreCase("HDFS") || dataLocation.equalsIgnoreCase("FILESYSTEM")) {
					System.out.println("finishSchemaCustomization");
					model.setViewName("finishSchemaCustomization");
					model.addObject("filesystem", true);
				} else {
					System.out.println("finishSchemaCustomize");
					model.setViewName("finishSchemaCustomization");
					model.addObject("filesystem", false);
				}

				if (dataLocation.equalsIgnoreCase("Kafka")) {

					int windowTime = Integer.parseInt(request.getParameter("windowTime"));
					String startTime = request.getParameter("startTime");
					String endTime = request.getParameter("endTime");

					System.out.println("idApp =>" + idApp);
					System.out.println("windowTime =>" + windowTime);
					System.out.println("startTime =>" + startTime);
					System.out.println("endTime =>" + endTime);

					templateviewdao.updatelistApplicationsForKafka(idApp, windowTime, startTime, endTime);

					System.out.println("updated LA for KAFKA........");

				}
				model.addObject("idApp", idApp);
				model.addObject("idData", idData);
				model.addObject("currentSection", "Validation Check");
				model.addObject("currentLink", "Add New");
				return model;
			} else if (apptype.equals("Schema Matching")) {
				ModelAndView model = new ModelAndView("ValidationSuccess");
				Long schemaid1 = Long.parseLong(request.getParameter("schemaid1"));
				Long schemaid2 = Long.parseLong(request.getParameter("schemaid2"));
				String prefix1 = request.getParameter("prefix1");
				String prefix2 = request.getParameter("prefix2");

				String schematypename = request.getParameter("schematypename");

				if (schematypename.equalsIgnoreCase("metadata")) {
					templateviewdao.updatelistApplicationsForSchemamatching(idApp, schemaid1, schemaid2, schematypename,
							name, null, null, prefix1, prefix2);
				} else if (schematypename.equalsIgnoreCase("RC")) {
					String threasholdType = request.getParameter("schema_thresholdtype");
					String rcThreshold = request.getParameter("schema_rc");

					System.out.println("threasholdType:" + threasholdType);
					System.out.println("rcThreshold:" + rcThreshold);
					templateviewdao.updatelistApplicationsForSchemamatching(idApp, schemaid1, schemaid2, schematypename,
							name, threasholdType, rcThreshold, prefix1, prefix2);

				} else if (schematypename.equalsIgnoreCase("both")) {
					String threasholdType = request.getParameter("schema_thresholdtype");
					String rcThreshold = request.getParameter("schema_rc");
					templateviewdao.updatelistApplicationsForSchemamatching(idApp, schemaid1, schemaid2, schematypename,
							name, threasholdType, rcThreshold, prefix1, prefix2);

					long idApp1 = validationcheckdao.insertintolistapplications(name, description, apptype, idData,
							idUser, matchingThreshold, incrementalMatching, dateFormat, leftSliceEnd);

					templateviewdao.updatelistApplicationsForSchemamatchingForBoth_RC(idApp1, schemaid1, schemaid2,
							schematypename, name, threasholdType, rcThreshold);
				}

				// update listapplications

				System.out.println("schema ids :" + schemaid1 + "   " + schemaid2);

				model.addObject("currentSection", "Validation Check");
				model.addObject("currentLink", "Add New");
				return model;
			} else if (apptype.equals("Data Matching")) {
				ModelAndView model = new ModelAndView("matchKeyCreateView");
				model.addObject("idApp", idApp);
				model.addObject("idData", idData);
				model.addObject("apptype", apptype);
				model.addObject("applicationName", applicationName);
				model.addObject("description", description);
				model.addObject("name", name);
				model.addObject("currentSection", "Validation Check");
				model.addObject("currentLink", "Add New");
				if (incrementalMatching.equalsIgnoreCase("Y")) {
					model.addObject("incrementalMatching", incrementalMatching);
					model.addObject("Source2DateFormat", true);
				} else {
					model.addObject("incrementalMatching", "N");
				}
				List<ListDataSource> getlistdatasourcesname = templateviewdao.getlistdatasourcesname();
				List listRefFunctionsname = validationcheckdao.getDataFromlistRefFunctions();
				List listDataDefinitionColumnNames = validationcheckdao.getDisplayNamesFromListDataDefinition(idData);
				List matchingRules = validationcheckdao.getMatchingRules(idApp);
				System.out.println("matchingRulesSize=" + matchingRules.size());
				if (matchingRules.size() >= 1) {
					model.addObject("matchingRulesTrue", true);
				}
				model.addObject("matchingRules", matchingRules);
				model.addObject("listDataDefinitionColumnNames", listDataDefinitionColumnNames);
				model.addObject("listRefFunctionsname", listRefFunctionsname);
				model.addObject("getlistdatasourcesname", getlistdatasourcesname);
				model.addObject("currentSection", "Validation Check");
				// model.addObject("currentLink", "VCView");
				model.setViewName("matchKeyCreateView");

				return model;
			} else if (apptype.equals("Data Matching Group")) {
				List<ListDataSource> getlistdatasourcesname = templateviewdao.getlistdatasourcesname();
				List listDataDefinitionColumnNames = validationcheckdao.getDisplayNamesFromListDataDefinition(idData);
				ModelAndView model = new ModelAndView("DataMatchingGroupCreateView");
				model.addObject("listDataDefinitionColumnNames", listDataDefinitionColumnNames);
				model.addObject("getlistdatasourcesname", getlistdatasourcesname);
				model.addObject("idApp", idApp);
				model.addObject("idData", idData);
				model.addObject("apptype", apptype);
				model.addObject("applicationName", applicationName);
				model.addObject("description", description);
				model.addObject("name", name);
				model.addObject("currentSection", "Validation Check");
				model.addObject("currentLink", "Add New");
				return model;
			} else if (apptype.equals("File Management")) {
				System.out.println("File Management");
				ModelAndView model = new ModelAndView("fileManagementCreate");
				model.addObject("idApp", idApp);
				model.addObject("idData", idData);
				model.addObject("apptype", apptype);
				model.addObject("applicationName", applicationName);
				model.addObject("description", description);
				model.addObject("name", name);
				model.addObject("currentSection", "Validation Check");
				model.addObject("currentLink", "Add New");
				return model;
			} else if (apptype.equals("Statistical Matching")) {
				System.out.println("Statistical Matching");
				List<ListDataSource> getlistdatasourcesname = templateviewdao.getlistdatasourcesname();
				List listRefFunctionsname = validationcheckdao.getDataFromlistRefFunctions();
				List listDataDefinitionColumnNames = validationcheckdao.getDisplayNamesFromListDataDefinition(idData);
				ModelAndView model = new ModelAndView("statisticalMatchingCreateView");

				model.addObject("listDataDefinitionColumnNames", listDataDefinitionColumnNames);
				model.addObject("listRefFunctionsname", listRefFunctionsname);
				model.addObject("getlistdatasourcesname", getlistdatasourcesname);
				model.addObject("currentSection", "Validation Check");
				model.addObject("idApp", idApp);
				model.addObject("idData", idData);
				model.addObject("apptype", apptype);
				model.addObject("applicationName", applicationName);
				model.addObject("description", description);
				model.addObject("name", name);
				model.addObject("currentSection", "Validation Check");
				model.addObject("currentLink", "Add New");
				return model;
			} else if (apptype.equals("Model Governance")) {
				System.out.println("Model Governance");
				List<ListDataSource> getlistdatasourcesname = templateviewdao.getlistdatasourcesname();
				List listRefFunctionsname = validationcheckdao.getDataFromlistRefFunctions();
				List listDataDefinitionColumnNames = validationcheckdao.getDisplayNamesFromListDataDefinition(idData);
				ModelAndView model = new ModelAndView("modelGovernanceCreateView");

				model.addObject("listDataDefinitionColumnNames", listDataDefinitionColumnNames);
				model.addObject("listRefFunctionsname", listRefFunctionsname);
				model.addObject("getlistdatasourcesname", getlistdatasourcesname);
				model.addObject("currentSection", "Validation Check");
				model.addObject("idApp", idApp);
				model.addObject("idData", idData);
				model.addObject("apptype", apptype);
				model.addObject("applicationName", applicationName);
				model.addObject("description", description);
				model.addObject("name", name);
				model.addObject("currentSection", "Validation Check");
				model.addObject("currentLink", "Add New");
				return model;
			} else if (apptype.equals("Model Governance Dashboard")) {
				System.out.println("Model Governance Dashboard");
				ModelAndView model = new ModelAndView("modelGovernanceDashboardCreateView");
				Map<Long, String> decileEqualityAppType = validationcheckdao
						.getModelGovernanceAppTypeFromListApplications("Decile Equality");
				Map<Long, String> decileConsistencyAppType = validationcheckdao
						.getModelGovernanceAppTypeFromListApplications("Decile Consistency");
				Map<Long, String> scoreConsistencyAppType = validationcheckdao
						.getModelGovernanceAppTypeFromListApplications("Score Consistency");
				model.addObject("decileEqualityAppType", decileEqualityAppType);
				model.addObject("decileConsistencyAppType", decileConsistencyAppType);
				model.addObject("scoreConsistencyAppType", scoreConsistencyAppType);
				model.addObject("idApp", idApp);
				model.addObject("idData", idData);
				model.addObject("apptype", apptype);
				model.addObject("applicationName", applicationName);
				model.addObject("description", description);
				model.addObject("name", name);
				model.addObject("currentSection", "Validation Check");
				model.addObject("currentLink", "Add New");
				return model;
			}

			return null;
		} else
			return new ModelAndView("loginPage");
	}

	@SuppressWarnings("unlikely-arg-type")
	@RequestMapping(value = "/customizeValidation", method = RequestMethod.GET)
	public ModelAndView customizeValidation(HttpSession session, HttpServletRequest request) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}
		boolean rbac = rbacController.rbac("Validation Check", "U", session);
		if (rbac) {
			System.out.println("idApp =====>>>> " + request.getParameter("idApp"));
			Long idApp = Long.parseLong(request.getParameter("idApp"));
			String name = request.getParameter("laName");
			System.out.println("applicationName=" + name);

			String applicationName = request.getParameter("lsName");
			System.out.println("applicationName=.........................." + applicationName);
			Long idData = Long.parseLong(request.getParameter("idData"));
			System.out.println("idData=" + idData);
			/*
			 * List<ListDataDefinition> ListDataDefinitiondata =
			 * validationcheckdao.getDataFromListDataDefinition(idData);
			 * System.out.println("ListDataDefinitiondata="+
			 * ListDataDefinitiondata);
			 * System.out.println("getStringStat="+ListDataDefinitiondata.get(0)
			 * . getStringStat());
			 */

			// Map getdatafromlistdftranrule =
			// validationcheckdao.getdatafromlistdftranrule(idApp);
			// System.out.println("getdatafromlistdftranrule="+getdatafromlistdftranrule);

			String appType = validationcheckdao.getAppTypeFromListApplication(idApp);
			ListApplications listApplicationsData1 = validationcheckdao.getdatafromlistapplications(idApp);

//			List<ListApplications> ListDataDefinitiondata = validationcheckdao.getdatafromlistapplications(idApp);
			System.out.println("appType=" + appType);
			ModelAndView modelAndView = new ModelAndView();
			if (appType.equals("Schema Matching")) {

				// for editing schema matching validation by pravin
				modelAndView.setViewName("editSchemaMatchingValidation");
//				List<ListDataSchema> listdataschema1 = listdatasourcedao.getListDataSchemaForIdDataSchema(idDataSchema);
				// modelAndView.addObject("applicationName", applicationName);
				modelAndView.addObject("NameValidation", listApplicationsData1.getFileNameValidation());
				modelAndView.addObject("name", name);
				modelAndView.addObject("prefix1", listApplicationsData1.getPrefix1());
				modelAndView.addObject("prefix2", listApplicationsData1.getPrefix2());
				modelAndView.addObject("description", listApplicationsData1.getDescription());
				modelAndView.addObject("RecordCountThreshold", listApplicationsData1.getRecordCountAnomalyThreshold());

				modelAndView.addObject("entityColumn", listApplicationsData1.getEntityColumn());
				modelAndView.addObject("recordCountAnomaly", listApplicationsData1.getRecordCountAnomaly());
				modelAndView.addObject("description", listApplicationsData1.getDescription());

				List<ListDataSchema> listdataschema = listdatasourcedao.getListDataSchema();

			       
			
				long iddataSchemaLeft = listApplicationsData1.getIdLeftData();
				long iddataSchemaRight = listApplicationsData1.getIdRightData();

				System.out.println("iddataSchema" + iddataSchemaLeft);
				List<ListDataSchema> listdataschema3 = listdatasourcedao.getListDataSchema();
				String idDataSchemaNmeLeft = listdatasourcedao.getSchemaNameByIdData(iddataSchemaLeft);
				String idDataSchemaNmeRight = listdatasourcedao.getSchemaNameByIdData(iddataSchemaRight);
				listdataschema.removeIf(e -> e.getSchemaName().equals(idDataSchemaNmeLeft));
				listdataschema.removeIf(f -> f.getSchemaName().equals(idDataSchemaNmeRight));

				 
					  
				  
				
				modelAndView.addObject("idDataSchemaNmeLeft", idDataSchemaNmeLeft);
				modelAndView.addObject("idDataSchemaNmeRight", idDataSchemaNmeRight);
				modelAndView.addObject("listdataschema1", listdataschema);

				System.out.println("idDataSchemaNmeVal =>" + idDataSchemaNmeLeft);

			
			} else if (appType.equals("Data Matching")) {
				ListApplications listApplicationsData = validationcheckdao.getdatafromlistapplications(idApp);

				List matchingRules = validationcheckdao.getMatchingRules(idApp);
				modelAndView.addObject("matchingRules", matchingRules);
				System.out.println("matchingRulesSize=" + matchingRules.size());
				// ModelAndView model=new ModelAndView("matchTypeCreateView");
				if (matchingRules.size() >= 1) {
					modelAndView.addObject("matchingRulesTrue", true);
				}
				System.out.println("matchKeyCustomizeView");
				modelAndView.setViewName("matchKeyCustomizeView");

				List<ListDataSource> getlistdatasourcesname = templateviewdao.getlistdatasourcesname();
				List listRefFunctionsname = validationcheckdao.getDataFromlistRefFunctions();
				List listDataDefinitionColumnNames = validationcheckdao.getDisplayNamesFromListDataDefinition(idData);
				// List matchingRules =
				// validationcheckdao.getMatchingRules(idApp);
				System.out.println("matchingRulesSize=" + matchingRules.size());
				// ModelAndView model = new ModelAndView("matchKeyCreateView");
				if (matchingRules.size() >= 1) {
					modelAndView.addObject("matchingRulesTrue", true);
				}
				modelAndView.addObject("matchingRules", matchingRules);
				modelAndView.addObject("listDataDefinitionColumnNames", listDataDefinitionColumnNames);
				modelAndView.addObject("listRefFunctionsname", listRefFunctionsname);
				modelAndView.addObject("getlistdatasourcesname", getlistdatasourcesname);
				modelAndView.addObject("currentSection", "Validation Check");
				modelAndView.addObject("currentLink", "VCView");
				modelAndView.addObject("dateFormat", listApplicationsData.getUpdateFrequency());
				modelAndView.addObject("matchByValue", listApplicationsData.getFileNameValidation());
				modelAndView.addObject("matchBySubsegment", listApplicationsData.getColOrderValidation());
				modelAndView.addObject("idRightData", listApplicationsData.getIdRightData());
				modelAndView.addObject("absoluteThreshold", listApplicationsData.getRecordCountAnomalyThreshold());
				modelAndView.addObject("UnMatchedAnomalyThreshold", listApplicationsData.getGroupEqualityThreshold());
				// String
				// matchkeyformula=validationcheckdao.getMatchingExpressionFromListDMRules(idApp);
				modelAndView.addObject("matchkeyformula", listApplicationsData.getKeyGroupRecordCountAnomaly());
				modelAndView.addObject("setMatchingAutomatic", listApplicationsData.getOutOfNormCheck());
				modelAndView.addObject("recordCount", listApplicationsData.getNumericalStatCheck());
				modelAndView.addObject("primaryKey", listApplicationsData.getStringStatCheck());
				// modelAndView.addObject("matchkeyformula",matchkeyformula);
				if (listApplicationsData.getIncrementalMatching().equalsIgnoreCase("Y")) {
					modelAndView.addObject("Source2DateFormat", true);
				}
			} else if (appType.equals("Data Forensics")) {
				System.out.println("dataApplicationCustomizeView");
				modelAndView.setViewName("dataApplicationCustomizeView");

				List<ListDataDefinition> ListDataDefinitiondata = validationcheckdao
						.getDataFromListDataDefinition(idData);
				System.out.println("ListDataDefinitiondata=" + ListDataDefinitiondata);
				System.out.println("getStringStat=" + ListDataDefinitiondata.get(0).getStringStat());
				System.out.println("StringThreshold" + ListDataDefinitiondata.get(0).getStringStatThreshold());
				modelAndView.addObject("listDataDefinitionData", ListDataDefinitiondata);

				Multimap<String, Double> map = validationcheckdao.getDataFromListDfTranRule(idApp);
				Set keySet = map.keySet();
				Iterator keyIterator = keySet.iterator();
				int i = 0;
				while (keyIterator.hasNext()) {
					Object key = keyIterator.next();

					Collection values = (Collection) map.get((String) key);
					Iterator valuesIterator = values.iterator();
					while (valuesIterator.hasNext()) {
						System.out.print("Key: " + key + ", ");
						// System.out.print( "Value: " + valuesIterator.next() +
						// ".
						// " );

						if (i == 0) {
							System.out.println("allDupRow=" + key);
							modelAndView.addObject("allDupRow", key);
							modelAndView.addObject("allThreshold", valuesIterator.next());
							i++;
						} else {
							System.out.println("identityDupRow=" + key);
							modelAndView.addObject("identityDupRow", key);
							modelAndView.addObject("identityThreshold", valuesIterator.next());
						}
					}
					System.out.print("\n");
				}
				ListApplications listApplicationsData = validationcheckdao.getdatafromlistapplications(idApp);
				String timeSeries = validationcheckdao.getTimeSeriesForIdApp(idApp);
				if (!timeSeries.equals("None")) {
					String[] split = timeSeries.split(",");
					for (int i1 = 0; i1 < split.length; i1++) {
						System.out.println(split[i1]);
						if (split[i1].equalsIgnoreCase("month")) {
							System.out.println("month condition");
							modelAndView.addObject("month", split[i1]);
						}
						if (split[i1].equalsIgnoreCase("dayOfWeek")) {
							modelAndView.addObject("dayOfWeek", split[i1]);
						}
						if (split[i1].equalsIgnoreCase("hourOfDay")) {
							modelAndView.addObject("hourOfDay", split[i1]);
							System.out.println("hourOfDay");
						}
						if (split[i1].equalsIgnoreCase("dayOfMonth")) {
							modelAndView.addObject("dayOfMonth", split[i1]);
						}
					}
				} else {
					modelAndView.addObject("None", timeSeries);
				}

				System.out.println("listApplicationsData=" + listApplicationsData);
				modelAndView.addObject("listApplicationsData", listApplicationsData);
				// updatefrequency
				String updateFrequency = listApplicationsData.getUpdateFrequency();
				System.out.println("listApplicationsData.getUpdateFrequency();=" + updateFrequency);
				if (updateFrequency.equalsIgnoreCase("Daily") || updateFrequency.equalsIgnoreCase("Never")) {
					System.out.println("daily r never");
					modelAndView.addObject("updateFrequency", updateFrequency);
				} else {
					int frequencyDays = listApplicationsData.getFrequencyDays();
					System.out.println("frequencyDays=" + frequencyDays);
					modelAndView.addObject("updateFrequency", updateFrequency);
					modelAndView.addObject("frequencyDays", frequencyDays);
				}

				modelAndView.addObject("stringStatStatus", listApplicationsData.getStringStatCheck());
				modelAndView.addObject("nullCountStatus", listApplicationsData.getNonNullCheck());
				modelAndView.addObject("numericalStatsStatus", listApplicationsData.getNumericalStatCheck());
				modelAndView.addObject("recordAnomalyStatus", listApplicationsData.getRecordAnomalyCheck());
				modelAndView.addObject("dataDriftStatus", listApplicationsData.getDataDriftCheck());
				modelAndView.addObject("outofNormStatus", listApplicationsData.getOutOfNormCheck());
				modelAndView.addObject("recordCountAnomalyTypeStatus", listApplicationsData.getRecordCountAnomaly());
				modelAndView.addObject("recordCountAnomalyThresholdStatus",
						listApplicationsData.getRecordCountAnomalyThreshold());
				modelAndView.addObject("applyRulesStatus", listApplicationsData.getApplyRules());
				modelAndView.addObject("applyDerivedColumnsStatus", listApplicationsData.getApplyDerivedColumns());
				modelAndView.addObject("fileNameValStatus", listApplicationsData.getFileNameValidation());
				modelAndView.addObject("columnOrderValStatus", listApplicationsData.getColOrderValidation());
				modelAndView.addObject("entityColumn", listApplicationsData.getEntityColumn());
				modelAndView.addObject("incrementalMatching", listApplicationsData.getIncrementalMatching());
				modelAndView.addObject("buildHistoricFingerPrint", listApplicationsData.getBuildHistoricFingerPrint());
				modelAndView.addObject("defaultCheckStatus", listApplicationsData.getDefaultCheck());
				modelAndView.addObject("patternCheckStatus", listApplicationsData.getPatternCheck());
				modelAndView.addObject("badDataStatus", listApplicationsData.getBadData());

				// priyanka 25-12-2018

				modelAndView.addObject("lengthCheckStatus", listApplicationsData.getlengthCheck());

				modelAndView.addObject("dateRuleChkStatus", listApplicationsData.getDateRuleChk());

				// date rule changes 8jan2019 priyanka

				modelAndView.addObject("timelinessKeyStatus", listApplicationsData.getTimelinessKeyChk());

				modelAndView.addObject("dGroupNullCheckStatus", listApplicationsData.getdGroupNullCheck());

				System.out.println("dGroupDateRuleCheckStatus****:" + listApplicationsData.getdGroupDateRuleCheck());
				modelAndView.addObject("dGroupDateRuleCheckStatus", listApplicationsData.getdGroupDateRuleCheck());

				if (listApplicationsData.getHistoricStartDate() != null
						&& listApplicationsData.getHistoricEndDate() != null) {
					String[] StartDate = listApplicationsData.getHistoricStartDate().split(" ");
					String[] EndDate = listApplicationsData.getHistoricEndDate().split(" ");
					// System.out.println(split[0].length());
					modelAndView.addObject("historicStartDate", StartDate[0]);
					modelAndView.addObject("historicEndDate", EndDate[0]);
				} else {
					modelAndView.addObject("historicStartDate", listApplicationsData.getHistoricStartDate());
					modelAndView.addObject("historicEndDate", listApplicationsData.getHistoricEndDate());
				}

				modelAndView.addObject("historicDateFormat", listApplicationsData.getHistoricDateFormat());
				modelAndView.addObject("csvDir", listApplicationsData.getCsvDir());
				modelAndView.addObject("groupEquality", listApplicationsData.getGroupEquality());
				modelAndView.addObject("groupEqualityThreshold", listApplicationsData.getGroupEqualityThreshold());

				String dataLocation = validationcheckdao.getDataLocationFromListDataSources(idData);
				System.out.println("dataLocation=" + dataLocation);
				if (dataLocation.equalsIgnoreCase("FILESYSTEM")) {
					modelAndView.addObject("dataLocation", dataLocation);
				}
				String duplicateCheck = validationcheckdao.getDuplicateCheckFromListDFSetRule(idApp);
				modelAndView.addObject("duplicateCheck", duplicateCheck);
			} else if (appType.equals("Statistical Matching")) {

				modelAndView.setViewName("statisticalMatchingCustomizeView");
				System.out.println("statisticalMatchingCustomizeView");

				System.out.println("Statistical Matching");
				List<ListDataSource> getlistdatasourcesname = templateviewdao.getlistdatasourcesname();
				List listRefFunctionsname = validationcheckdao.getDataFromlistRefFunctions();
				List listDataDefinitionColumnNames = validationcheckdao.getDisplayNamesFromListDataDefinition(idData);

				modelAndView.addObject("listDataDefinitionColumnNames", listDataDefinitionColumnNames);
				modelAndView.addObject("listRefFunctionsname", listRefFunctionsname);
				modelAndView.addObject("getlistdatasourcesname", getlistdatasourcesname);
				modelAndView.addObject("currentSection", "Validation Check");
				modelAndView.addObject("idApp", idApp);
				modelAndView.addObject("idData", idData);
				modelAndView.addObject("applicationName", applicationName);
				modelAndView.addObject("name", name);
				long secondSourceIdData = validationcheckdao.getNamefromlistDataSources(idApp);
				modelAndView.addObject("secondSourceIdData", secondSourceIdData);
				System.out.println("secondSourceIdData=" + secondSourceIdData);
				listStatisticalMatchingConfig listStatisticalMatchingData = validationcheckdao
						.getDataFromlistStatisticalMatchingConfig(idApp);
				System.out.println(
						"listStatisticalMatchingData=" + listStatisticalMatchingData.getMeasurementMeanThreshold());
				String expression = listStatisticalMatchingData.getLeftSideExp() + "="
						+ listStatisticalMatchingData.getRightSideExp();
				modelAndView.addObject("expression", expression);
				modelAndView.addObject("leftSideExp", listStatisticalMatchingData.getLeftSideExp());
				modelAndView.addObject("rightSideExp", listStatisticalMatchingData.getRightSideExp());

				modelAndView.addObject("RCType", listStatisticalMatchingData.getRecordCountType());
				modelAndView.addObject("RCThreshold", listStatisticalMatchingData.getRecordCountThreshold());
				modelAndView.addObject("MSum", listStatisticalMatchingData.getMeasurementSum());
				modelAndView.addObject("MSType", listStatisticalMatchingData.getMeasurementSumType());
				modelAndView.addObject("MSThreshold", listStatisticalMatchingData.getMeasurementSumThreshold());
				modelAndView.addObject("RCthreshold", listStatisticalMatchingData.getRecordCountThreshold());
				modelAndView.addObject("MMean", listStatisticalMatchingData.getMeasurementMean());
				modelAndView.addObject("MMType", listStatisticalMatchingData.getMeasurementMeanType());
				modelAndView.addObject("MMThreshold", listStatisticalMatchingData.getMeasurementMeanThreshold());
				modelAndView.addObject("MSD", listStatisticalMatchingData.getMeasurementStdDev());
				modelAndView.addObject("MSDType", listStatisticalMatchingData.getMeasurementStdDevType());
				modelAndView.addObject("MSDThreshold", listStatisticalMatchingData.getMeasurementStdDevThreshold());
				modelAndView.addObject("GroupBy", listStatisticalMatchingData.getGroupBy());
			} else if (appType.equals("Data Matching Group")) {
				modelAndView.setViewName("DataMatchingGroupCreateView");
				List<ListDataSource> getlistdatasourcesname = templateviewdao.getlistdatasourcesname();
				modelAndView.addObject("getlistdatasourcesname", getlistdatasourcesname);
				modelAndView.addObject("idApp", idApp);
				modelAndView.addObject("DataMatchingGroupCustomize", "DataMatchingGroupCustomize");
				ListApplications listApplicationsData = validationcheckdao.getdatafromlistapplications(idApp);
				modelAndView.addObject("idRightData", listApplicationsData.getIdRightData());
				modelAndView.addObject("matchingThreshold", listApplicationsData.getMatchingThreshold());

			} else if (appType.equals("Model Governance")) {
				modelAndView.setViewName("modelGovernanceCustomizeView");
				listModelGovernance listModelGovernanceObject = validationcheckdao
						.getDataFromListModelGovernance(idApp);
				System.out.println("listModelGovernanceObject.getModelGovernanceType()="
						+ listModelGovernanceObject.getModelGovernanceType());
				if (listModelGovernanceObject.getModelGovernanceType().equalsIgnoreCase("Decile Equality")
						|| listModelGovernanceObject.getModelGovernanceType().equalsIgnoreCase("Decile Consistency")) {
					modelAndView.addObject("modelGovernanceType", listModelGovernanceObject.getModelGovernanceType());
					modelAndView.addObject("modelIdCol", listModelGovernanceObject.getModelIdCol());
					modelAndView.addObject("decileCol", listModelGovernanceObject.getDecileCol());
					modelAndView.addObject("expectedPercentage", listModelGovernanceObject.getExpectedPercentage());
					modelAndView.addObject("thresholdPercentage", listModelGovernanceObject.getThresholdPercentage());
					ListApplications listApplicationsData = validationcheckdao.getdatafromlistapplications(idApp);
					modelAndView.addObject("incrementalMatching", listApplicationsData.getIncrementalMatching());
					modelAndView.addObject("buildHistoricFingerPrint",
							listApplicationsData.getBuildHistoricFingerPrint());
					modelAndView.addObject("updateFrequency", listApplicationsData.getUpdateFrequency());
					modelAndView.addObject("frequencyDays", listApplicationsData.getFrequencyDays());
					modelAndView.addObject("historicDateFormat", listApplicationsData.getHistoricDateFormat());
					if (listApplicationsData.getHistoricStartDate() != null
							&& listApplicationsData.getHistoricEndDate() != null) {
						String[] StartDate = listApplicationsData.getHistoricStartDate().split(" ");
						String[] EndDate = listApplicationsData.getHistoricEndDate().split(" ");
						// System.out.println(split[0].length());
						modelAndView.addObject("historicStartDate", StartDate[0]);
						modelAndView.addObject("historicEndDate", EndDate[0]);
					} else {
						modelAndView.addObject("historicStartDate", listApplicationsData.getHistoricStartDate());
						modelAndView.addObject("historicEndDate", listApplicationsData.getHistoricEndDate());
					}
					String timeSeries = listApplicationsData.getTimeSeries();
					if (!timeSeries.equals("None")) {
						String[] split = timeSeries.split(",");
						for (int i1 = 0; i1 < split.length; i1++) {
							System.out.println(split[i1]);
							if (split[i1].equalsIgnoreCase("month")) {
								System.out.println("month condition");
								modelAndView.addObject("month", split[i1]);
							}
							if (split[i1].equalsIgnoreCase("dayOfWeek")) {
								modelAndView.addObject("dayOfWeek", split[i1]);
							}
							if (split[i1].equalsIgnoreCase("hourOfDay")) {
								modelAndView.addObject("hourOfDay", split[i1]);
								System.out.println("hourOfDay");
							}
							if (split[i1].equalsIgnoreCase("dayOfMonth")) {
								modelAndView.addObject("dayOfMonth", split[i1]);
							}
						}
					} else {
						modelAndView.addObject("None", timeSeries);
					}
					List listDataDefinitionColumnNames = validationcheckdao
							.getDisplayNamesFromListDataDefinition(idData);
					modelAndView.addObject("listDataDefinitionColumnNames", listDataDefinitionColumnNames);
				} else if (listModelGovernanceObject.getModelGovernanceType().equalsIgnoreCase("Score Consistency")) {
					modelAndView.addObject("modelGovernanceType", listModelGovernanceObject.getModelGovernanceType());
					modelAndView.addObject("leftSourceSliceStart", listModelGovernanceObject.getLeftSourceSliceStart());
					modelAndView.addObject("leftSourceSliceEnd", listModelGovernanceObject.getLeftSourceSliceEnd());
					modelAndView.addObject("rightSourceSliceStart",
							listModelGovernanceObject.getRightSourceSliceStart());
					modelAndView.addObject("rightSourceSliceEnd", listModelGovernanceObject.getRightSourceSliceEnd());
					modelAndView.addObject("matchingExpression", listModelGovernanceObject.getMatchingExpression());
					modelAndView.addObject("measurementExpression",
							listModelGovernanceObject.getMeasurementExpression());
					modelAndView.addObject("threshold", listModelGovernanceObject.getThresholdPercentage());
					modelAndView.addObject("modelIdCol", listModelGovernanceObject.getModelIdCol());
					modelAndView.addObject("decileCol", listModelGovernanceObject.getDecileCol());
					List listDataDefinitionColumnNames = validationcheckdao
							.getDisplayNamesFromListDataDefinition(idData);
					modelAndView.addObject("listDataDefinitionColumnNames", listDataDefinitionColumnNames);
					ListApplications listApplicationsData = validationcheckdao.getdatafromlistapplications(idApp);
					modelAndView.addObject("sourcedateformat", listApplicationsData.getHistoricDateFormat());
				}
			} else if (appType.equals("Model Governance Dashboard")) {
				ListApplications listApplicationsData = validationcheckdao.getdatafromlistapplications(idApp);
				modelAndView.setViewName("modelGovernanceDashboardCreateView");
				String mgDashboard = listApplicationsData.getCsvDir();
				String[] split = mgDashboard.split("-");
				/*
				 * for (int i = 0; i < split.length; i++) {
				 * System.out.println("id="+split[i]); }
				 */
				modelAndView.addObject("decileEquality", split[0]);
				modelAndView.addObject("decileConsistency", split[1]);
				modelAndView.addObject("scoreConsistency", split[2]);
				modelAndView.addObject("mgCustomizeView", "mgCustomizeView");
				Map<Long, String> decileEqualityAppType = validationcheckdao
						.getModelGovernanceAppTypeFromListApplications("Decile Equality");
				Map<Long, String> decileConsistencyAppType = validationcheckdao
						.getModelGovernanceAppTypeFromListApplications("Decile Consistency");
				Map<Long, String> scoreConsistencyAppType = validationcheckdao
						.getModelGovernanceAppTypeFromListApplications("Score Consistency");
				modelAndView.addObject("decileEqualityAppType", decileEqualityAppType);
				modelAndView.addObject("decileConsistencyAppType", decileConsistencyAppType);
				modelAndView.addObject("scoreConsistencyAppType", scoreConsistencyAppType);
			} else if (appType.equals("File Management")) {
				validationcheckdao.deleteFileManagementFromListFMRules(idApp);
				modelAndView.setViewName("fileManagementCreate");
				modelAndView.addObject("idApp", idApp);
				modelAndView.addObject("idData", idData);
				modelAndView.addObject("apptype", appType);
				modelAndView.addObject("applicationName", applicationName);
				// model.addObject("description", description);
				modelAndView.addObject("name", name);

			}	
			// ListApplications listapplications =
			// validationcheckdao.getdatafromlistapplications(idApp);
			// System.out.println(listapplications.getGarbageRows());
			// ModelAndView modelAndView=new
			// ModelAndView("dataApplicationCustomizeView");
			// ModelAndView modelAndView=new
			// ModelAndView("matchTypeCreateView");
			// modelAndView.addObject("getdatafromlistdftranrule",getdatafromlistdftranrule);
			System.out.println("After if condition");
			modelAndView.addObject("idApp", idApp);
			modelAndView.addObject("idData", idData);
			modelAndView.addObject("apptype", appType);
			modelAndView.addObject("name", name);
			modelAndView.addObject("description", name);
			modelAndView.addObject("listappName", name);
			modelAndView.addObject("applicationName", applicationName);
			System.out.println("idApp ::" + idApp);
			System.out.println("idData ::" + idData);
			System.out.println("apptype ::" + appType);
			System.out.println("name ::" + name);
			System.out.println("listappName ::" + name);
			System.out.println("applicationName :: " + applicationName);
			// modelAndView.addObject("listapplications",listapplications);
			modelAndView.addObject("idApp", idApp);
			modelAndView.addObject("currentSection", "Validation Check");
			modelAndView.addObject("currentLink", "VCView");
			return modelAndView;
		} else
			return new ModelAndView("loginPage");
	}

	@RequestMapping(value = "/deleteMatchingRule", method = RequestMethod.POST)
	public void deleteIdListColRulesData(HttpServletRequest request, HttpServletResponse response, HttpSession session,
			@RequestParam long idDm) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		System.out.println("idDm=" + idDm);
		validationcheckdao.deleteEntryFromListDMRulesWithIdDm(idDm);
		try {
			response.getWriter().println("success");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@RequestMapping(value = "/duplicateValidationCheckName", method = RequestMethod.POST)
	public void duplicateValidationCheckName(HttpServletRequest req, HttpServletResponse res, HttpSession session) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				res.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		String validationCheckName = req.getParameter("val");
		System.out.println("validationCheckName=" + validationCheckName);
		String name = validationcheckdao.duplicateValidationCheckName(validationCheckName);
		System.out.println("name=" + name);
		if (name != null) {
			try {
				res.getWriter().println("This Validation Check name is in use. Please choose another name.");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	@RequestMapping(value = "/fileManagementSave", method = RequestMethod.POST)
	public void fileManagementSave(HttpServletResponse response, HttpServletRequest request, HttpSession session,
			@RequestParam Long idApp, @RequestParam String dupCheck) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		System.out.println("idApp=" + idApp);
		System.out.println("dupCheck=" + dupCheck);
		int insertIntoListFmRules = validationcheckdao.insertIntoListFmRules(idApp, dupCheck);
		System.out.println("insertIntoListFmRules=" + insertIntoListFmRules);
		if (insertIntoListFmRules > 0) {
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("success", "File Management Rule created successfully");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("fail", "Sorry, There was a Problem");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	@RequestMapping(value = "/saveDataIntolistModelGovernance", method = RequestMethod.POST)
	public void saveDataIntolistModelGovernance(HttpServletResponse response, HttpSession session,
			@RequestParam Long idApp, @RequestParam String modelGovernanceType, @RequestParam String modelIdCol,
			@RequestParam String decileCol, @RequestParam double expectedPercentage,
			@RequestParam double thresholdPercentage, @RequestParam String buildHistoric,
			@RequestParam String incrementalType, @RequestParam String startDate, @RequestParam String endDate,
			@RequestParam String dateFormat, @RequestParam String timeSeries, @RequestParam String updateFrequency,
			@RequestParam int frequencyDays) {

		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		// System.out.println("leftSourceId="+leftSourceId);
		System.out.println("idApp=" + idApp);
		System.out.println("modelGovernanceType=" + modelGovernanceType);
		System.out.println("modelIdCol=" + modelIdCol);
		System.out.println("decileCol=" + decileCol);
		System.out.println("startDate=" + startDate);
		System.out.println("endDate=" + endDate);
		ListApplications la = new ListApplications();
		la.setIdApp(idApp);
		la.setBuildHistoricFingerPrint(buildHistoric);
		la.setIncrementalMatching(incrementalType);
		la.setHistoricStartDate(startDate);
		la.setHistoricEndDate(endDate);
		la.setHistoricDateFormat(dateFormat);
		la.setTimeSeries(timeSeries);
		la.setUpdateFrequency(updateFrequency);
		la.setFrequencyDays(frequencyDays);

		int update = validationcheckdao.insertintolistModelGovernance(idApp, modelGovernanceType, modelIdCol, decileCol,
				expectedPercentage, thresholdPercentage);
		validationcheckdao.updateIntoListApplicationForModelGovernance(la);
		if (update > 0) {
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("success", "Match Key created successfully");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("fail", "No Matching key found");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	@RequestMapping(value = "/updateDataIntolistModelGovernance", method = RequestMethod.POST)
	public void updateDataIntolistModelGovernance(HttpServletResponse response, HttpSession session,
			@RequestParam Long idApp, @RequestParam String modelGovernanceType, @RequestParam String modelIdCol,
			@RequestParam String decileCol, @RequestParam double expectedPercentage,
			@RequestParam double thresholdPercentage, @RequestParam String buildHistoric,
			@RequestParam String incrementalType, @RequestParam String startDate, @RequestParam String endDate,
			@RequestParam String dateFormat, @RequestParam String timeSeries, @RequestParam String updateFrequency,
			@RequestParam int frequencyDays) {

		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		// System.out.println("leftSourceId="+leftSourceId);
		System.out.println("idApp=" + idApp);
		System.out.println("modelGovernanceType=" + modelGovernanceType);
		System.out.println("modelIdCol=" + modelIdCol);
		System.out.println("decileCol=" + decileCol);
		System.out.println("expectedPercentage=" + expectedPercentage);
		System.out.println("thresholdPercentage=" + thresholdPercentage);
		ListApplications la = new ListApplications();
		la.setIdApp(idApp);
		la.setBuildHistoricFingerPrint(buildHistoric);
		la.setIncrementalMatching(incrementalType);
		la.setHistoricStartDate(startDate);
		la.setHistoricEndDate(endDate);
		la.setHistoricDateFormat(dateFormat);
		la.setTimeSeries(timeSeries);
		la.setUpdateFrequency(updateFrequency);
		la.setFrequencyDays(frequencyDays);

		int update = validationcheckdao.updateintolistModelGovernance(idApp, modelGovernanceType, modelIdCol, decileCol,
				expectedPercentage, thresholdPercentage);
		System.out.println(update);
		validationcheckdao.updateIntoListApplicationForModelGovernance(la);
		if (update > 0) {
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("success", "Match Key created successfully");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("fail", "No Matching key found");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	@RequestMapping(value = "/saveDataIntolistModelGovernanceForScoreConsistency", method = RequestMethod.POST)
	public void saveDataIntolistModelGovernanceForScoreConsistency(HttpServletResponse response, HttpSession session,
			@RequestParam Long idApp, @RequestParam String modelGovernanceType,
			@RequestParam String leftSourceSliceStart, @RequestParam String leftSourceSliceEnd,
			@RequestParam String rightSourceSliceStart, @RequestParam String rightSourceSliceEnd,
			@RequestParam String matchingExpression, @RequestParam String measurementExpression,
			@RequestParam double scThreshold, @RequestParam String sourceDateFormat, @RequestParam String modelIdCol,
			@RequestParam String decileCol) {

		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		// System.out.println("leftSourceId="+leftSourceId);
		System.out.println("idApp=" + idApp);
		System.out.println("modelGovernanceType=" + modelGovernanceType);
		System.out.println("leftSourceSliceStart=" + leftSourceSliceStart);
		System.out.println("leftSourceSliceEnd=" + leftSourceSliceEnd);
		System.out.println("rightSourceSliceStart=" + rightSourceSliceStart);
		System.out.println("rightSourceSliceEnd=" + rightSourceSliceEnd);
		ListApplications la = new ListApplications();
		la.setIdApp(idApp);

		int update = validationcheckdao.insertintolistModelGovernanceForScoreConsistency(idApp, modelGovernanceType,
				leftSourceSliceStart, leftSourceSliceEnd, rightSourceSliceStart, rightSourceSliceEnd,
				matchingExpression, measurementExpression, scThreshold, sourceDateFormat, modelIdCol, decileCol);

		if (update > 0) {
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("success", "Match Key created successfully");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("fail", "No Matching key found");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	@RequestMapping(value = "/updateDataIntolistModelGovernanceForScoreConsistency", method = RequestMethod.POST)
	public void updateDataIntolistModelGovernanceForScoreConsistency(HttpServletResponse response, HttpSession session,
			@RequestParam Long idApp, @RequestParam String modelGovernanceType,
			@RequestParam String leftSourceSliceStart, @RequestParam String leftSourceSliceEnd,
			@RequestParam String rightSourceSliceStart, @RequestParam String rightSourceSliceEnd,
			@RequestParam String matchingExpression, @RequestParam String measurementExpression,
			@RequestParam double scThreshold, @RequestParam String sourceDateFormat, @RequestParam String modelIdCol,
			@RequestParam String decileCol) {

		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		// System.out.println("leftSourceId="+leftSourceId);
		System.out.println("idApp=" + idApp);
		System.out.println("modelGovernanceType=" + modelGovernanceType);
		System.out.println("leftSourceSliceStart=" + leftSourceSliceStart);
		System.out.println("leftSourceSliceEnd=" + leftSourceSliceEnd);
		System.out.println("rightSourceSliceStart=" + rightSourceSliceStart);
		System.out.println("rightSourceSliceEnd=" + rightSourceSliceEnd);
		ListApplications la = new ListApplications();
		la.setIdApp(idApp);

		int update = validationcheckdao.updateintolistModelGovernanceForScoreConsistency(idApp, modelGovernanceType,
				leftSourceSliceStart, leftSourceSliceEnd, rightSourceSliceStart, rightSourceSliceEnd,
				matchingExpression, measurementExpression, scThreshold, sourceDateFormat, modelIdCol, decileCol);
		System.out.println("update=" + update);
		if (update > 0) {
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("success", "Match Key created successfully");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("fail", "No Matching key found");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	@RequestMapping(value = "/saveDataIntolistModelGovernanceForModelGovernanceDashboard", method = RequestMethod.POST)
	public void saveDataIntolistModelGovernanceForModelGovernanceDashboard(HttpServletResponse response,
			HttpSession session, @RequestParam Long idApp, @RequestParam String modelGovernanceDashboard) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		// System.out.println("leftSourceId="+leftSourceId);
		System.out.println("idApp=" + idApp);
		// System.out.println("modelGovernanceType=" + modelGovernanceType);
		System.out.println("modelGovernanceDashboard=" + modelGovernanceDashboard);

		int update = validationcheckdao.updateModelGovernanceDashboardIntoListApplications(modelGovernanceDashboard,
				idApp);
		System.out.println("update=" + update);
		if (update > 0) {
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("success", "Match Key created successfully");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			try {
				JSONObject json = new JSONObject();
				// put some value pairs into the JSON object .
				json.put("fail", "No Matching key found");
				response.getWriter().println(json);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	@RequestMapping(value = "/checkSchemaType", method = RequestMethod.POST)
	public void checkSchemaType(HttpServletRequest req, HttpServletResponse res, HttpSession session) {
		try {
			Object user = session.getAttribute("user");
			System.out.println("user:" + user);
			if ((user == null) || (!user.equals("validUser"))) {
				try {
					res.sendRedirect("loginPage.jsp");
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			String idDataSchema = req.getParameter("idDataSchema");
			System.out.println("idDataSchema=" + idDataSchema);
			String schemaType = validationcheckdao.getSchemaTypeFromListDataSchema(idDataSchema);
			System.out.println("schemaType:" + schemaType);
			if (schemaType.equalsIgnoreCase("Oracle RAC") || schemaType.equalsIgnoreCase("Oracle")
					|| schemaType.equalsIgnoreCase("Hive Kerberos") || schemaType.equalsIgnoreCase("Postgres")  || schemaType.equalsIgnoreCase("Teradata")) {
				// res.getWriter().println("");
			} else {
				res.getWriter().println("Please select only hive-kerberos or oracle type schema or PostgreSQL or Teradata");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}