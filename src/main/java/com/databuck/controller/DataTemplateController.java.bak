package com.databuck.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Method;
import java.net.URISyntaxException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;
import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.databuck.bean.DateAnalysisData;
import com.databuck.bean.GloabalRule;
import com.databuck.bean.HiveSource;
import com.databuck.bean.ListApplications;
import com.databuck.bean.ListDataDefinition;
import com.databuck.bean.ListDataSchema;
import com.databuck.bean.ListDataSource;
import com.databuck.bean.NumericalAnalysisData;
import com.databuck.bean.StringAnalysisData;
import com.databuck.bean.listDataAccess;
import com.databuck.dao.IDataTemplateAddNewDAO;
import com.databuck.dao.IListDataSourceDAO;
import com.databuck.dao.ITemplateViewDAO;
import com.databuck.dao.IValidationCheckDAO;
import com.databuck.dao.SchemaDAOI;
import com.databuck.datatemplate.AmazonRedshiftConnection;
import com.databuck.datatemplate.CassandraConnection;
import com.databuck.datatemplate.HiveConnection;
import com.databuck.datatemplate.HiveKerberosConnection;
import com.databuck.datatemplate.MSSQLConnection;
import com.databuck.datatemplate.MsSqlActiveDirectoryConnection;
import com.databuck.datatemplate.OracleConnection;
import com.databuck.datatemplate.OracleRACConnection;
import com.databuck.datatemplate.PostgresConnection;
import com.databuck.datatemplate.TeradataConnection;
import com.databuck.datatemplate.VerticaConnection;
import com.databuck.service.IDataAlgorithService;
import com.databuck.service.RBACController;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;

@Controller
public class DataTemplateController {

	@Autowired
	IValidationCheckDAO validationcheckdao;

	@Autowired
	private JdbcTemplate jdbcTemplate;
	@Autowired
	private JdbcTemplate jdbcTemplate1;

	@Autowired
	IDataAlgorithService dataAlgorithService;

	@Autowired
	private Properties appDbConnectionProperties;

	static ArrayList<String> al = null;

	static {
		al = new ArrayList<String>();
		al.add("nonNull");
		al.add("primaryKey");
		al.add("hashValue");
		al.add("numericalStat");
		al.add("stringStat");
		al.add("KBE");
		al.add("dgroup");
		al.add("dupkey");
		al.add("measurement");
		al.add("incrementalCol");
		al.add("recordAnomaly");
		al.add("dataDrift");
		al.add("isMasked");
		al.add("partitionBy");
		al.add("badData");
		al.add("lengthCheck");

		
		
		al.add("lengthValue");

	}

	@Autowired
	IDataTemplateAddNewDAO DataTemplateAddNewDAO;

	@Autowired
	MsSqlActiveDirectoryConnection msSqlActiveDirectoryConnectionObject;

	@Autowired
	VerticaConnection verticaconnection;

	@Autowired
	OracleConnection oracleconnection;

	@Autowired
	PostgresConnection postgresConnection;

	@Autowired
	TeradataConnection teradataConnection;

	@Autowired
	OracleRACConnection OracleRACConnection;

	@Autowired
	CassandraConnection cassandraconnection;

	@Autowired
	HiveConnection hiveconnection;

	@Autowired
	AmazonRedshiftConnection amazonRedshiftConnection;

	@Autowired
	MSSQLConnection mSSQLConnection;

	@Autowired
	private IListDataSourceDAO listdatasourcedao;

	@Autowired
	private RBACController rbacController;

	@Autowired
	public SchemaDAOI SchemaDAOI;

	@Autowired
	ITemplateViewDAO templateviewdao;

	@Autowired
	HiveKerberosConnection hiveKerberosConnection;

	
	@RequestMapping(value = "/copyTemplate", method = RequestMethod.GET)
	public void copyTemplate(HttpServletRequest request, HttpSession session, HttpServletResponse response,
			@RequestParam String newTemplateName, @RequestParam double idData) {

		System.out.println("newTemplateName is " + newTemplateName);
		System.out.println("idData is " + idData);

		String maxIdDataQuery = "select MAX(idData) as idData from listDataDefinition";
		SqlRowSet maxIdDataRowSet = jdbcTemplate.queryForRowSet(maxIdDataQuery);
		double maxIdData = 0.0;
		if (maxIdDataRowSet.next()) {
			maxIdData = Double.parseDouble(maxIdDataRowSet.getString("idData"));
		}
		System.out.println("maxIdData is " + maxIdData);

	     String insertIntoDummyQuery = "create table dummy as select * from listDataDefinition where "
	     		+ "idData = " + idData;
		jdbcTemplate.execute(insertIntoDummyQuery);
		String updateIdDataQuery = "update dummy set idData = " + (maxIdData + 1) + " where idData = " + idData;
		jdbcTemplate.execute(updateIdDataQuery);
		String updateListDataDefinationQuery = "insert into listDataDefinition (idData, columnName, "
				+ "displayName, format, hashValue, numericalStat, stringStat, nullCountThreshold, "
				+ "numericalThreshold, stringStatThreshold, KBE, dgroup, dupkey, measurement, blend, "
				+ "idCol, incrementalCol, idDataSchema, nonNull, primaryKey, recordAnomaly, "
				+ "recordAnomalyThreshold, dataDrift, dataDriftThreshold, outOfNormStat, "
				+ "outOfNormStatThreshold, isMasked, correlationcolumn, partitionBy, "
				+ "lengthcheck , lengthvalue, applyrule, startDate, timelinessKey, endDate, "
				+ "defaultCheck, defaultValues, patternCheck, patterns, dateRule, badData, "
				+ "dateFormat) (select idData, columnName, "
				+ "displayName, format, hashValue, numericalStat, stringStat, nullCountThreshold, "
				+ "numericalThreshold, stringStatThreshold, KBE, dgroup, dupkey, measurement, blend, "
				+ "idCol, incrementalCol, idDataSchema, nonNull, primaryKey, recordAnomaly, "
				+ "recordAnomalyThreshold, dataDrift, dataDriftThreshold, outOfNormStat, "
				+ "outOfNormStatThreshold, isMasked, correlationcolumn, partitionBy, "
				+ "lengthcheck, lengthvalue, applyrule, startDate, timelinessKey, endDate, "
	     		+ "defaultCheck, defaultValues, patternCheck, patterns, dateRule, badData, "
	     		+ "dateFormat from dummy)";
		jdbcTemplate.execute(updateListDataDefinationQuery);
		String dropDummyTableQuery = ("drop table dummy");
		jdbcTemplate.execute(dropDummyTableQuery);
		System.out.println("Inserted into listDataDefination");
	     String dummyListDataSourceQuery = "create table dummy as select * from listDataSources where "
		     		+ "idData = " + idData;
		jdbcTemplate.execute(dummyListDataSourceQuery);
	     String updateDummy = "update dummy set idData = " + (maxIdData + 1) + ", "
	     		+ "name = '" + newTemplateName + "'"
				+ " where idData = " + idData;
		jdbcTemplate.execute(updateDummy);
		String updateListDataSource = "insert into listDataSources select * from dummy";
		jdbcTemplate.execute(updateListDataSource);
		String dropDummyTableQuery1 = ("drop table dummy");
		jdbcTemplate.execute(dropDummyTableQuery1);
		System.out.println("Inserted into listDataSource");

	     String dummyListDataAccess = "create table dummy as select * from listDataAccess where "
		     		+ "idData = " + idData;
		jdbcTemplate.execute(dummyListDataAccess);
	     String updateDummyListDataAccess = "update dummy set idData = " + (maxIdData + 1) + " "
	     		+ " where idData = " + idData;
		jdbcTemplate.execute(updateDummyListDataAccess);
		String updateListDataAccess = "insert into listDataAccess (idData, hostName, "
				+ "portName, userName, pwd, schemaName, folderName, query, incrementalType, idDataSchema, "
				+ "whereCondition, domain, fileHeader, dateFormat, sliceStart, sliceEnd, queryString, "
				+ "metaData, isRawData, hivejdbchost, hivejdbcport, sslEnb, sslTrustStorePath, "
				+ "trustPassword) (select idData, hostName, portName, userName, pwd, "
				+ "schemaName, folderName, query, incrementalType, idDataSchema, whereCondition, domain, "
				+ "fileHeader, dateFormat, sliceStart, sliceEnd, queryString, metaData, isRawData, "
				+ "hivejdbchost, hivejdbcport, sslEnb, sslTrustStorePath, trustPassword from dummy)";
		jdbcTemplate.execute(updateListDataAccess);
		String dropDummyTableQuery2 = ("drop table dummy");
		jdbcTemplate.execute(dropDummyTableQuery2);
		System.out.println("Inserted into listDataAccess");

	   
	    
		JSONObject json = new JSONObject();
		json.put("success", "Validation Check Created Successfully");
	}

	
	@RequestMapping(value = "/datatemplateview", method = RequestMethod.GET)
	public ModelAndView getListDataSource(HttpServletRequest request, ModelAndView model, HttpSession session) throws IOException {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		String idData = request.getParameter("idData");
		String templateName = request.getParameter("templateName");
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}
		boolean rbac = rbacController.rbac("Data Template", "R", session);
		if (rbac) {
			List<ListDataSource> listdatasource = listdatasourcedao.getListDataSourceTable();
			// listdatasourcedao.getTableNameFromListDataAccess(listdatasource.get(0).getIdData());
			model.addObject("listdatasource", listdatasource);
			model.setViewName("dataTemplateView");
			model.addObject("currentSection", "Data Template");
			model.addObject("currentLink", "DTView");
			return model;
		} else
			return new ModelAndView("loginPage");
	}

	@RequestMapping(value = "/listdataview", method = RequestMethod.GET)
	public ModelAndView editTask(HttpServletRequest request, HttpSession session) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}
		boolean rbac = rbacController.rbac("Data Template", "R", session);
		if (rbac) {
			System.out.println("idData=" + request.getParameter("idData"));
			Long idData = Long.parseLong(request.getParameter("idData"));
			System.out.println("view listDataView  id " + idData);
			String dataLocation = request.getParameter("dataLocation");
			System.out.println("dataLocation=" + dataLocation);
			if (dataLocation.equals("File Management")) {
				String name = request.getParameter("name");
				System.out.println("name=" + name);
				String description = request.getParameter("description");
				System.out.println("description=" + description);
				List<listDataAccess> dataFromListDataAccess = templateviewdao.getDataFromListDataAccess(idData);
				String referenceFiles = templateviewdao.getReferenceFilesFromListDataFiles(idData);
				ModelAndView model = new ModelAndView("fileManagementDataTemplateView");
				model.addObject("name", name);
				model.addObject("description", description);
				model.addObject("listDataAccessData", dataFromListDataAccess);
				model.addObject("referenceFiles", referenceFiles);
				model.addObject("currentSection", "Data Template");
				model.addObject("currentLink", "DTView");
				model.addObject("name", request.getParameter("name"));
				return model;
			} else {
				List<ListDataDefinition> listdatadefinition = templateviewdao.view(idData);
				System.out.println(listdatadefinition.size());
				ModelAndView model = new ModelAndView("listDataView");

				try {
					model.addObject("idDataSchema", listdatadefinition.get(0).getIdDataSchema());
				} catch (Exception e) {
					// e.printStackTrace();
					model.setViewName("message");
					model.addObject("currentSection", "Data Template");
					model.addObject("currentLink", "DTView");
					model.addObject("msg", "Data Template not Created Successfully");
					return model;

				}
				model.addObject("idData", idData);
				model.addObject("currentSection", "Data Template");
				model.addObject("currentLink", "DTView");
				model.addObject("listDataDefinitionData", listdatadefinition);
				// model.addObject("sumeet",listdatadefinition.get(0).getPattern());

				model.addObject("name", request.getParameter("name"));
				return model;
			}
		} else
			return new ModelAndView("loginPage");
	}

	@RequestMapping(value = "/ajax", method = RequestMethod.POST)
	public void ajax(@RequestBody ListDataDefinition listDataDefinition, HttpServletResponse response,
			HttpSession session) {

		Object user = session.getAttribute("user");
		System.out.println("data:" + listDataDefinition);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		// System.out.println("nullcount="+listDataDefinition.getNullCount());

		System.out.println("dataDrift=" + listDataDefinition.getDataDrift());
		System.out.println("dataDriftThreshold=" + listDataDefinition.getDataDriftThreshold());
		System.out.println("StringStatThreshold=" + listDataDefinition.getStringStatThreshold());
		System.out.println(listDataDefinition.getItemid());
		System.out.println(listDataDefinition.getDupkey());
		System.out.println(listDataDefinition.getMeasurement());
		System.out.println(listDataDefinition.getIncrementalCol());
		System.out.println(listDataDefinition.getRecordAnomalyThreshold());
		// System.out.println(listDataDefinition.getNonNull());
		// System.out.println(listDataDefinition.getPrimaryKey());
		int i = SchemaDAOI.updateldd(listDataDefinition);
		System.out.println("update======================= " + i);

		PrintWriter out;
		try {
			out = response.getWriter();
			if (i == 1) {
				out.println("success");
			}
		} catch (IOException e) {

			e.printStackTrace();
		}
	}

	@RequestMapping(value = "/deletedatasource", method = RequestMethod.GET)
	public ModelAndView deletedatasource(HttpServletRequest request, HttpSession session) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}
		boolean rbac = rbacController.rbac("Data Template", "D", session);
		if (rbac) {

			int idData = Integer.parseInt(request.getParameter("idData"));
			System.out.println("delete datasource id " + idData);

			ListDataSource listdatasource = listdatasourcedao.delete(idData);

			ModelAndView modelAndView = new ModelAndView("deleteTemplate");
			modelAndView.addObject("currentSection", "Data Template");
			modelAndView.addObject("currentLink", "DTView");
			modelAndView.addObject("listdatasource", listdatasource);

			return modelAndView;
		} else
			return new ModelAndView("loginPage");
	}

	@RequestMapping(value = "/delete_Template", method = RequestMethod.GET)
	public ModelAndView DeleteDataDource(HttpServletRequest request, HttpSession session) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}
		boolean rbac = rbacController.rbac("Data Template", "D", session);
		if (rbac) {
			try {
				int idData = Integer.parseInt(request.getParameter("idData"));
				System.out.println("/delete_Template idData" + idData);
				int deleteDataSource = listdatasourcedao.deleteDataSource(idData);
				System.out.println("deleteDataSource=" + deleteDataSource);
				ModelAndView modelAndView = new ModelAndView("deleteDataSourceSuccess");
				modelAndView.addObject("currentSection", "Data Template");
				modelAndView.addObject("currentLink", "DTView");
				return modelAndView;
			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
		} else
			return new ModelAndView("loginPage");
	}

	@RequestMapping(value = "/changeLocationForDataTemplateAjax", method = RequestMethod.POST)
	public void changeLocationForDataTemplateAjax(HttpServletResponse response, HttpServletRequest request,
			HttpSession session, @RequestParam String location) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		// System.out.println("idData=" + idData);
		System.out.println("helllo.........");
		Map<Long, String> dataTemplateForRequiredLocation = listdatasourcedao
				.getDataTemplateForRequiredLocation(location);
		System.out.println("dataTemplateForRequiredLocation=" + dataTemplateForRequiredLocation);
		ObjectMapper mapper = new ObjectMapper();

		try {
			String jsonInString = mapper.writeValueAsString(dataTemplateForRequiredLocation);
			System.out.println("jsonInString=" + jsonInString);

			JSONObject displayName = new JSONObject();
			displayName.put("success", jsonInString);
			System.out.println("displayName=" + displayName);

			response.getWriter().println(displayName);
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

	}

	@RequestMapping(value = "/dataTemplateAddNew", method = RequestMethod.GET)
	public ModelAndView getCreateTemplateView(HttpSession session) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}
		boolean rbac = rbacController.rbac("Data Template", "C", session);
		if (rbac) {
			List<ListDataSchema> listdataschema = listdatasourcedao.getListDataSchema();
			System.out.println("listdataschema=" + listdataschema);
			ModelAndView modelAndView = new ModelAndView("createDataTemplate");
			modelAndView.addObject("listdataschema", listdataschema);
			modelAndView.addObject("currentSection", "Data Template");
			modelAndView.addObject("currentLink", "DTAdd New");
			return modelAndView;
		} else
			return new ModelAndView("loginPage");
	}

	@RequestMapping(value = "/editDataTemplate", method = RequestMethod.GET)
	public ModelAndView editDataTemplate(HttpServletRequest request, HttpSession session, @RequestParam Long idData) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}

		boolean rbac = rbacController.rbac("Data Template", "C", session);
		if (rbac) {
			ModelAndView modelAndView = new ModelAndView("editDataTemplate");
			ListDataSource listDataSource = listdatasourcedao.getDataFromListDataSourcesOfIdData(idData);
			listDataAccess listDataAccess = listdatasourcedao.getListDataAccess(idData);
			if (!(listDataSource.getDataLocation().equalsIgnoreCase("FILESYSTEM")
					|| listDataSource.getDataLocation().equalsIgnoreCase("HDFS")
					|| listDataSource.getDataLocation().equalsIgnoreCase("File Management")
					|| listDataSource.getDataLocation().equalsIgnoreCase("MapR FS")
					|| listDataSource.getDataLocation().equalsIgnoreCase("MapR DB")
					|| listDataSource.getDataLocation().equalsIgnoreCase("S3"))) {
				ListDataSchema listDataSchema = listdatasourcedao
						.getListDataSchemaForIdDataSchema(listDataAccess.getIdDataSchema()).get(0);
				modelAndView.addObject("listDataSchema", listDataSchema);
			}
			modelAndView.addObject("listDataSource", listDataSource);
			modelAndView.addObject("listDataAccess", listDataAccess);

			modelAndView.addObject("currentSection", "Data Template");
			modelAndView.addObject("currentLink", "DTAdd New");

			return modelAndView;
		} else
			return new ModelAndView("loginPage");
	}

	@RequestMapping(value = "/createTemplates", method = RequestMethod.POST)
	public void createTemplates(HttpServletRequest req, HttpServletResponse response, HttpSession session,
			@RequestParam String schemaName) {

		ListDataSchema schemaDetails = SchemaDAOI.getSchemaDetails(schemaName);

		Long schemaid = schemaDetails.getIdDataSchema();
		String dataLocation = schemaDetails.getSchemaType();

		String schemaId = String.valueOf(schemaid);
		List<String> tableListFrom = getTableListForSchema(schemaId, dataLocation);

		System.out.println(tableListFrom);
		System.out.println(schemaId);
		System.out.println(dataLocation);

		long id = Long.parseLong(schemaId);
		Map finalMap = new HashMap();
		Iterator<String> iterator = tableListFrom.iterator();
		while (iterator.hasNext()) {
			String tableName = iterator.next();
			finalMap = analyseDataForTable(id, dataLocation, tableName, null, null, session);
		}

		String lstTable = String.join(",", tableListFrom);
		System.out.println(lstTable);

		Map<String, String> returnMsgsMap = createDataTemplate(session, schemaid, dataLocation, "tableName", schemaName,
				"", null, "1", "1", "", "", lstTable, "", "", "dateFormat", "", "", 2, "", "", "", "", "", "", null, "", "",
				new ArrayList());

		try {
			JSONObject json = new JSONObject();
			json.put("success", "Data Connection Created Successfully");
			response.getWriter().println(json);
			System.out.println("Data Connection Created Successfully");
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "/createForm", method = RequestMethod.POST)
	public @ResponseBody ModelAndView uploadFileHandler(@RequestParam("dataupload") MultipartFile file,
			HttpSession session, HttpServletRequest request, HttpServletResponse res)
			throws IOException, URISyntaxException {
		Object user = session.getAttribute("user");
		long idUser = (Long) session.getAttribute("idUser");
		System.out.println("idUser=" + idUser);
		System.out.println("user:" + user);
		// Map finalMap = new HashMap();
		if ((user == null) || (!user.equals("validUser"))) {
			return new ModelAndView("loginPage");
		}

		// changes regarding kafka
		String datalocation = request.getParameter("location");
		String HostURI = null;
		String folder = null;

		if (datalocation.equals("File System") || datalocation.equals("HDFS") || datalocation.equals("S3")
				|| datalocation.equals("MapR FS") || datalocation.equals("MapR DB")) {

			
			HostURI = request.getParameter("hostName");

			folder = request.getParameter("schemaName");

		} else if (datalocation.equals("Kafka")) {

			
			
			HostURI = request.getParameter("src_brokerUri");

			folder = request.getParameter("src_topicName");

		}

		

		String dataFormat = request.getParameter("source");

		String userlogin = request.getParameter("userName");

		String password = request.getParameter("pwd");

		String schemaName = request.getParameter("schemaName");

		// changes for kafka
		// src_brokerUri,src_topicName,tar_brokerUri,tar_topicName

		// String src_brokerUri = request.getParameter("src_brokerUri");
		// String src_topicName = request.getParameter("src_topicName");
		String tar_brokerUri = request.getParameter("tar_brokerUri");

		String tar_topicName = request.getParameter("tar_topicName");

		// System.out.println("src_brokerUri ->"+HostURI);
		// System.out.println("src_topicName ->"+folder);
		System.out.println("tar_brokerUri ->" + tar_brokerUri);
		System.out.println("tar_topicName ->" + tar_topicName);

		
		boolean rbac = rbacController.rbac("Data Template", "C", session);
		if (rbac) {
			ModelAndView modelAndView = new ModelAndView("Data Template Created Successfully");
			System.out.println("hello create form");
			String DataTemplateName = request.getParameter("dataset");
			System.out.println("DataTemplateName=" + DataTemplateName);
			String description = request.getParameter("description");
			System.out.println("description=" + description);

			String schema = request.getParameter("schemaId1");
			Long idDataSchema = Long.valueOf(0L);
			if ((schema != null) && (!schema.equals("")))
				idDataSchema = Long.valueOf(Long.parseLong(schema));
			System.out.println("idDataSchema=" + idDataSchema);

			String headerId = request.getParameter("headerId");
			System.out.println("headerId=" + headerId);
			if (headerId == null)
				headerId = "N";
			String rowsId = request.getParameter("rowsId");
			System.out.println("rowsId=" + rowsId);

			String tableName = request.getParameter("tableNameid");
			System.out.println("tableName=" + tableName);

			System.out.println("datalocation=" + datalocation);

			String whereCondition = request.getParameter("whereId");
			System.out.println("whereCondition=" + whereCondition);

			String queryCheckbox = request.getParameter("querycheckboxid");
			System.out.println("queryCheckbox=" + queryCheckbox);
			if (queryCheckbox == null)
				queryCheckbox = "N";

			String lstTable = request.getParameter("selectedTables");
			System.out.println("Selected Tables=" + lstTable);
			String queryTextbox = request.getParameter("querytextboxid");
			System.out.println("queryTextbox=" + queryTextbox);

			String incrementalType = request.getParameter("incrementalsourceid");
			System.out.println("incrementalType=" + incrementalType);
			String dateFormat = request.getParameter("dateformatid");
			System.out.println("dateFormat=" + dateFormat);
			String sliceStart = request.getParameter("slicestartid");
			System.out.println("sliceStart=" + sliceStart);
			String sliceEnd = request.getParameter("sliceendid");
			System.out.println("sliceEnd=" + sliceEnd);

			List<GloabalRule> selected_list = new ArrayList<GloabalRule>();

			List<String> selected_rule_ids = (List<String>) session.getAttribute("selected_rule_ids");
			System.out.println(selected_rule_ids);
            System.out.println("selected rules size  "+selected_rule_ids.size());
            //if list is empty but having chance of empty string("") then need to clear list 20-06-19 by pravin
            if(selected_rule_ids.size() == 1 && "".equals(selected_rule_ids.get(0))){
            	System.out.println("selected_rule_ids :: "+selected_rule_ids.size());
            	selected_rule_ids.clear();
            	System.out.println("selected_rule_ids.size() :: "+selected_rule_ids.size());
            }
			if (selected_rule_ids != null || selected_rule_ids.size()!=0) {

				for (int i = 0; i < selected_rule_ids.size(); i++) {
					List<GloabalRule> selected_rules_details = (List<GloabalRule>) session
							.getAttribute("rulesForSelection");
					System.out.println("selected_rules_details +++++++++" + selected_rules_details);
					// List<ListColRules2>
					// selected_rules_details=getMainRuleExpression(Integer.parseInt(selected_rule_ids.get(i)));
					for (int z1 = 0; z1 < selected_rules_details.size(); z1++) {
						System.out.println(selected_rule_ids.get(i));
						System.out.println(selected_rules_details.get(z1).getGloabal_rule_id());
						if (Integer.parseInt(
								selected_rule_ids.get(i)) == (selected_rules_details.get(z1).getGloabal_rule_id())) {
							System.out.println("ruleid  is ::" + selected_rule_ids.get(i) + "rule name::"
									+ selected_rules_details.get(z1).getRule_name() + " rule expression:: "
									+ selected_rules_details.get(z1).getRule_expression());
							// System.out.println("modified rule expression "+
							// eligible_rules_formula.get(z1).getExpression().replaceAll(regex,
							// replacement));
							GloabalRule g = new GloabalRule();
							g.setGloabal_rule_id(Integer.parseInt(selected_rule_ids.get(i)));
							g.setRule_name(selected_rules_details.get(z1).getRule_name());
							g.setRule_expression(selected_rules_details.get(z1).getRule_expression());
							selected_list.add(g);
						} else {
							System.out.println("No rules");
						}

					}
				}
			}
         
			System.out.println("selected rules and details " + selected_list);
			//cleaning session 06-06-19
			session.removeAttribute("selected_rule_ids");
			Map<String, String> returnMsgsMap = createDataTemplate(session, idDataSchema.longValue(), datalocation,
					tableName, DataTemplateName, description, schema, headerId, rowsId, whereCondition, queryCheckbox,
					lstTable, queryTextbox, incrementalType, dateFormat, sliceStart, sliceEnd, idUser, HostURI, folder,
					dataFormat, userlogin, password, schemaName, file, tar_brokerUri, tar_topicName, selected_list);

			System.out.println("returnMsgsMap =>" + returnMsgsMap);

			modelAndView.addObject("currentSection", "Data Template");
			modelAndView.addObject("currentLink", "DTAdd New");
			if (returnMsgsMap.get("errorMessage") != null) {
				modelAndView.addObject("message", returnMsgsMap.get("errorMessage"));
				return modelAndView;
			}
			if (returnMsgsMap.get("message") != null) {
				modelAndView.addObject("message", returnMsgsMap.get("message"));
				return modelAndView;
			}
			modelAndView.addObject("message", "Problem creating data template");
			return modelAndView;
		}

		return new ModelAndView("loginPage");
	}

	public Map<String, String> createDataTemplate(HttpSession session, long idDataSchema, String datalocation,
			String tableName, String dataTemplateName, String description, String schema, String headerId,
			String rowsId, String whereCondition, String queryCheckbox, String lstTable, String queryTextbox,
			String incrementalType, String dateFormat, String sliceStart, String sliceEnd, long idUser, String HostURI,
			String folder, String dataFormat, String userlogin, String password, String schemaName, MultipartFile file,
			String tar_brokerUri, String tar_topicName, List<GloabalRule> selected_list) {

		System.out.println(" the dataformat received : " + dataFormat);
		Map<String, String> returnMsgsMap = new HashMap();

		Map<String, List<ListDataDefinition>> mapDataDefinition = (Map) session.getAttribute("dataDefinition");
		List<ListDataDefinition> lstDataDefinition = null;

		if (datalocation.equals("MSSQLActiveDirectory")) {
			List<ListDataSchema> listDataSchema = DataTemplateAddNewDAO.getListDataSchema(idDataSchema);
			HostURI = listDataSchema.get(0).getIpAddress();
			folder = listDataSchema.get(0).getDatabaseSchema();
			userlogin = listDataSchema.get(0).getUsername();
			password = listDataSchema.get(0).getPassword();
			String portName = listDataSchema.get(0).getPort();
			String domain = listDataSchema.get(0).getDomain();

			ListDataSource listDataSource = new ListDataSource();
			listDataSource.setName(dataTemplateName);
			listDataSource.setDescription(description);
			listDataSource.setDataLocation(datalocation);
			listDataSource.setDataSource("MSSQLActiveDirectory");
			listDataSource.setCreatedAt(new Date());
			listDataSource.setCreatedBy(idUser);
			listDataSource.setIdDataSchema(Long.valueOf(idDataSchema));

			
			

			listDataAccess listdataAccess = new listDataAccess();
			listdataAccess.setHostName(HostURI);
			listdataAccess.setPortName(portName);
			listdataAccess.setUserName(userlogin);
			listdataAccess.setPwd(password);
			listdataAccess.setSchemaName(folder);

			listdataAccess.setQueryString(queryTextbox);
			listdataAccess.setFolderName(tableName);
			listdataAccess.setIdDataSchema(idDataSchema);
			listdataAccess.setWhereCondition(whereCondition);
			listdataAccess.setDomain(domain);
			listdataAccess.setQuery(queryCheckbox);

			listdataAccess.setIncrementalType(incrementalType);
			listdataAccess.setDateFormat(dateFormat);
			listdataAccess.setSliceStart(sliceStart);
			listdataAccess.setSliceEnd(sliceEnd);

			listdataAccess.setFileHeader(headerId);
			System.out.println("domain=" + domain);
			Long rows = Long.valueOf(0L);
			if ((rowsId != null) && (!rowsId.equals("")))
				rows = Long.valueOf(Long.parseLong(rowsId));
			System.out.println("rows=" + rows);
			listDataSource.setGarbageRows(rows);

			lstTable = lstTable.replace("[", "");
			lstTable = lstTable.replace("]", "");
			StringTokenizer tokenizer = new StringTokenizer(lstTable, ",");
			boolean isTemplatesCreationSuccessful = true;
			boolean isValidationsCreationSuccessful = true;
			while (tokenizer.hasMoreTokens()) {
				tableName = tokenizer.nextToken();

				tableName = tableName.replace("\"", "");
				listdataAccess.setFolderName(tableName);
				listDataSource.setName(dataTemplateName + "_" + tableName);

				Object[] arr = msSqlActiveDirectoryConnectionObject.readTablesFromMSSQL(HostURI, folder, userlogin,
						password, tableName, portName, domain);
				LinkedHashMap readTablesFromMSSQLActiveDirectory = (LinkedHashMap) arr[0];
				List<String> primarykeyCols = (ArrayList<String>) arr[1];
				if (readTablesFromMSSQLActiveDirectory.isEmpty()) {
					returnMsgsMap.put("errorMessage",
							"Unable to create Data Template, Please check your configuration and try again.");
				}

				try {
					lstDataDefinition = (List) mapDataDefinition.get(tableName);
				} catch (Exception e) {
					// TODO: handle exception
				}
				Long idData = 0L;
				try {
					idData = DataTemplateAddNewDAO.addintolistdatasource(listDataSource,
							readTablesFromMSSQLActiveDirectory, listdataAccess, primarykeyCols, lstDataDefinition,
							selected_list);
				} catch (Exception e) {
					isTemplatesCreationSuccessful = false;
				}
				String validationCheckName = dataTemplateName + "_" + tableName + "_Validation";
				Long idApp = 0L;
				try {
					idApp = createValidationCheck(validationCheckName, idData, idUser, lstDataDefinition);
				} catch (Exception e) {
					isValidationsCreationSuccessful = false;
				}
			}
			if (isTemplatesCreationSuccessful && isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", "Data Templates and validation Checks created Successfully.");
			} else if (isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message",
						"Data Templates created successfully but problem while creating few validation Checks.");
			} else if (!isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", " Problem while creating Data Templates and validation Checks.");
			}
			return returnMsgsMap;
		} else if (datalocation.equals("Vertica")) {

			List<ListDataSchema> listDataSchema = DataTemplateAddNewDAO.getListDataSchema(idDataSchema);

			HostURI = ((ListDataSchema) listDataSchema.get(0)).getIpAddress();
			folder = ((ListDataSchema) listDataSchema.get(0)).getDatabaseSchema();
			userlogin = ((ListDataSchema) listDataSchema.get(0)).getUsername();
			password = ((ListDataSchema) listDataSchema.get(0)).getPassword();
			String portName = ((ListDataSchema) listDataSchema.get(0)).getPort();

			ListDataSource listDataSource = new ListDataSource();
			listDataSource.setName(dataTemplateName + "_" + tableName);
			listDataSource.setDescription(description);
			listDataSource.setDataLocation(datalocation);
			listDataSource.setDataSource("SQL");
			listDataSource.setCreatedAt(new Date());
			listDataSource.setCreatedBy(idUser);
			listDataSource.setIdDataSchema(Long.valueOf(idDataSchema));

			listDataAccess listdataAccess = new listDataAccess();
			listdataAccess.setHostName(HostURI);
			listdataAccess.setPortName(portName);
			listdataAccess.setUserName(userlogin);
			listdataAccess.setPwd(password);
			listdataAccess.setSchemaName(folder);

			listdataAccess.setQueryString(queryTextbox);
			listdataAccess.setIdDataSchema(idDataSchema);
			listdataAccess.setWhereCondition(whereCondition);
			listdataAccess.setQuery(queryCheckbox);
			listdataAccess.setIncrementalType(incrementalType);
			listdataAccess.setDateFormat(dateFormat);
			listdataAccess.setSliceStart(sliceStart);
			listdataAccess.setSliceEnd(sliceEnd);
			listdataAccess.setFileHeader(headerId);
			Long rows = Long.valueOf(0L);

			if ((rowsId != null) && (!rowsId.equals("")))
				rows = Long.valueOf(Long.parseLong(rowsId));
			System.out.println("rows=" + rows);
			listDataSource.setGarbageRows(rows);

			lstTable = lstTable.replace("[", "");
			lstTable = lstTable.replace("]", "");
			StringTokenizer tokenizer = new StringTokenizer(lstTable, ",");
			boolean isTemplatesCreationSuccessful = true;
			boolean isValidationsCreationSuccessful = true;
			while (tokenizer.hasMoreTokens()) {
				tableName = tokenizer.nextToken();

				tableName = tableName.replace("\"", "");
				listdataAccess.setFolderName(tableName);
				listDataSource.setName(dataTemplateName + "_" + tableName);

				Object[] obj = verticaconnection.verticaconnection(HostURI, folder, userlogin, password, tableName,
						portName);
				LinkedHashMap readTablesFromVertica = (LinkedHashMap) obj[0];
				List<String> primarykeyCols = (List<String>) obj[1];
				if (readTablesFromVertica.isEmpty()) {
					returnMsgsMap.put("errorMessage",
							"Unable to create Data Template, Please check your configuration and try again.");
				}
				try {
					lstDataDefinition = (List) mapDataDefinition.get(tableName);
				} catch (Exception e) {
					// TODO: handle exception
				}
				Long idData = 0L;
				try {
					idData = DataTemplateAddNewDAO.addintolistdatasource(listDataSource, readTablesFromVertica,
							listdataAccess, primarykeyCols, lstDataDefinition, selected_list);
				} catch (Exception e) {
					isTemplatesCreationSuccessful = false;
				}
				String validationCheckName = dataTemplateName + "_" + tableName + "_Validation";
				Long idApp = 0L;
				try {
					idApp = createValidationCheck(validationCheckName, idData, idUser, lstDataDefinition);
				} catch (Exception e) {
					isValidationsCreationSuccessful = false;
				}

			}
			if (isTemplatesCreationSuccessful && isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", "Data Templates and validation Checks created Successfully.");
			} else if (isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message",
						"Data Templates created successfully but problem while creating few validation Checks.");
			} else if (!isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", " Problem while creating Data Templates and validation Checks.");
			}
			return returnMsgsMap;

		} else if (datalocation.equals("MSSQL")) {

			List<ListDataSchema> listDataSchema = DataTemplateAddNewDAO.getListDataSchema(idDataSchema);

			HostURI = ((ListDataSchema) listDataSchema.get(0)).getIpAddress();
			folder = ((ListDataSchema) listDataSchema.get(0)).getDatabaseSchema();
			userlogin = ((ListDataSchema) listDataSchema.get(0)).getUsername();
			password = ((ListDataSchema) listDataSchema.get(0)).getPassword();
			String portName = ((ListDataSchema) listDataSchema.get(0)).getPort();

			ListDataSource listDataSource = new ListDataSource();
			// listDataSource.setName(dataTemplateName);
			listDataSource.setDescription(description);
			listDataSource.setDataLocation(datalocation);
			listDataSource.setDataSource("SQL");
			listDataSource.setCreatedAt(new Date());
			listDataSource.setCreatedBy(idUser);
			listDataSource.setIdDataSchema(Long.valueOf(idDataSchema));

			Long rows = Long.valueOf(0L);
			if ((rowsId != null) && (!rowsId.equals("")))
				rows = Long.valueOf(Long.parseLong(rowsId));
			System.out.println("rows=" + rows);
			listDataSource.setGarbageRows(rows);

			listDataAccess listdataAccess = new listDataAccess();
			listdataAccess.setHostName(HostURI);
			listdataAccess.setPortName(portName);
			listdataAccess.setUserName(userlogin);
			listdataAccess.setPwd(password);
			listdataAccess.setSchemaName(folder);

			listdataAccess.setQueryString(queryTextbox);
			listdataAccess.setFolderName(tableName);
			listdataAccess.setIdDataSchema(idDataSchema);
			listdataAccess.setWhereCondition(whereCondition);
			listdataAccess.setQuery(queryCheckbox);
			listdataAccess.setIncrementalType(incrementalType);
			listdataAccess.setDateFormat(dateFormat);
			listdataAccess.setSliceStart(sliceStart);
			listdataAccess.setSliceEnd(sliceEnd);
			listdataAccess.setFileHeader(headerId);
			System.out.println(" in MS SQL ");

			lstTable = lstTable.replace("[", "");
			lstTable = lstTable.replace("]", "");
			System.out.println("lstTable=" + lstTable);
			StringTokenizer tokenizer = new StringTokenizer(lstTable, ",");
			boolean isTemplatesCreationSuccessful = true;
			boolean isValidationsCreationSuccessful = true;
			while (tokenizer.hasMoreTokens()) {
				tableName = tokenizer.nextToken();

				tableName = tableName.replace("\"", "");
				listdataAccess.setFolderName(tableName);
				listDataSource.setName(dataTemplateName + "_" + tableName);

				if (queryCheckbox.equalsIgnoreCase("column_name")) {
					listdataAccess.setFolderName(queryTextbox);
				} else {
					listdataAccess.setFolderName(tableName);
				}

				Object[] arr = mSSQLConnection.readTablesFromMSSQL(HostURI, folder, userlogin, password, tableName,
						portName);
				Map readTablesFromMYSQL = (Map) arr[0];
				List<String> primarykeyCols = (List<String>) arr[1];
				if (readTablesFromMYSQL.isEmpty()) {
					returnMsgsMap.put("errorMessage",
							"Unable to create Data Template, Please check your configuration and try again.");
				}
				try {
					lstDataDefinition = (List) mapDataDefinition.get(tableName);
				} catch (Exception e) {
					// TODO: handle exception
				}
				Long idData = 0L;
				try {
					idData = DataTemplateAddNewDAO.addintolistdatasource(listDataSource, readTablesFromMYSQL,
							listdataAccess, primarykeyCols, lstDataDefinition, selected_list);
				} catch (Exception e) {
					isTemplatesCreationSuccessful = false;
				}
				String validationCheckName = dataTemplateName + "_" + tableName + "_Validation";
				Long idApp = 0L;
				try {
					System.out.println("&&&&&&&&" + idData);
					idApp = createValidationCheck(validationCheckName, idData, idUser, lstDataDefinition);

					// insert statement here

					/*String connectionUrl = "jdbc:mysql://172.28.25.111:3306"; 
					     
					      Connection con = null;  
					      Statement stmt = null;  
					      ResultSet rs = null;  
					      
					      Class.forName("com.mysql.jdbc.Driver").newInstance ();  
					         con = DriverManager.getConnection(connectionUrl, "root", "root");  

					         // Create and execute an SQL statement that returns some data.  
					         String SQL = "CREATE TABLE databuck_results_db_project.Date_Rule_" + idApp + "(ColumnName nvarchar(500), NAAcceptable nvarchar(100), MinAcceptable nvarchar(500), MaxAcceptable nvarchar(500), NullColumn nvarchar(500))";
					         stmt = con.createStatement();  
					         int create = stmt.executeUpdate(SQL);  */

					// yyyy
					// long addIntoResultDb = DataTemplateAddNewDAO.addIntoResultDb(idApp, session);

				} catch (Exception e) {
					isValidationsCreationSuccessful = false;
				}
			}
			if (isTemplatesCreationSuccessful && isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", "Data Templates and validation Checks created Successfully.");
			} else if (isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message",
						"Data Templates created successfully but problem while creating few validation Checks.");
			} else if (!isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", " Problem while creating Data Templates and validation Checks.");
			}
			return returnMsgsMap;

		} else if (datalocation.equals("Postgres")) {

			List<ListDataSchema> listDataSchema = DataTemplateAddNewDAO.getListDataSchema(idDataSchema);

			HostURI = ((ListDataSchema) listDataSchema.get(0)).getIpAddress();
			folder = ((ListDataSchema) listDataSchema.get(0)).getDatabaseSchema();
			userlogin = ((ListDataSchema) listDataSchema.get(0)).getUsername();
			password = ((ListDataSchema) listDataSchema.get(0)).getPassword();
			String portName = ((ListDataSchema) listDataSchema.get(0)).getPort();

			ListDataSource listDataSource = new ListDataSource();
			listDataSource.setName(dataTemplateName);
			listDataSource.setDescription(description);
			listDataSource.setDataLocation(datalocation);
			listDataSource.setDataSource("SQL");
			listDataSource.setCreatedAt(new Date());
			listDataSource.setCreatedBy(idUser);
			listDataSource.setIdDataSchema(Long.valueOf(idDataSchema));

			Long rows = Long.valueOf(0L);
			if ((rowsId != null) && (!rowsId.equals("")))
				rows = Long.valueOf(Long.parseLong(rowsId));
			System.out.println("rows=" + rows);
			listDataSource.setGarbageRows(rows);

			listDataAccess listdataAccess = new listDataAccess();
			listdataAccess.setHostName(HostURI);
			listdataAccess.setPortName(portName);
			listdataAccess.setUserName(userlogin);
			listdataAccess.setPwd(password);
			listdataAccess.setSchemaName(folder);

			listdataAccess.setQueryString(queryTextbox);
			listdataAccess.setFolderName(tableName);
			listdataAccess.setIdDataSchema(idDataSchema);
			listdataAccess.setWhereCondition(whereCondition);
			listdataAccess.setQuery(queryCheckbox);
			listdataAccess.setIncrementalType(incrementalType);
			listdataAccess.setDateFormat(dateFormat);
			listdataAccess.setSliceStart(sliceStart);
			listdataAccess.setSliceEnd(sliceEnd);
			listdataAccess.setFileHeader(headerId);
			System.out.println(" in Postgres ");

			boolean isTemplatesCreationSuccessful = true;
			boolean isValidationsCreationSuccessful = true;

			if (!lstTable.equals("")) {
				lstTable = lstTable.replace("[", "");
				lstTable = lstTable.replace("]", "");
				System.out.println("lstTable=" + lstTable);
				StringTokenizer tokenizer = new StringTokenizer(lstTable, ",");

				while (tokenizer.hasMoreTokens()) {
					tableName = tokenizer.nextToken();

					tableName = tableName.replace("\"", "");
					listdataAccess.setFolderName(tableName);
					listDataSource.setName(dataTemplateName + "_" + tableName);

					if (queryCheckbox.equalsIgnoreCase("column_name")) {
						listdataAccess.setFolderName(queryTextbox);
					} else {
						listdataAccess.setFolderName(tableName);
					}

					Map readTablesFromPostgres = postgresConnection.readTablesFromPostgres(HostURI, folder, userlogin, password, tableName,
							queryTextbox, portName);
					List<String> primaryKeyCols = postgresConnection.readPrimaryKeyColumnsFromPostgres(HostURI, folder,
							userlogin, password, folder, tableName, portName);
					if (readTablesFromPostgres.isEmpty()) {
						returnMsgsMap.put("errorMessage",
								"Unable to create Data Template, Please check your configuration and try again.");
					}
					try {
						lstDataDefinition = (List) mapDataDefinition.get(tableName);
					} catch (Exception e) {
						// TODO: handle exception
					}
					Long idData = 0L;
					try {
						idData = DataTemplateAddNewDAO.addintolistdatasource(listDataSource, readTablesFromPostgres,
								listdataAccess, primaryKeyCols, lstDataDefinition, selected_list);
					} catch (Exception e) {
						e.printStackTrace();
						isTemplatesCreationSuccessful = false;
					}
					String validationCheckName = dataTemplateName + "_" + tableName + "_Validation";
					Long idApp = 0L;
					try {
						idApp = createValidationCheck(validationCheckName, idData, idUser, lstDataDefinition);

						// insert statement here

						/*String connectionUrl = "jdbc:mysql://172.28.25.111:3306"; 
						     
						      Connection con = null;  
						      Statement stmt = null;  
						      ResultSet rs = null;  
						      
						      Class.forName("com.mysql.jdbc.Driver").newInstance ();  
						         con = DriverManager.getConnection(connectionUrl, "root", "root");  
	
						         // Create and execute an SQL statement that returns some data.  
						         String SQL = "CREATE TABLE databuck_results_db_project.Date_Rule_" + idApp + "(ColumnName nvarchar(500), NAAcceptable nvarchar(100), MinAcceptable nvarchar(500), MaxAcceptable nvarchar(500), NullColumn nvarchar(500))";
						         stmt = con.createStatement();  
						         int create = stmt.executeUpdate(SQL);  */

						// yyyy
						// long addIntoResultDb = DataTemplateAddNewDAO.addIntoResultDb(idApp, session);

					} catch (Exception e) {
						isValidationsCreationSuccessful = false;
					}
				}
			} else if (!queryTextbox.equals("")) {
				Map readTablesFromPostgres = postgresConnection.readTablesFromPostgres(HostURI, folder, userlogin, password, tableName,
						queryTextbox, portName);
				List<String> primaryKeyCols = new ArrayList();

				if (readTablesFromPostgres.isEmpty()) {
					returnMsgsMap.put("errorMessage",
							"Unable to create Data Template, Please check your configuration and try again.");
				}
				try {
					lstDataDefinition = (List) mapDataDefinition.get(tableName);
				} catch (Exception e) {
					// TODO: handle exception
				}
				Long idData = 0L;
				try {
					idData = DataTemplateAddNewDAO.addintolistdatasource(listDataSource, readTablesFromPostgres,
							listdataAccess, primaryKeyCols, lstDataDefinition, selected_list);
				} catch (Exception e) {
					isTemplatesCreationSuccessful = false;
				}
				String validationCheckName = dataTemplateName + "_" + tableName + "_Validation";
				Long idApp = 0L;
				try {
					idApp = createValidationCheck(validationCheckName, idData, idUser, lstDataDefinition);

				} catch (Exception e) {
					isValidationsCreationSuccessful = false;
				}
			}
			if (isTemplatesCreationSuccessful && isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", "Data Templates and validation Checks created Successfully.");
			} else if (isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message",
						"Data Templates created successfully but problem while creating few validation Checks.");
			} else if (!isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", " Problem while creating Data Templates and validation Checks.");
			}
			return returnMsgsMap;

		} else if (datalocation.equals("Teradata")) {

			List<ListDataSchema> listDataSchema = DataTemplateAddNewDAO.getListDataSchema(idDataSchema);

			HostURI = ((ListDataSchema) listDataSchema.get(0)).getIpAddress();
			folder = ((ListDataSchema) listDataSchema.get(0)).getDatabaseSchema();
			userlogin = ((ListDataSchema) listDataSchema.get(0)).getUsername();
			password = ((ListDataSchema) listDataSchema.get(0)).getPassword();
			String portName = ((ListDataSchema) listDataSchema.get(0)).getPort();

			ListDataSource listDataSource = new ListDataSource();
			listDataSource.setName(dataTemplateName);
			listDataSource.setDescription(description);
			listDataSource.setDataLocation(datalocation);
			listDataSource.setDataSource("SQL");
			listDataSource.setCreatedAt(new Date());
			listDataSource.setCreatedBy(idUser);
			listDataSource.setIdDataSchema(Long.valueOf(idDataSchema));

			Long rows = Long.valueOf(0L);
			if ((rowsId != null) && (!rowsId.equals("")))
				rows = Long.valueOf(Long.parseLong(rowsId));
			System.out.println("rows=" + rows);
			listDataSource.setGarbageRows(rows);

			listDataAccess listdataAccess = new listDataAccess();
			listdataAccess.setHostName(HostURI);
			listdataAccess.setPortName(portName);
			listdataAccess.setUserName(userlogin);
			listdataAccess.setPwd(password);
			listdataAccess.setSchemaName(folder);

			listdataAccess.setQueryString(queryTextbox);
			listdataAccess.setFolderName(tableName);
			listdataAccess.setIdDataSchema(idDataSchema);
			listdataAccess.setWhereCondition(whereCondition);
			listdataAccess.setQuery(queryCheckbox);
			listdataAccess.setIncrementalType(incrementalType);
			listdataAccess.setDateFormat(dateFormat);
			listdataAccess.setSliceStart(sliceStart);
			listdataAccess.setSliceEnd(sliceEnd);
			listdataAccess.setFileHeader(headerId);
			System.out.println(" in Teradata ");

			boolean isTemplatesCreationSuccessful = true;
			boolean isValidationsCreationSuccessful = true;

			if (!lstTable.equals("")) {
				lstTable = lstTable.replace("[", "");
				lstTable = lstTable.replace("]", "");
				System.out.println("lstTable=" + lstTable);
				StringTokenizer tokenizer = new StringTokenizer(lstTable, ",");

				while (tokenizer.hasMoreTokens()) {
					tableName = tokenizer.nextToken();

					tableName = tableName.replace("\"", "");
					listdataAccess.setFolderName(tableName);
					listDataSource.setName(dataTemplateName + "_" + tableName);

					if (queryCheckbox.equalsIgnoreCase("column_name")) {
						listdataAccess.setFolderName(queryTextbox);
					} else {
						listdataAccess.setFolderName(tableName);
					}

					Map readTablesFromTeradata = teradataConnection.readTablesFromTeradata(HostURI, folder, userlogin, password, tableName,
							queryTextbox, portName);
					List<String> primaryKeyCols = new ArrayList();

					if (readTablesFromTeradata.isEmpty()) {
						returnMsgsMap.put("errorMessage",
								"Unable to create Data Template, Please check your configuration and try again.");
					}
					try {
						lstDataDefinition = (List) mapDataDefinition.get(tableName);
					} catch (Exception e) {
						// TODO: handle exception
					}
					Long idData = 0L;
					try {
						idData = DataTemplateAddNewDAO.addintolistdatasource(listDataSource, readTablesFromTeradata,
								listdataAccess, primaryKeyCols, lstDataDefinition, selected_list);
					} catch (Exception e) {
						isTemplatesCreationSuccessful = false;
					}
					String validationCheckName = dataTemplateName + "_" + tableName + "_Validation";
					Long idApp = 0L;
					try {
						idApp = createValidationCheck(validationCheckName, idData, idUser, lstDataDefinition);

					} catch (Exception e) {
						isValidationsCreationSuccessful = false;
					}
				}
			} else if (!queryTextbox.equals("")) {
				Map readTablesFromTeradata = teradataConnection.readTablesFromTeradata(HostURI, folder, userlogin, password, tableName,
						queryTextbox, portName);
				List<String> primaryKeyCols = new ArrayList();

				if (readTablesFromTeradata.isEmpty()) {
					returnMsgsMap.put("errorMessage",
							"Unable to create Data Template, Please check your configuration and try again.");
				}
				try {
					lstDataDefinition = (List) mapDataDefinition.get(tableName);
				} catch (Exception e) {
					// TODO: handle exception
				}
				Long idData = 0L;
				try {
					idData = DataTemplateAddNewDAO.addintolistdatasource(listDataSource, readTablesFromTeradata,
							listdataAccess, primaryKeyCols, lstDataDefinition, selected_list);
				} catch (Exception e) {
					isTemplatesCreationSuccessful = false;
				}
				String validationCheckName = dataTemplateName + "_" + tableName + "_Validation";
				Long idApp = 0L;
				try {
					idApp = createValidationCheck(validationCheckName, idData, idUser, lstDataDefinition);

				} catch (Exception e) {
					isValidationsCreationSuccessful = false;
				}
			}
			if (isTemplatesCreationSuccessful && isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", "Data Templates and validation Checks created Successfully.");
			} else if (isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message",
						"Data Templates created successfully but problem while creating few validation Checks.");
			} else if (!isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", " Problem while creating Data Templates and validation Checks.");
			}
			return returnMsgsMap;

		}
		else if (datalocation.equals("Cassandra")) {

			List<ListDataSchema> listDataSchema = DataTemplateAddNewDAO.getListDataSchema(idDataSchema);

			HostURI = ((ListDataSchema) listDataSchema.get(0)).getIpAddress();
			folder = ((ListDataSchema) listDataSchema.get(0)).getDatabaseSchema();
			userlogin = ((ListDataSchema) listDataSchema.get(0)).getUsername();
			password = ((ListDataSchema) listDataSchema.get(0)).getPassword();
			String portName = ((ListDataSchema) listDataSchema.get(0)).getPort();

			ListDataSource listDataSource = new ListDataSource();
			listDataSource.setName(dataTemplateName);
			listDataSource.setDescription(description);
			listDataSource.setDataLocation(datalocation);
			listDataSource.setDataSource("SQL");
			listDataSource.setCreatedAt(new Date());
			listDataSource.setCreatedBy(idUser);
			listDataSource.setIdDataSchema(Long.valueOf(idDataSchema));

			Long rows = Long.valueOf(0L);
			if ((rowsId != null) && (!rowsId.equals("")))
				rows = Long.valueOf(Long.parseLong(rowsId));
			System.out.println("rows=" + rows);
			listDataSource.setGarbageRows(rows);

			listDataAccess listdataAccess = new listDataAccess();
			listdataAccess.setHostName(HostURI);
			listdataAccess.setPortName(portName);
			listdataAccess.setUserName(userlogin);
			listdataAccess.setPwd(password);
			listdataAccess.setSchemaName(folder);

			listdataAccess.setQueryString(queryTextbox);
			listdataAccess.setIdDataSchema(idDataSchema);
			listdataAccess.setWhereCondition(whereCondition);
			listdataAccess.setQuery(queryCheckbox);
			listdataAccess.setIncrementalType(incrementalType);
			listdataAccess.setDateFormat(dateFormat);
			listdataAccess.setSliceStart(sliceStart);
			listdataAccess.setSliceEnd(sliceEnd);
			listdataAccess.setFileHeader(headerId);
			System.out.println(" in Cassandra ");

			lstTable = lstTable.replace("[", "");
			lstTable = lstTable.replace("]", "");
			StringTokenizer tokenizer = new StringTokenizer(lstTable, ",");
			boolean isTemplatesCreationSuccessful = true;
			boolean isValidationsCreationSuccessful = true;
			while (tokenizer.hasMoreTokens()) {
				tableName = tokenizer.nextToken();

				tableName = tableName.replace("\"", "");

				listDataSource.setName(dataTemplateName + "_" + tableName);
				listdataAccess.setFolderName(tableName);
				listDataSource.setTableName(tableName);
				Object[] arr = cassandraconnection.readTablesFromCassandra(HostURI, folder, userlogin, password,
						tableName, portName);
				Map<String, String> readTablesFromCassandra = (Map<String, String>) arr[0];
				List<String> primarykeyCols = (List<String>) arr[1];
				if (readTablesFromCassandra.isEmpty()) {
					returnMsgsMap.put("errorMessage",
							"Unable to create Data Template, Please check your configuration and try again.");
				}

				try {
					lstDataDefinition = (List) mapDataDefinition.get(tableName);
				} catch (Exception e) {
					// TODO: handle exception
				}

				Long idData = 0L;
				try {
					idData = DataTemplateAddNewDAO.addintolistdatasource(listDataSource, readTablesFromCassandra,
							listdataAccess, primarykeyCols, lstDataDefinition, selected_list);
				} catch (Exception e) {
					isTemplatesCreationSuccessful = false;
				}
				String validationCheckName = dataTemplateName + "_" + tableName + "_Validation";
				Long idApp = 0L;
				try {
					idApp = createValidationCheck(validationCheckName, idData, idUser, lstDataDefinition);
				} catch (Exception e) {
					isValidationsCreationSuccessful = false;
				}
			}
			if (isTemplatesCreationSuccessful && isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", "Data Templates and validation Checks created Successfully.");
			} else if (isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message",
						"Data Templates created successfully but problem while creating few validation Checks.");
			} else if (!isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", " Problem while creating Data Templates and validation Checks.");
			}
			return returnMsgsMap;

		} else if (datalocation.equals("Oracle")) {

			List<ListDataSchema> listDataSchema = DataTemplateAddNewDAO.getListDataSchema(idDataSchema);

			HostURI = ((ListDataSchema) listDataSchema.get(0)).getIpAddress();
			String databaseSchema = ((ListDataSchema) listDataSchema.get(0)).getDatabaseSchema();
			userlogin = ((ListDataSchema) listDataSchema.get(0)).getUsername();
			password = ((ListDataSchema) listDataSchema.get(0)).getPassword();
			String portName = ((ListDataSchema) listDataSchema.get(0)).getPort();

			ListDataSource listDataSource = new ListDataSource();
			listDataSource.setName(dataTemplateName);
			listDataSource.setDescription(description);
			listDataSource.setDataLocation(datalocation);
			listDataSource.setDataSource("SQL");
			listDataSource.setCreatedAt(new Date());
			listDataSource.setCreatedBy(idUser);
			listDataSource.setIdDataSchema(Long.valueOf(idDataSchema));

			Long rows = Long.valueOf(0L);
			if ((rowsId != null) && (!rowsId.equals("")))
				rows = Long.valueOf(Long.parseLong(rowsId));
			System.out.println("rows=" + rows);
			listDataSource.setGarbageRows(rows);

			listDataAccess listdataAccess = new listDataAccess();
			listdataAccess.setHostName(HostURI);
			listdataAccess.setPortName(portName);
			listdataAccess.setUserName(userlogin);
			listdataAccess.setPwd(password);
			listdataAccess.setSchemaName(databaseSchema);

			listdataAccess.setQueryString(queryTextbox);
			listdataAccess.setFolderName(tableName);
			listdataAccess.setIdDataSchema(idDataSchema);
			listdataAccess.setWhereCondition(whereCondition);
			listdataAccess.setQuery(queryCheckbox);
			listdataAccess.setIncrementalType(incrementalType);
			listdataAccess.setDateFormat(dateFormat);
			listdataAccess.setSliceStart(sliceStart);
			listdataAccess.setSliceEnd(sliceEnd);
			listdataAccess.setFileHeader(headerId);
			System.out.println(" Oracle ");

			lstTable = lstTable.replace("[", "");
			lstTable = lstTable.replace("]", "");
			StringTokenizer tokenizer = new StringTokenizer(lstTable, ",");
			boolean isTemplatesCreationSuccessful = true;
			boolean isValidationsCreationSuccessful = true;
			if (!lstTable.equals("")) {
				while (tokenizer.hasMoreTokens()) {
					tableName = tokenizer.nextToken();

					tableName = tableName.replace("\"", "");
					listdataAccess.setFolderName(tableName);
					listDataSource.setName(dataTemplateName + "_" + tableName);

					Map readTablesFromOracle = oracleconnection.readTablesFromOracle(HostURI, databaseSchema, userlogin,
							password, tableName, queryTextbox, portName);
					if (readTablesFromOracle.isEmpty()) {
						returnMsgsMap.put("errorMessage",
								"Unable to create Data Template, Please check your configuration and try again.");
					}
					List<String> primaryKeyCols = oracleconnection.readPrimaryKeyColumnsFromOracle(HostURI, folder,
							userlogin, password, tableName, portName);

					try {
						lstDataDefinition = (List) mapDataDefinition.get(tableName);
					} catch (Exception e) {
						e.printStackTrace();
						// TODO: handle exception
					}

					Long idData = 0L;
					try {
						idData = DataTemplateAddNewDAO.addintolistdatasource(listDataSource, readTablesFromOracle,
								listdataAccess, primaryKeyCols, lstDataDefinition, selected_list);
					} catch (Exception e) {
						e.printStackTrace();
						isTemplatesCreationSuccessful = false;
					}
					String validationCheckName = dataTemplateName + "_" + tableName + "_Validation";
					Long idApp = 0L;
					try {
						idApp = createValidationCheck(validationCheckName, idData, idUser, lstDataDefinition);
					} catch (Exception e) {
						isValidationsCreationSuccessful = false;
					}
				}
			} else if (!queryTextbox.equals("")) {
				Map readTablesFromOracle = oracleconnection.readTablesFromOracle(HostURI, databaseSchema, userlogin,
						password, tableName, queryTextbox, portName);
				if (readTablesFromOracle.isEmpty()) {
					returnMsgsMap.put("errorMessage",
							"Unable to create Data Template, Please check your configuration and try again.");
				}
				List<String> primaryKeyCols = oracleconnection.readPrimaryKeyColumnsFromOracle(HostURI, folder,
						userlogin, password, tableName, portName);

				try {
					lstDataDefinition = (List) mapDataDefinition.get(queryTextbox);
				} catch (Exception e) {
					// TODO: handle exception
				}

				Long idData = 0L;
				try {
					idData = DataTemplateAddNewDAO.addintolistdatasource(listDataSource, readTablesFromOracle,
							listdataAccess, primaryKeyCols, lstDataDefinition, selected_list);
				} catch (Exception e) {
					isTemplatesCreationSuccessful = false;
				}
				String validationCheckName = dataTemplateName + "_" + tableName + "_Validation";
				Long idApp = 0L;
				try {
					idApp = createValidationCheck(validationCheckName, idData, idUser, lstDataDefinition);
				} catch (Exception e) {
					isValidationsCreationSuccessful = false;
				}
			}
			if (isTemplatesCreationSuccessful && isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", "Data Templates and validation Checks created Successfully.");
			} else if (isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message",
						"Data Templates created successfully but problem while creating few validation Checks.");
			} else if (!isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", "Problem while creating Data Templates and validation Checks.");
			}
			return returnMsgsMap;
		} else if (datalocation.equals("Oracle RAC")) {

			List<ListDataSchema> listDataSchema = DataTemplateAddNewDAO.getListDataSchema(idDataSchema);

			HostURI = ((ListDataSchema) listDataSchema.get(0)).getIpAddress();
			folder = ((ListDataSchema) listDataSchema.get(0)).getDatabaseSchema();
			userlogin = ((ListDataSchema) listDataSchema.get(0)).getUsername();
			password = ((ListDataSchema) listDataSchema.get(0)).getPassword();
			String portName = ((ListDataSchema) listDataSchema.get(0)).getPort();
			String serviceName = ((ListDataSchema) listDataSchema.get(0)).getKeytab();
			ListDataSource listDataSource = new ListDataSource();
			listDataSource.setName(dataTemplateName);
			listDataSource.setDescription(description);
			listDataSource.setDataLocation(datalocation);
			listDataSource.setDataSource("SQL");
			listDataSource.setCreatedAt(new Date());
			listDataSource.setCreatedBy(idUser);
			listDataSource.setIdDataSchema(Long.valueOf(idDataSchema));

			Long rows = Long.valueOf(0L);
			if ((rowsId != null) && (!rowsId.equals("")))
				rows = Long.valueOf(Long.parseLong(rowsId));
			System.out.println("rows=" + rows);
			listDataSource.setGarbageRows(rows);

			listDataAccess listdataAccess = new listDataAccess();
			listdataAccess.setHostName(HostURI);
			listdataAccess.setPortName(portName);
			listdataAccess.setUserName(userlogin);
			listdataAccess.setPwd(password);
			listdataAccess.setSchemaName(serviceName);

			listdataAccess.setQueryString(queryTextbox);
			listdataAccess.setFolderName(tableName);
			listdataAccess.setIdDataSchema(idDataSchema);
			listdataAccess.setWhereCondition(whereCondition);
			listdataAccess.setQuery(queryCheckbox);
			listdataAccess.setIncrementalType(incrementalType);
			listdataAccess.setDateFormat(dateFormat);
			listdataAccess.setSliceStart(sliceStart);
			listdataAccess.setSliceEnd(sliceEnd);
			listdataAccess.setFileHeader(headerId);

			lstTable = lstTable.replace("[", "");
			lstTable = lstTable.replace("]", "");
			StringTokenizer tokenizer = new StringTokenizer(lstTable, ",");
			boolean isTemplatesCreationSuccessful = true;
			boolean isValidationsCreationSuccessful = true;
			while (tokenizer.hasMoreTokens()) {
				tableName = tokenizer.nextToken();

				tableName = tableName.replace("\"", "");
				listdataAccess.setFolderName(tableName);
				listDataSource.setName(dataTemplateName + "_" + tableName);

				Map readTablesFromOracleRAC = OracleRACConnection.readTablesFromOracleRAC(HostURI, folder, userlogin,
						password, tableName, portName, serviceName);
				if (readTablesFromOracleRAC.isEmpty()) {
					returnMsgsMap.put("errorMessage",
							"Unable to create Data Template, Please check your configuration and try again.");
				}
				List<String> primaryKeyCols = OracleRACConnection.readPrimaryKeyColumnsFromOracleRAC(HostURI, folder,
						userlogin, password, tableName, portName, serviceName);

				try {
					lstDataDefinition = (List) mapDataDefinition.get(tableName);
				} catch (Exception e) {
					// TODO: handle exception
				}

				Long idData = 0L;
				try {
					idData = DataTemplateAddNewDAO.addintolistdatasource(listDataSource, readTablesFromOracleRAC,
							listdataAccess, primaryKeyCols, lstDataDefinition, selected_list);
				} catch (Exception e) {
					isTemplatesCreationSuccessful = false;
				}
				String validationCheckName = dataTemplateName + "_" + tableName + "_Validation";
				Long idApp = 0L;
				try {
					idApp = createValidationCheck(validationCheckName, idData, idUser, lstDataDefinition);
				} catch (Exception e) {
					isValidationsCreationSuccessful = false;
				}
			}
			if (isTemplatesCreationSuccessful && isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", "Data Templates and validation Checks created Successfully.");
			} else if (isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message",
						"Data Templates created successfully but problem while creating few validation Checks.");
			} else if (!isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", " Problem while creating Data Templates and validation Checks.");
			}
			return returnMsgsMap;
		} else if (datalocation.equals("Hive") || datalocation.equals("Hive Kerberos") || datalocation.equals("ClouderaHive")) {
			System.out.println(" Hive ");
			HiveSource hivesource = new HiveSource();
			hivesource.setName(dataTemplateName);
			hivesource.setDescription(description);
			hivesource.setIdDataSchema(idDataSchema);
			if (queryCheckbox.equalsIgnoreCase("column_name")) {
				hivesource.setTableName(queryTextbox);
			} else {
				hivesource.setTableName(tableName);
			}
			int insertDataIntoHiveSource = DataTemplateAddNewDAO.insertDataIntoHiveSource(hivesource);

			List<ListDataSchema> listDataSchema = DataTemplateAddNewDAO.getListDataSchema(idDataSchema);
			HostURI = ((ListDataSchema) listDataSchema.get(0)).getIpAddress();
			folder = ((ListDataSchema) listDataSchema.get(0)).getDatabaseSchema();
			userlogin = ((ListDataSchema) listDataSchema.get(0)).getUsername();
			password = ((ListDataSchema) listDataSchema.get(0)).getPassword();
			String portName = ((ListDataSchema) listDataSchema.get(0)).getPort();
			String principle = ((ListDataSchema) listDataSchema.get(0)).getDomain();
			String keytab = ((ListDataSchema) listDataSchema.get(0)).getKeytab();
			String krb5conf = ((ListDataSchema) listDataSchema.get(0)).getKrb5conf();
			String hivejdbchost = ((ListDataSchema) listDataSchema.get(0)).getHivejdbchost();
			String hivejdbcport = ((ListDataSchema) listDataSchema.get(0)).getHivejdbcport();
			String sslEnb = ((ListDataSchema) listDataSchema.get(0)).getSslEnb();
			String sslTrustStorePath = ((ListDataSchema) listDataSchema.get(0)).getsslTrustStorePath();
	        String trustPassword = ((ListDataSchema) listDataSchema.get(0)).gettrustPassword();
			
			boolean isKerberosEnabled = datalocation.equals("Hive Kerberos") ? true: false;
			boolean isKnoxEnabled = datalocation.equals("Hive knox") ? true: false;

			ListDataSource listDataSource = new ListDataSource();
			listDataSource.setName(dataTemplateName);
			listDataSource.setDescription(description);
			listDataSource.setDataLocation(datalocation);
			listDataSource.setDataSource("SQL");
			listDataSource.setCreatedAt(new Date());
			listDataSource.setCreatedBy(idUser);
			listDataSource.setIdDataSchema(Long.valueOf(idDataSchema));

			Long rows = Long.valueOf(0L);
			if ((rowsId != null) && (!rowsId.equals("")))
				rows = Long.valueOf(Long.parseLong(rowsId));
			System.out.println("rows=" + rows);
			listDataSource.setGarbageRows(rows);

			listDataAccess listdataAccess = new listDataAccess();
			listdataAccess.setHostName(HostURI);
			listdataAccess.setPortName(portName);
			listdataAccess.setUserName(userlogin);
			listdataAccess.setPwd(password);
			listdataAccess.setSchemaName(folder);
			listdataAccess.setDomain(principle);
			listdataAccess.setSslEnb(sslEnb);
			listdataAccess.setsslTrustStorePath(sslTrustStorePath);
			listdataAccess.settrustPassword(trustPassword);
			listdataAccess.setHivejdbchost(hivejdbchost);
			listdataAccess.setHivejdbcport(hivejdbcport);

			listdataAccess.setQueryString(queryTextbox);

			listdataAccess.setIdDataSchema(idDataSchema);
			listdataAccess.setWhereCondition(whereCondition);
			listdataAccess.setIncrementalType(incrementalType);
			listdataAccess.setQuery(queryCheckbox);
			listdataAccess.setDateFormat(dateFormat);
			listdataAccess.setSliceStart(sliceStart);
			listdataAccess.setSliceEnd(sliceEnd);
			listdataAccess.setFileHeader(headerId);

			lstTable = lstTable.replace("[", "");
			lstTable = lstTable.replace("]", "");
			StringTokenizer tokenizer = new StringTokenizer(lstTable, ",");
			boolean isTemplatesCreationSuccessful = true;
			boolean isValidationsCreationSuccessful = true;
			while (tokenizer.hasMoreTokens()) {
				tableName = tokenizer.nextToken();
				tableName = tableName.replace("\"", "");
				listdataAccess.setFolderName(tableName);
				listDataSource.setName(dataTemplateName + "_" + tableName);
				listDataSource.setTableName(tableName);

				String gatewayPath = "";
				String jksPath = "";
				String zookeeperUrl = "";
				
				Map readTablesFromHive = hiveconnection.readTablesFromHive(HostURI, folder, userlogin, password,
						tableName, portName, sslEnb, sslTrustStorePath, trustPassword,isKerberosEnabled,keytab,krb5conf,principle,isKnoxEnabled,gatewayPath, jksPath,zookeeperUrl);
				if (readTablesFromHive.isEmpty()) {
					returnMsgsMap.put("errorMessage",
							"Unable to create Data Template, Please check your configuration and try again.");
				}
				List<String> primarykeyCols = new ArrayList<String>();

				try {
					lstDataDefinition = (List) mapDataDefinition.get(tableName);
				} catch (Exception e) {
					// TODO: handle exception
				}

				System.out.println("tableName=" + tableName);
				Long idData = 0L;
				try {
					idData = DataTemplateAddNewDAO.addintolistdatasource(listDataSource, readTablesFromHive,
							listdataAccess, primarykeyCols, lstDataDefinition, selected_list);
				} catch (Exception e) {
					isTemplatesCreationSuccessful = false;
				}
				String validationCheckName = dataTemplateName + "_" + tableName + "_Validation";
				Long idApp = 0L;
				try {
					idApp = createValidationCheck(validationCheckName, idData, idUser, lstDataDefinition);
				} catch (Exception e) {
					isValidationsCreationSuccessful = false;
				}
			}
			if (isTemplatesCreationSuccessful && isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", "Data Templates and validation Checks created Successfully.");
			} else if (isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message",
						"Data Templates created successfully but problem while creating few validation Checks.");
			} else if (!isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", " Problem while creating Data Templates and validation Checks.");
			}
			return returnMsgsMap;
		} else if (datalocation.equalsIgnoreCase("Amazon Redshift")) {
			System.out.println("Amazon Redshift ");
			HiveSource hivesource = new HiveSource();
			hivesource.setName(dataTemplateName);
			hivesource.setDescription(description);
			hivesource.setIdDataSchema(idDataSchema);
			if (queryCheckbox.equalsIgnoreCase("column_name")) {
				hivesource.setTableName(queryTextbox);
			} else {
				hivesource.setTableName(tableName);
			}
			int insertDataIntoHiveSource = DataTemplateAddNewDAO.insertDataIntoHiveSource(hivesource);
			List<ListDataSchema> listDataSchema = DataTemplateAddNewDAO.getListDataSchema(Long.valueOf(idDataSchema));
			HostURI = ((ListDataSchema) listDataSchema.get(0)).getIpAddress();
			folder = ((ListDataSchema) listDataSchema.get(0)).getDatabaseSchema();
			userlogin = ((ListDataSchema) listDataSchema.get(0)).getUsername();
			password = ((ListDataSchema) listDataSchema.get(0)).getPassword();
			String portName = ((ListDataSchema) listDataSchema.get(0)).getPort();

			ListDataSource listDataSource = new ListDataSource();
			listDataSource.setName(dataTemplateName);
			listDataSource.setDescription(description);
			listDataSource.setDataLocation(datalocation);
			listDataSource.setDataSource("SQL");
			listDataSource.setCreatedAt(new Date());
			listDataSource.setCreatedBy(idUser);
			listDataSource.setIdDataSchema(Long.valueOf(idDataSchema));

			Long rows = Long.valueOf(0L);
			if ((rowsId != null) && (!rowsId.equals("")))
				rows = Long.valueOf(Long.parseLong(rowsId));
			System.out.println("rows=" + rows);
			listDataSource.setGarbageRows(rows);

			listDataAccess listdataAccess = new listDataAccess();
			listdataAccess.setHostName(HostURI);
			listdataAccess.setPortName(portName);
			listdataAccess.setUserName(userlogin);
			listdataAccess.setPwd(password);
			listdataAccess.setSchemaName(folder);

			listdataAccess.setQueryString(queryTextbox);
			listdataAccess.setFolderName(tableName);
			listdataAccess.setIdDataSchema(idDataSchema);
			listdataAccess.setWhereCondition(whereCondition);
			listdataAccess.setIncrementalType(incrementalType);
			listdataAccess.setQuery(queryCheckbox);
			listdataAccess.setDateFormat(dateFormat);
			listdataAccess.setSliceStart(sliceStart);
			listdataAccess.setSliceEnd(sliceEnd);
			listdataAccess.setFileHeader(headerId);

			lstTable = lstTable.replace("[", "");
			lstTable = lstTable.replace("]", "");
			StringTokenizer tokenizer = new StringTokenizer(lstTable, ",");
			boolean isTemplatesCreationSuccessful = true;
			boolean isValidationsCreationSuccessful = true;
			while (tokenizer.hasMoreTokens()) {
				tableName = tokenizer.nextToken();
				tableName = tableName.replace("\"", "");
				listdataAccess.setFolderName(tableName);
				listDataSource.setName(dataTemplateName + "_" + tableName);
				listDataSource.setTableName(tableName);
				Map readTablesFromAmazon = amazonRedshiftConnection.readTablesFromAmazonRedshift(HostURI, folder,
						userlogin, password, tableName, portName);

				if (readTablesFromAmazon.isEmpty()) {
					returnMsgsMap.put("errorMessage",
							"Unable to create Data Template, Please check your configuration and try again.");
				}
				List<String> primarykeyCols = new ArrayList();

				try {
					lstDataDefinition = (List) mapDataDefinition.get(tableName);
				} catch (Exception e) {
					// TODO: handle exception
				}

				Long idData = 0L;
				try {
					idData = DataTemplateAddNewDAO.addintolistdatasource(listDataSource, readTablesFromAmazon,
							listdataAccess, primarykeyCols, lstDataDefinition, selected_list);
				} catch (Exception e) {
					isTemplatesCreationSuccessful = false;
				}
				String validationCheckName = dataTemplateName + "_" + tableName + "_Validation";
				Long idApp = 0L;
				try {
					idApp = createValidationCheck(validationCheckName, idData, idUser, lstDataDefinition);
				} catch (Exception e) {
					isValidationsCreationSuccessful = false;
				}
			}
			if (isTemplatesCreationSuccessful && isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", "Data Templates and validation Checks created Successfully.");
			} else if (isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message",
						"Data Templates created successfully but problem while creating few validation Checks.");
			} else if (!isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", "Problem while creating Data Templates and validation Checks.");
			}
			return returnMsgsMap;
		}
		String principle;
		String keytab;
		String krb5conf;
		if (datalocation.equalsIgnoreCase("Hive Kerberos")) {
			System.out.println("Hive Kerberos");
			HiveSource hivesource = new HiveSource();
			hivesource.setName(dataTemplateName);
			hivesource.setDescription(description);
			hivesource.setIdDataSchema(idDataSchema);
			if (queryCheckbox.equalsIgnoreCase("column_name")) {
				hivesource.setTableName(queryTextbox);
			} else {
				hivesource.setTableName(tableName);
			}
			// int insertDataIntoHiveSource =
			// DataTemplateAddNewDAO.insertDataIntoHiveSource(hivesource);
			List<ListDataSchema> listDataSchema = DataTemplateAddNewDAO.getListDataSchema(Long.valueOf(idDataSchema));
			String internalIP = ((ListDataSchema) listDataSchema.get(0)).getIpAddress();
			String databaseAndSchema = ((ListDataSchema) listDataSchema.get(0)).getDatabaseSchema();
			userlogin = ((ListDataSchema) listDataSchema.get(0)).getUsername();
			password = ((ListDataSchema) listDataSchema.get(0)).getPassword();
			String port = ((ListDataSchema) listDataSchema.get(0)).getPort();
			principle = ((ListDataSchema) listDataSchema.get(0)).getDomain();
			keytab = ((ListDataSchema) listDataSchema.get(0)).getKeytab();
			krb5conf = ((ListDataSchema) listDataSchema.get(0)).getKrb5conf();
			ListDataSource listDataSource = new ListDataSource();
			listDataSource.setName(dataTemplateName);
			listDataSource.setDescription(description);
			listDataSource.setDataLocation(datalocation);
			listDataSource.setDataSource("SQL");
			listDataSource.setCreatedAt(new Date());
			listDataSource.setCreatedBy(idUser);
			listDataSource.setIdDataSchema(Long.valueOf(idDataSchema));

			Long rows = Long.valueOf(0L);
			if ((rowsId != null) && (!rowsId.equals("")))
				rows = Long.valueOf(Long.parseLong(rowsId));
			System.out.println("rows=" + rows);
			listDataSource.setGarbageRows(rows);

			listDataAccess listdataAccess = new listDataAccess();
			listdataAccess.setHostName(internalIP);
			listdataAccess.setPortName(port);
			listdataAccess.setUserName(userlogin);
			listdataAccess.setPwd(password);
			listdataAccess.setSchemaName(databaseAndSchema);

			listdataAccess.setQueryString(queryTextbox);
			listdataAccess.setFolderName(tableName);
			listdataAccess.setIdDataSchema(idDataSchema);
			listdataAccess.setWhereCondition(whereCondition);
			listdataAccess.setIncrementalType(incrementalType);
			listdataAccess.setQuery(queryCheckbox);
			listdataAccess.setDateFormat(dateFormat);
			listdataAccess.setSliceStart(sliceStart);
			listdataAccess.setSliceEnd(sliceEnd);
			listdataAccess.setFileHeader(headerId);
			/*
			 * Map readTablesFromHive =
			 * hiveKerberosConnection.readTablesFromHiveKerberos(internalIP,
			 * databaseAndSchema, userlogin, password, tableName,
			 * port,principle,keytab,krb5conf);
			 * if(readTablesFromHive.isEmpty()){
			 * modelAndView.addObject("message",
			 * "Unable to create Data Template, Please check your configuration and try again."
			 * ); }else{
			 * 
			 * }
			 */
			Map readTablesFromHive = new HashMap();
			List<String> primarykeyCols = new ArrayList<String>();
			boolean isTemplatesCreationSuccessful = true;
			boolean isValidationsCreationSuccessful = true;
			Long idData = 0L;
			try {
				idData = DataTemplateAddNewDAO.addintolistdatasource(listDataSource, readTablesFromHive, listdataAccess,
						primarykeyCols, null, selected_list);
			} catch (Exception e) {
				isTemplatesCreationSuccessful = false;
			}
			System.out.println("idData=" + idData);
			try {
				System.out.println("java -jar " + System.getenv("DATABUCK_HOME") + "/hive-kerberos-dt.jar " + idData);
				Process proc = Runtime.getRuntime()
						.exec("java -jar " + System.getenv("DATABUCK_HOME") + "/hive-kerberos-dt.jar " + idData);
				proc.waitFor();

				InputStream in = proc.getInputStream();
				InputStream err = proc.getErrorStream();

				byte[] b = new byte[in.available()];
				in.read(b, 0, b.length);
				System.out.println(new String(b));

				byte[] c = new byte[err.available()];
				err.read(c, 0, c.length);
				System.out.println(new String(c));
				String validationCheckName = dataTemplateName + "_" + tableName + "_Validation";
				Long idApp = 0L;
				try {
					idApp = createValidationCheck(validationCheckName, idData, idUser, lstDataDefinition);
				} catch (Exception e) {
					isValidationsCreationSuccessful = false;
				}
				if (isTemplatesCreationSuccessful && isValidationsCreationSuccessful) {
					returnMsgsMap.put("message", "Data Template and validation Check created Successfully.");
				} else if (isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
					returnMsgsMap.put("message",
							"Data Template created successfully but problem while creating Validation Check.");
				} else if (!isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
					returnMsgsMap.put("message", " Problem while creating Data Template and Validation Check.");
				}
			} catch (Exception e) {
				returnMsgsMap.put("errorMessage",
						"Unable to create Data Template, Please check your configuration and try again.");
			}

			return returnMsgsMap;
		} else if (datalocation.equals("File Management")) {
			/*
			 * HostURI = request.getParameter("hostName"); //
			 * System.out.println("HostURI"+HostURI); folder =
			 * request.getParameter("schemaName"); //
			 * System.out.println("folder="+folder);
			 * 
			 * String DataFormat = request.getParameter("source"); //
			 * System.out.println("DataFormat"+DataFormat);
			 * 
			 * userlogin = request.getParameter("userName"); //
			 * System.out.println("userlogin"+userlogin); password =
			 * request.getParameter("pwd"); //
			 * System.out.println("password"+password); schemaName =
			 * request.getParameter("schemaName");
			 */

			ArrayList<String> al = new ArrayList<String>();
			try {
				InputStream inputStream = file.getInputStream();
				BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));

				String line = br.readLine();
				if (line != null) {
					for (String word : line.split(",")) {
						al.add(word);
						// System.out.println(word);
					}
					for (String string : al) {
						// System.out.println(string);
					}
					// System.out.println(al);
				}
			} catch (IOException e) {

				e.printStackTrace();

			}
			ListDataSource listDataSource = new ListDataSource();
			listDataSource.setName(dataTemplateName);
			listDataSource.setDescription(description);
			listDataSource.setDataLocation("File Management");
			listDataSource.setDataSource(dataFormat);
			listDataSource.setCreatedAt(new Date());
			listDataSource.setCreatedBy(idUser);
			listDataSource.setIdDataSchema(0l);
			Long rows = 0l;
			if (!(rowsId == null || rowsId.equals("")))
				rows = Long.parseLong(rowsId);
			System.out.println("rows=" + rows);
			listDataSource.setGarbageRows(rows);

			listDataAccess listdataAccess = new listDataAccess();
			listdataAccess.setHostName(HostURI);
			listdataAccess.setPortName("");
			listdataAccess.setUserName(userlogin);
			listdataAccess.setPwd(password);
			listdataAccess.setSchemaName("");
			listdataAccess.setFolderName(folder);
			listdataAccess.setIdDataSchema(0);
			listdataAccess.setFileHeader(headerId);
			boolean isTemplatesCreationSuccessful = true;
			boolean isValidationsCreationSuccessful = true;
			Long idData = 0L;
			try {
				idData = DataTemplateAddNewDAO.insertIntoListDataSources(listDataSource);
			} catch (Exception e) {
				isTemplatesCreationSuccessful = false;
			}
			System.out.println("idData=" + idData);
			listdataAccess.setIdData(idData);
			DataTemplateAddNewDAO.insertIntoListDataAccess(listdataAccess);
			DataTemplateAddNewDAO.insertIntoListDataFiles(idData, al);
			String validationCheckName = dataTemplateName + "_" + tableName + "_Validation";
			Long idApp = 0L;
			try {
				idApp = createValidationCheck(validationCheckName, idData, idUser, lstDataDefinition);
			} catch (Exception e) {
				isValidationsCreationSuccessful = false;
			}
			if (isTemplatesCreationSuccessful && isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", "Data Templates and Validation Checks created Successfully.");
			} else if (isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message",
						"Data Templates created successfully but problem while creating few Validation Checks.");
			} else if (!isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
				returnMsgsMap.put("message", "Problem while creating Data Templates and Validation Checks.");
			}
			return returnMsgsMap;
		} else if (datalocation.equals("File System") || datalocation.equals("HDFS") || datalocation.equals("S3")
				|| datalocation.equals("MapR FS") || datalocation.equals("MapR DB") || datalocation.equals("Kafka")) {

			// System.out.println(" We are in Kafka");

			List<String> datatypes = new ArrayList<String>();
			datatypes.add("int");
			datatypes.add("char");
			datatypes.add("long");
			datatypes.add("float");
			datatypes.add("double");
			datatypes.add("varchar");
			datatypes.add("text");
			datatypes.add("string");
			datatypes.add("date");
			datatypes.add("number");
			Map<String, String> hm = new LinkedHashMap<String, String>();

			String numberFormat = appDbConnectionProperties.getProperty("number.Format");
			String numberRegex = "";
			if (numberFormat.equalsIgnoreCase("US")) {
				numberRegex = appDbConnectionProperties.getProperty("match.numberRegexUS").trim();
			} else {
				numberRegex = appDbConnectionProperties.getProperty("match.numberRegexEU").trim();
			}
			String stringRegex = appDbConnectionProperties.getProperty("match.string").trim();
			String[] dateRegex = appDbConnectionProperties.getProperty("match.dateRegexFormate").split(",");

			ArrayList<String> dateRegexFormate = new ArrayList<String>();
			for (int regIdx = 0; regIdx < dateRegex.length; regIdx++) {
				dateRegexFormate.add(dateRegex[regIdx].trim());
			}

			
			try {
				InputStream inputStream = file.getInputStream();
				BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));

				String line = br.readLine();
				String dataLine = br.readLine();

				if (line != null) {

					boolean isJSON = false;
					String[] dataValues = {};
					String[] headerValues = {};
					Map<String, String> jsonHM = new HashMap<String, String>();

					String splitBy = "\\,";
					if (dataFormat.equalsIgnoreCase("psv")) {
						splitBy = "\\|";
					} else if (dataFormat.equalsIgnoreCase("tsv")) {
						splitBy = "\\t";
					} else if (dataFormat.equalsIgnoreCase("json")) {
						isJSON = true;

						jsonHM = dataAlgorithService.getTableColumnsForFile(file);

					} else {
						splitBy = "\\,";
					}


					
					if (!isJSON) {
						// This needs to be sorted
						if (line != null && dataLine != null) {
							dataValues = dataLine.split(splitBy);
							headerValues = line.split(splitBy);
						}

						// if dataline is not provided, initiallize to string
						if (line != null && dataLine == null) {
							headerValues = line.split(splitBy);
							dataValues = new String[headerValues.length];
							for (int i = 0; i < headerValues.length; i++) {
								dataValues[i] = "";
							}
						}
					} else {

						headerValues = jsonHM.keySet().toArray(new String[jsonHM.keySet().size()]);
						dataValues = jsonHM.values().toArray(new String[jsonHM.keySet().size()]);
					}

					System.out.println(" dataValues " + dataValues);
					System.out.println(" headerValues " + headerValues);

					for (int i = 0; i < headerValues.length; i++) {
						String word = headerValues[i];
						String columnName = headerValues[i];
						String dataValue = dataValues[i];
						String columnType = "String";

						int first = word.lastIndexOf("(");
						int last = word.lastIndexOf(")");

						boolean isColumnTypePresent = false;
						if (first != -1 && last != -1) {
							isColumnTypePresent = true;
							if (datatypes.contains(word.substring(first + 1, last).trim().toLowerCase())) {
								columnType = word.substring(first + 1, last).trim();
								columnName = word.substring(0, first);
							} else {
								columnName = word.substring(0, last);
							}
						} else {
							columnName = word;
						}

						// Determine column type based on first row. This will
						// be done only if
						// column type is not already specified in csv.
						if (!isColumnTypePresent) {
							boolean isColumnTypeIdentified = false;
							if (dataValue.matches(numberRegex)) {
								isColumnTypeIdentified = true;
								columnType = "number";
							} else {
								for (int j = 0; j < dateRegexFormate.size(); j++) {
									String regex = dateRegexFormate.get(j).trim();
									if (dataValue.matches(regex) || (dataValue.length() >= 10
											&& dataValue.substring(0, 10).trim().matches(regex))) {
										columnType = "Date";
										isColumnTypeIdentified = true;
									}
								}
							}

							if (!isColumnTypeIdentified) {
								columnType = "varchar";
							}
						}

						columnName = columnName.trim();
						String modifiedColumn = "";
						String[] charArray = columnName.split("(?!^)");
						for (int j = 0; j < charArray.length; j++) {
							if (charArray[j].matches("[' 'a-zA-Z0-9_.+-]")) {

								modifiedColumn = modifiedColumn + charArray[j];
							}
						}

						modifiedColumn = modifiedColumn.replace("-", "_");
						modifiedColumn = modifiedColumn.replace(".", "_");
						modifiedColumn = modifiedColumn.replace(" ", "_");

						System.out.println("columnName=" + modifiedColumn);
						System.out.println("columnType=" + columnType);
						hm.put(modifiedColumn, columnType);
					}

					for (Map.Entry m : hm.entrySet()) {
						System.out.println(m.getKey());
						System.out.println(m.getValue());
					}
				}
			} catch (IOException e1) {
				e1.printStackTrace();
			}

			ListDataSource listDataSource = new ListDataSource();
			listDataSource.setName(dataTemplateName);
			listDataSource.setDescription(description);
			if (datalocation.equals("File System"))
				listDataSource.setDataLocation("FILESYSTEM");
			else
				listDataSource.setDataLocation(datalocation);
			listDataSource.setDataSource(dataFormat);
			listDataSource.setCreatedAt(new Date());
			listDataSource.setCreatedBy(idUser);
			listDataSource.setIdDataSchema(Long.valueOf(idDataSchema));

			// changes for Kafka
			// listDataSource.setSrcBrokerUri(src_brokerUri);
			// listDataSource.setSrcTopicName(src_topicName);
			listDataSource.setTarBrokerUri(tar_brokerUri);
			listDataSource.setTarTopicName(tar_topicName);

			System.out.println("listDataSource =>" + listDataSource);

			
			Long rows = Long.valueOf(0L);
			if ((rowsId != null) && (!rowsId.equals("")))
				rows = Long.valueOf(Long.parseLong(rowsId));
			System.out.println("rows=" + rows);
			listDataSource.setGarbageRows(rows);

			listDataAccess listdataAccess = new listDataAccess();
			listdataAccess.setHostName(HostURI);
			listdataAccess.setPortName("");
			listdataAccess.setUserName(userlogin);
			listdataAccess.setPwd(password);
			listdataAccess.setSchemaName("");
			listdataAccess.setFolderName(folder);
			listdataAccess.setIdDataSchema(0);
			listdataAccess.setFileHeader(headerId);

			System.out.println("listdataAccess =>" + listdataAccess);

			List<String> primarykeyCols = new ArrayList<String>();
			boolean isTemplatesCreationSuccessful = true;
			boolean isValidationsCreationSuccessful = true;

			System.out.println("hm=========>" + hm);

			if (hm.isEmpty()) {

				System.out.println("hm in if =======>");

				returnMsgsMap.put("errorMessage",
						"Unable to create Data Template, Please check your configuration and try again.");
			} else {
				Long idData = 0L;
				if((datalocation.trim().equalsIgnoreCase("S3") || datalocation.trim().equalsIgnoreCase("File System") || datalocation.trim().equalsIgnoreCase("HDFS")) ){
					ModelAndView model = new ModelAndView();
					dataAlgorithService.populateTableAnalysisDataForS3(session, 
							 datalocation, hm, file, HostURI, folder, userlogin,password,dataFormat);
				}
				List<ListDataDefinition> listDataDefinition = null;
				mapDataDefinition = (Map) session.getAttribute("dataDefinition");
				try {
					listDataDefinition = (List) mapDataDefinition.get(folder);
					System.out.println(listDataDefinition);
				} catch (Exception e) {
					// TODO: handle exception
				}
				try {
					idData = DataTemplateAddNewDAO.addintolistdatasource(listDataSource, hm, listdataAccess,
							primarykeyCols, listDataDefinition, selected_list);
				} catch (Exception e) {
					e.printStackTrace();
					isTemplatesCreationSuccessful = false;
				}
				String validationCheckName = dataTemplateName + "_" + tableName + "_Validation";
				Long idApp = 0L;
				try {
					idApp = createValidationCheck(validationCheckName, idData, idUser, listDataDefinition);
				} catch (Exception e) {
					isValidationsCreationSuccessful = false;
				}
				if (isTemplatesCreationSuccessful && isValidationsCreationSuccessful) {
					returnMsgsMap.put("message", "Data Templates and Validaton Checks created Successfully.");
				} else if (isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
					returnMsgsMap.put("message",
							"Data Templates created successfully but problem while creating few Validaton Checks.");
				} else if (!isTemplatesCreationSuccessful && !isValidationsCreationSuccessful) {
					returnMsgsMap.put("message", " Problem while creating Data Templates and Validaton Checks.");
				}
			}

		}

		System.out.println("Create() returnMsgsMap-->" + returnMsgsMap);
		return returnMsgsMap;

	}

	public Long createValidationCheck(String validationCheckName, Long idData, Long idUser,
			List<ListDataDefinition> lstDataDefinition) throws Exception {

		long idApp = -99;

		try {
			idApp = validationcheckdao.insertintolistapplications(validationCheckName, "A default validation check",
					"Data Forensics", idData, idUser, 0.0, "N", null, null);
			System.out.println("validation idApp is " + idApp + "" + idData);
			int updateApplicationNameWithIdApp = validationcheckdao.updateApplicationNameWithIdApp(validationCheckName,
					idApp);
		} catch (Exception e) {
			System.out.println("Exception encountered while creating validation check.");
			e.printStackTrace();
			throw e;
		}

		// Create an object of type listApplications by using default values
		// from listdatadefinition
		ListApplications listApplications = new ListApplications();
		System.out.println("validation1 idApp is " + idApp);
		listApplications.setIdApp(idApp);
		listApplications.setColOrderValidation("N");
		listApplications.setFileNameValidation("N");
		listApplications.setEntityColumn("N");
		listApplications.setNumericalStatCheck("N");
		listApplications.setStringStatCheck("N");
		listApplications.setDataDriftCheck("N");
		listApplications.setRecordAnomalyCheck("N");
		listApplications.setNonNullCheck("N");
		listApplications.setDupRowIdentity("N");
		listApplications.setDupRowIdentityThreshold(0.0);
		listApplications.setDupRowAll("N");
		listApplications.setDupRowAllThreshold(0.0);
		listApplications.setDuplicateCheck("N");
		listApplications.setUpdateFrequency("Never");
		listApplications.setRecordCountAnomaly("Y");
		listApplications.setKeyGroupRecordCountAnomaly("N");
		listApplications.setkeyBasedRecordCountAnomaly("N");
		listApplications.setApplyDerivedColumns("N");
		listApplications.setApplyRules("N");
		listApplications.setRecordCountAnomalyThreshold(0.0);
		listApplications.setNumericalStatThreshold(3.0);
		listApplications.setStringStatThreshold(0.0);
		listApplications.setDataDriftThreshold(0.0);
		listApplications.setNonNullThreshold(0.0);
		listApplications.setTimeSeries("None");
		listApplications.setOutOfNormCheck("N");
		listApplications.setGroupEquality("N");
		listApplications.setGroupEqualityThreshold(0.0);
		listApplications.setBuildHistoricFingerPrint("N");
		listApplications.setIncrementalMatching("N");
		listApplications.setTimelinessKeyChk("N");
		listApplications.setDefaultCheck("N");
		listApplications.setlengthCheck("N");
		listApplications.setdGroupNullCheck("N");
		listApplications.setdGroupDateRuleCheck("N");

		if (lstDataDefinition != null) {
			for (Iterator lstIterator = lstDataDefinition.iterator(); lstIterator.hasNext();) {
				ListDataDefinition dataDefinition = (ListDataDefinition) lstIterator.next();
				if (dataDefinition.getNumericalStat().equalsIgnoreCase("column_name")) {
					listApplications.setNumericalStatCheck("column_name");
					listApplications.setNumericalStatThreshold(dataDefinition.getNumericalThreshold());
				}
				if (dataDefinition.getStringStat().equalsIgnoreCase("column_name")) {
					listApplications.setStringStatCheck("column_name");
					listApplications.setStringStatThreshold(dataDefinition.getStringStatThreshold());
				}
				if (dataDefinition.getDataDrift().equalsIgnoreCase("column_name")) {
					listApplications.setDataDriftCheck("column_name");
					listApplications.setDataDriftThreshold(dataDefinition.getDataDriftThreshold());
				}
				if (dataDefinition.getRecordAnomaly().equalsIgnoreCase("column_name")) {
					listApplications.setRecordAnomalyCheck("column_name");
				}
				if (dataDefinition.getNonNull().equalsIgnoreCase("column_name")) {
					listApplications.setNonNullCheck("column_name");
					listApplications.setNonNullThreshold(dataDefinition.getNullCountThreshold());
				}
				if (dataDefinition.getPrimaryKey().equalsIgnoreCase("column_name")) {
					listApplications.setDupRowIdentity("column_name");
					// listApplications.setDupRowIdentityThreshold(dataDefinition.);
				}
				if (dataDefinition.getDupkey().equalsIgnoreCase("column_name")) {
					listApplications.setDuplicateCheck("column_name");
					listApplications.setDupRowAll("column_name");
					// listApplications.setDupRowAllThreshold(dataDefinition.);
				}
				if (dataDefinition.getDgroup().equalsIgnoreCase("column_name")) {
					listApplications.setRecordCountAnomaly("N");
					listApplications.setkeyBasedRecordCountAnomaly("column_name");
				}
				if (dataDefinition.getDefaultCheck() != null
						&& dataDefinition.getDefaultCheck().equalsIgnoreCase("column_name")) {
					listApplications.setDefaultCheck("column_name");

				}
				if (dataDefinition.getPatternCheck() != null
						&& dataDefinition.getPatternCheck().equalsIgnoreCase("column_name")) {
					listApplications.setPatternCheck("column_name");
				}
				if (dataDefinition.getLengthCheck().equalsIgnoreCase("column_name")) {
					listApplications.setlengthCheck("column_name");
				}
			}
		}

		try {
			validationcheckdao.insertintolistdfsetruleandtranrule(idApp,
					listApplications.getRecordCountAnomalyThreshold(), listApplications.getDuplicateCheck());

			if (listApplications.getHistoricDateFormat() == "") {
				String automaticDateFormat = validationcheckdao.getAutomaticDateFormat(listApplications);
				listApplications.setHistoricDateFormat(automaticDateFormat);
			}
			int updateintolistapplication = validationcheckdao
					.updateintolistapplicationForAjaxRequest(listApplications);
			System.out.println("updateintolistapplication=" + updateintolistapplication);
			System.out.println("datadriftthreshold=" + listApplications.getDataDriftThreshold());

			int updateintolistdatadefinitions = validationcheckdao.updateintolistdatadefinitions(
					listApplications.getIdData(), "N", listApplications.getNonNullThreshold(), "N", "N",
					listApplications.getNumericalStatThreshold(), "N", listApplications.getStringStatThreshold(), "N",
					listApplications.getRecordCountAnomalyThreshold(), listApplications.getDataDriftThreshold(), 0.0);
			System.out.println("updateintolistdatadefinitions=" + updateintolistdatadefinitions);

			int insertintolistdftranrule = validationcheckdao.insertintolistdftranrule(idApp,
					listApplications.getDupRowIdentity(), listApplications.getDupRowIdentityThreshold(),
					listApplications.getDupRowAll(), listApplications.getDupRowAllThreshold());
		} catch (Exception e) {
			System.out.println("Exception encountered while creating validation check.");
			e.printStackTrace();
			throw e;
		}
		return idApp;
	}

	@RequestMapping(value = "/duplicatedatatemplatename", method = RequestMethod.POST)
	public void duplicatedatatemplatename(HttpServletRequest req, HttpServletResponse res, HttpSession session) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				res.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		String dataTemplateName = req.getParameter("val");
		// System.out.println("dataTemplateName=" + dataTemplateName);
		String name = DataTemplateAddNewDAO.duplicatedatatemplatename(dataTemplateName);
		// System.out.println("name=" + name);
		if (name != null) {
			try {
				res.getWriter().println("This Data Template name is in use. Please choose another name.");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	@RequestMapping(value = "/updateDataTemplate", method = RequestMethod.GET)
	public ModelAndView updateDataTemplate(HttpServletRequest req, HttpServletResponse res, HttpSession session) {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				res.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		ModelAndView mav = new ModelAndView("message");
		mav.addObject("currentSection", "Data Template");
		mav.addObject("currentLink", "DTView");
		String dataLocation = req.getParameter("dataLocation");
		String idData = req.getParameter("idData");
		System.out.println("dataLocation:" + dataLocation);

		String idDataSchema = req.getParameter("idDataSchema");

		StringBuffer sb_lds = new StringBuffer(
				"UPDATE listDataSources SET name= '" + req.getParameter("dataset") + "',description='"
						+ req.getParameter("description") + "',dataLocation='" + dataLocation + "',updatedAt=now(), ");

		StringBuffer sb_lda = new StringBuffer("UPDATE listDataAccess SET  ");

		if (dataLocation.equalsIgnoreCase("Oracle RAC") || dataLocation.equalsIgnoreCase("Oracle")
				|| dataLocation.equalsIgnoreCase("ClouderaHive") || dataLocation.equalsIgnoreCase("Hive")
				|| dataLocation.equalsIgnoreCase("Hive Kerberos") || dataLocation.equalsIgnoreCase("MSSQL")
				|| dataLocation.equalsIgnoreCase("MSSQLActiveDirectory") || dataLocation.equalsIgnoreCase("Vertica")
				|| dataLocation.equalsIgnoreCase("Amazon Redshift")) {

			// handle query
			String querycheckboxid = req.getParameter("querycheckboxid");
			if (querycheckboxid != null && querycheckboxid.equalsIgnoreCase("column_name")) {
				String querytextboxid = req.getParameter("querytextboxid");
				sb_lda.append("query='Y',");
				sb_lda.append("queryString=\"" + querytextboxid + "\",");
				sb_lda.append("wherecondition='',");
				sb_lda.append("folderName=\"" + req.getParameter("tableNameid") + "\",");

			} else {
				sb_lda.append("query='N',");
				// handle where condtition
				String whereId = req.getParameter("whereId");
				sb_lda.append("folderName=\"" + req.getParameter("tableNameid") + "\",");
				if (whereId != null && whereId.length() != 0) {
					sb_lda.append("wherecondition=\"" + whereId + "\",");
				} else {
					sb_lda.append("wherecondition='',");
				}
			}

			// handle incremental matching source
			String incrementalSourceId = req.getParameter("incrementalsourceid");
			if (incrementalSourceId != null && incrementalSourceId.equalsIgnoreCase("column_name")) {
				sb_lda.append(" incrementalType='" + req.getParameter("incrementalsourceid") + "',");
				sb_lda.append(" dateFormat='" + req.getParameter("dateformatid") + "',");
				sb_lda.append(" sliceStart='" + req.getParameter("slicestartid") + "',");
				sb_lda.append(" sliceEnd='" + req.getParameter("sliceendid") + "',");
			} else {
				sb_lda.append(" incrementalType='N' ,");
				sb_lda.append(" dateFormat='',");
				sb_lda.append(" sliceStart='',");
				sb_lda.append(" sliceEnd='',");
			}
		} else if (dataLocation.equalsIgnoreCase("FILESYSTEM") || dataLocation.equalsIgnoreCase("HDFS")
				|| dataLocation.equalsIgnoreCase("MapR FS") || dataLocation.equalsIgnoreCase("MapR DB")
				|| dataLocation.equalsIgnoreCase("S3")) {
			sb_lds.append(" ignoreRowsCount=" + req.getParameter("rowsId"));
			sb_lda.append(" hostName='" + req.getParameter("hostName") + "', ");
			sb_lda.append(" folderName='" + req.getParameter("schemaName") + "', ");
			sb_lda.append(" userName='" + req.getParameter("userName") + "' ,");
			StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();
			encryptor.setPassword("7rmaHWOxLPfjSPz4bHA6");
			String encryptedText = encryptor.encrypt(req.getParameter("pwd"));
			sb_lda.append(" pwd='" + encryptedText + "',");

		} else if (dataLocation.equalsIgnoreCase("File Management")) {
			sb_lda.append(" hostName='" + req.getParameter("hostName") + "', ");
			sb_lda.append(" folderName='" + req.getParameter("schemaName") + "', ");
			sb_lda.append(" userName='" + req.getParameter("userName") + "' ,");

			StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();
			encryptor.setPassword("7rmaHWOxLPfjSPz4bHA6");
			String encryptedText = encryptor.encrypt(req.getParameter("pwd"));
			sb_lda.append(" pwd='" + encryptedText + "' ,");

		}

		String sb_lds_str = sb_lds.toString().trim();
		sb_lds_str = sb_lds_str.substring(0, sb_lds_str.lastIndexOf(","));

		String sb_lda_str = sb_lda.toString().trim();
		sb_lda_str = sb_lda_str.substring(0, sb_lda_str.lastIndexOf(","));

		sb_lda_str = sb_lda_str.concat(" WHERE idData=" + idData + "");
		sb_lds_str = sb_lds_str.concat(" WHERE idData=" + idData + "");

		System.out.println("sb_lds_str:" + sb_lds_str);
		System.out.println("sb_lda_str:" + sb_lda_str);
		boolean updateStatus = listdatasourcedao.updateDataTemplate(sb_lds_str, sb_lda_str);
		if (updateStatus) {
			mav.addObject("msg", "Data Template Customized Successfully");
		} else {
			mav.addObject("msg", "Unable to edit Data Template, Please check your configuration and try again.");
		}
		return mav;
	}

	@RequestMapping(value = "/populateTables", method = RequestMethod.GET)
	public @ResponseBody List populateTables(ModelAndView model, HttpSession session, HttpServletRequest request,
			HttpServletResponse response, @RequestParam Long schemaId, @RequestParam String locationName)
			throws IOException, URISyntaxException {
		Object user = session.getAttribute("user");
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		String selSchemaId = request.getParameter("schemaId");
		String selLocationName = request.getParameter("locationName");
		System.out.println("Schema id:" + selSchemaId);
		System.out.println("Location name:" + selLocationName);

		List<String> tableListFrom = getTableListForSchema(selSchemaId, selLocationName);

		return tableListFrom;

	}

	public List getTableListForSchema(String selSchemaId, String selLocationName) {

		System.out.println("Schema id:" + selSchemaId);
		System.out.println("Location name:" + selLocationName);

		List tableListFrom = null;
		List<ListDataSchema> listDataSchema = DataTemplateAddNewDAO.getListDataSchema(Long.parseLong(selSchemaId));
		String hostURI = listDataSchema.get(0).getIpAddress();
		String database = listDataSchema.get(0).getDatabaseSchema();
		String userlogin = listDataSchema.get(0).getUsername();
		String password = listDataSchema.get(0).getPassword();
		String port = listDataSchema.get(0).getPort();
		String domain = listDataSchema.get(0).getDomain();
		String serviceName = listDataSchema.get(0).getKeytab();
		String sslEnb = listDataSchema.get(0).getSslEnb();
		String sslTrustStorePath = listDataSchema.get(0).getsslTrustStorePath();
		String trustPassword = listDataSchema.get(0).gettrustPassword();
		String principle = listDataSchema.get(0).getDomain();
		String keytab = listDataSchema.get(0).getKeytab();
		String krb5conf = listDataSchema.get(0).getKrb5conf();
		String gatewayPath =  listDataSchema.get(0).getGatewayPath();
		String jksPath = listDataSchema.get(0).getJksPath();
		
		if (selLocationName.equals("Oracle")) {
			tableListFrom = oracleconnection.getListOfTableNamesFromOracle(hostURI, userlogin, password, port);
			// System.out.println("Table name:"+tableListFromOracle.get(0));
		}if (selLocationName.equals("Postgres")) {
			tableListFrom = postgresConnection.getListOfTableNamesFromPostgres(hostURI, userlogin, password, port, database);
			// System.out.println("Table name:"+tableListFromOracle.get(0));
		} else if (selLocationName.equals("MSSQL")) {
			tableListFrom = mSSQLConnection.getListOfTableNamesFromMsSql(hostURI, userlogin, password, port, database);
		} else if (selLocationName.equals("Teradata")) {
			tableListFrom = teradataConnection.getListOfTableNamesFromTeradata(hostURI, userlogin, password, port, database);
		} 
		else if (selLocationName.equals("Vertica")) {
			tableListFrom = verticaconnection.getListOfTableNamesFromVertica(hostURI, userlogin, password, port,
					database);
		} else if (selLocationName.equalsIgnoreCase("MSSQLActiveDirectory")) {
			tableListFrom = msSqlActiveDirectoryConnectionObject.getListOfTableNamesFromMsSqlActiveDirectory(hostURI,
					userlogin, password, port, domain, database);
		} else if (selLocationName.equalsIgnoreCase("Amazon Redshift")) {
			tableListFrom = amazonRedshiftConnection.getListOfTableNamesFromAmazonRedshift(hostURI, userlogin, password,
					port, domain, database);
		} else if (selLocationName.equalsIgnoreCase("Cassandra")) {
			tableListFrom = cassandraconnection.getListOfTableNamesFromCassandra(hostURI, userlogin, password, port,
					database, domain);
		} else if (selLocationName.equalsIgnoreCase("Oracle RAC")) {
			tableListFrom = OracleRACConnection.getListOfTableNamesFromOracleRAC(hostURI, userlogin, password, port,
					database, domain, serviceName);
		} else if (selLocationName.equalsIgnoreCase("Hive") || selLocationName.equalsIgnoreCase("Hive Kerberos")
				|| selLocationName.equalsIgnoreCase("ClouderaHive")) {
			boolean isKerberosEnabled = selLocationName.equals("Hive Kerberos") ? true : false;
			tableListFrom = hiveconnection.getListOfTableNamesFromHive(hostURI, database, userlogin, password, port,
					sslEnb, sslTrustStorePath, trustPassword, isKerberosEnabled, keytab, krb5conf, principle);
		}else if (selLocationName.equalsIgnoreCase("Hive knox")) {
			tableListFrom = hiveconnection.getListOfTableNamesFromHiveKnox(hostURI, database, userlogin, password, port,
					 jksPath,gatewayPath);
		}
		// else if (selLocationName.equalsIgnoreCase("C_Hive")) {
			//tableListFrom = hiveconnection.getListOfTableNamesFromHive(hostURI, database, userlogin, password, port);
		// }
		return tableListFrom;
	}

	@RequestMapping(value = "/populateTableAnalysisData", method = RequestMethod.GET)
	public @ResponseBody Map populateTableAnalysisData(ModelAndView model, HttpSession session,
			HttpServletRequest request, HttpServletResponse response, @RequestParam Long idDataSchema,
			@RequestParam String dataLocation, @RequestParam String tableName, @RequestParam String queryString,
			@RequestParam String isQuery) {

		Map finalMap = new HashMap();
		List<String> primaryKeys = new ArrayList<String>();

		finalMap = analyseDataForTable(idDataSchema, dataLocation, tableName, queryString, isQuery, session);

		return finalMap;
	}

	public Map analyseDataForTable(@RequestParam Long idDataSchema, @RequestParam String dataLocation,
			@RequestParam String tableName, String queryString, String isQuery, HttpSession session) {

		Map finalMap = new HashMap();
		List<String> primaryKeys = new ArrayList<String>();

		/*
		 * String selSchemaId = request.getParameter("schemaId"); String
		 * selLocationName = request.getParameter("locationName"); String
		 * selTableName = request.getParameter("tableName");
		 */
		// long id = Long.parseLong(idDataSchema);
		ResultSet resultSetFromDb = null;
		// ResultSet resultSetFromDb1 = null;
		List<ListDataSchema> listDataSchema = DataTemplateAddNewDAO.getListDataSchema(idDataSchema);
		String hostURI = listDataSchema.get(0).getIpAddress();
		String databaseSchema = listDataSchema.get(0).getDatabaseSchema();
		String userlogin = listDataSchema.get(0).getUsername();
		String password = listDataSchema.get(0).getPassword();
		String portName = listDataSchema.get(0).getPort();
		String domain = listDataSchema.get(0).getDomain();
		String serviceName = listDataSchema.get(0).getKeytab();
		String sslEnb = listDataSchema.get(0).getSslEnb();
		String sslTrustStorePath = listDataSchema.get(0).getsslTrustStorePath();
		String trustPassword = listDataSchema.get(0).gettrustPassword();
		String principle = listDataSchema.get(0).getDomain();
		String keytab = listDataSchema.get(0).getKeytab();
		String krb5conf = listDataSchema.get(0).getKrb5conf();

		if (dataLocation.equalsIgnoreCase("Oracle")) {
			try {
				if (isQuery != null && isQuery.equalsIgnoreCase("column_name")) {
					resultSetFromDb = oracleconnection.getQueryResultsFromOracle(hostURI, userlogin, password, portName,
							queryString);
					tableName = queryString;
				} else {
					resultSetFromDb = oracleconnection.getTableDataFromOracle(hostURI, userlogin, password, portName,
							tableName);
					primaryKeys = oracleconnection.readPrimaryKeyColumnsFromOracle(hostURI, databaseSchema, userlogin,
							password, tableName, portName);
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (dataLocation.equalsIgnoreCase("Postgres")) {
			try {
				resultSetFromDb = postgresConnection.getTableDataFromPostgres(hostURI, userlogin, password, portName,
						databaseSchema, tableName);
				primaryKeys = postgresConnection.readPrimaryKeyColumnsFromPostgres(hostURI, databaseSchema, userlogin,
						password, databaseSchema, tableName, portName);
			} catch (Exception e) {
			}
		}
		if (dataLocation.equalsIgnoreCase("Vertica")) {
			try {
				resultSetFromDb = verticaconnection.getTableDataFromVertica(hostURI, userlogin, password, portName,
						tableName, databaseSchema);
				primaryKeys = verticaconnection.getPrimaryKeysForVertica(hostURI, databaseSchema, userlogin, password,
						tableName, portName);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (dataLocation.equalsIgnoreCase("MSSQL")) {
			try {
				resultSetFromDb = mSSQLConnection.getTableDataFromMSSQL(hostURI, userlogin, password, portName,
						tableName, databaseSchema);
				primaryKeys = mSSQLConnection.readPrimaryKeysFromMSSQL(hostURI, databaseSchema, userlogin, password,
						tableName, portName);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (dataLocation.equalsIgnoreCase("MSSQLActiveDirectory")) {
			try {
				resultSetFromDb = msSqlActiveDirectoryConnectionObject.getTableDataFromMSSQLActiveDirectory(hostURI,
						userlogin, password, portName, tableName, databaseSchema, domain);
				primaryKeys = msSqlActiveDirectoryConnectionObject.getPrimaryKey(hostURI, databaseSchema, userlogin,
						password, tableName, portName, domain);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (dataLocation.equalsIgnoreCase("Amazon Redshift")) {
			try {
				resultSetFromDb = amazonRedshiftConnection.getTableDataFromAmazonRedshift(hostURI, userlogin, password,
						portName, tableName, databaseSchema, domain);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (dataLocation.equalsIgnoreCase("Cassandra")) {
			try {
				finalMap = cassandraconnection.getTableDataFromCassandra(hostURI, userlogin, password, portName,
						tableName, databaseSchema, domain, session);
				primaryKeys = cassandraconnection.readPrimaryKeysFromCassandra(hostURI, databaseSchema, userlogin,
						password, tableName, portName);
				return finalMap;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (dataLocation.equalsIgnoreCase("Oracle RAC")) {
			try {
				resultSetFromDb = OracleRACConnection.getTableDataFromOracleRAC(hostURI, userlogin, password, portName,
						databaseSchema, domain, serviceName, tableName);
				primaryKeys = OracleRACConnection.readPrimaryKeyColumnsFromOracleRAC(hostURI, databaseSchema, userlogin,
						password, tableName, portName, serviceName);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (dataLocation.equalsIgnoreCase("Hive") || dataLocation.equalsIgnoreCase("Hive Kerberos") || dataLocation.equalsIgnoreCase("ClouderaHive") ) {
			try {
				boolean isKerberosEnabled = dataLocation.equals("Hive Kerberos") ? true : false;

				resultSetFromDb = hiveconnection.getTableDataFromHive(hostURI, userlogin, password, portName, tableName,
						databaseSchema,sslEnb,sslTrustStorePath,trustPassword,isKerberosEnabled,keytab,krb5conf,principle);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (resultSetFromDb != null) {
			try {
				System.out.println("Table has Data? =" + resultSetFromDb.next());
				// resultSetFromDb.beforeFirst();
				finalMap = dataAlgorithService.generateAnalysisData(resultSetFromDb, primaryKeys, session, tableName);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return finalMap;
	}

	
	

	public String generateDataDefinitionDataForS3(Map<String, String> columnMetaData, HttpSession session,
			Map<String, NumericalAnalysisData> numericalData, Map<String, StringAnalysisData> stringData,
			Map<String, DateAnalysisData> dateData, String selTableName) throws Exception {

		List<ListDataDefinition> lstDataDefinition = new ArrayList<ListDataDefinition>();
		Map<String, List<ListDataDefinition>> mapDataDefinition = new HashMap<String, List<ListDataDefinition>>();
		String htmlData = null;
		try {

			// Based on metadata, identify string, date and numerical columns.
			int i = 0;
			Map<String, Double> partitionKeyMap = new HashMap<String, Double>();
			for (Entry<String, String> e : columnMetaData.entrySet()) {
				String columnName = e.getKey();
				String columnType = e.getValue();
				ListDataDefinition dataDefinition = new ListDataDefinition();

				lstDataDefinition.add(dataDefinition);

				dataDefinition.setColumnName(columnName);
				dataDefinition.setDisplayName(columnName);
				dataDefinition.setFormat(columnType);
				dataDefinition.setPartitionBy("N");

				

				dataDefinition.setNumericalThreshold(3.0);
				dataDefinition.setStringStatThreshold(3.0);
				dataDefinition.setNullCountThreshold(3.0);

				dataDefinition.setKBE("Y");
				dataDefinition.setDupkey("N");
				dataDefinition.setMeasurement("N");
				dataDefinition.setBlend("");
				dataDefinition.setIdDataSchema(0);
				dataDefinition.setHashValue("N");
				dataDefinition.setNumericalStat("N");
				dataDefinition.setRecordAnomaly("N");
				dataDefinition.setDgroup("N");
				dataDefinition.setDataDrift("N");
				dataDefinition.setStringStat("N");
				dataDefinition.setTimelinessKey("N");
				dataDefinition.setDefaultCheck("N");
				dataDefinition.setDefaultValues("");
				dataDefinition.setPatternCheck("N");
				dataDefinition.setPatterns("");
				dataDefinition.setbadData("N");

				
				// changes for length check & length val
				dataDefinition.setLengthCheck("N");
				dataDefinition.setLengthValue("0");

				
				dataDefinition.setDateFormat("");
				// dataDefinition.setLengthCheck("N");

				boolean isNumeric = false;
				boolean isString = false;
				boolean isDate = false;
				boolean isPrimaryKey = false;

				boolean isGroupBy = false;
				boolean isNullCheck = false;
				boolean isStringStat = false;

				
				
				if (numericalData.containsKey(columnName)) {
					isNumeric = true;
				} else if (stringData.containsKey(columnName)) {
					isString = true;
				} else if (dateData.containsKey(columnName)) {
					isDate = true;
				}

				if (isDate) {
					dataDefinition.setDupkey("N");
				}
				ArrayList<String> RegexList = null;
				if (isString) {
					dataDefinition.setDupkey("Y");
					StringAnalysisData stringAnalysisData = stringData.get(columnName);
					// List<String> strList = stringDataMap.get(columnName);

					// RegexList = PatternMatchUtility.patternGeneration(strList);

					/*if(RegexList.size() > 0){
						dataDefinition.setPatternCheck("Y");
						//StringJoiner patternsdupSj = new StringJoiner(",");
						StringBuilder sb = new StringBuilder();
						for (String Regexs : RegexList) {
							System.out.println("pattern>"+Regexs);
							sb.append(Regexs);
							sb.append(",");
						
							//patternsdupSj.add(Regexs);
							//dataDefinition.setPatterns(Regexs);
						}
						
						String patternsdupSj = sb.deleteCharAt(sb.length() - 1).toString();
					
						System.out.println("Pattrns:"+patternsdupSj);
						dataDefinition.setPatterns(patternsdupSj);
					}*/
					// 3
					partitionKeyMap.put(columnName, Double.parseDouble(stringAnalysisData.getPercentOfUniqueValues()));
					if (Double.parseDouble(stringAnalysisData.getPercentOfUniqueValues()) < 5) {
						isGroupBy = true;
						// 1
						if (stringData.containsKey(columnName)) {
							dataDefinition.setDataDrift("Y");
						}
					} else if (Double.parseDouble(stringAnalysisData.getPercentOfUniqueValues()) < 20) {
						isStringStat = true;
					} else if (Double.parseDouble(stringAnalysisData.getPercentOfUniqueValues()) == 100) {
						isPrimaryKey = true;
					}
					if (Double.parseDouble(stringAnalysisData.getPercentOfNullValues()) < 25) {
						isNullCheck = true;
					}

					// ---length Check--
					double min = Double.parseDouble(stringAnalysisData.getMinLength());
					double max = Double.parseDouble(stringAnalysisData.getMaxLength());
					if (min == max) {
						dataDefinition.setLengthCheck("Y");
					}
					// -----------------

				
					
				}

				if (isNumeric) {
					NumericalAnalysisData numAnalysisData = numericalData.get(columnName);

					// D2
					if (columnType.equalsIgnoreCase("decimal") || columnType.equalsIgnoreCase("numeric")
							|| columnType.equalsIgnoreCase("REAL") || columnType.equalsIgnoreCase("float")
							|| columnType.equalsIgnoreCase("double")) {
						dataDefinition.setDupkey("Y");
						dataDefinition.setNumericalStat("Y");
						isNumeric = true;
					} else if (Double.parseDouble(numAnalysisData.getPercentOfUniqueValues()) == 100) {
						dataDefinition.setDupkey("N");
					} else {
						dataDefinition.setDupkey("Y");
					}
					if (!(Double.parseDouble(numAnalysisData.getPercentOfUniqueValues()) == 100)
							&& !(Double.parseDouble(numAnalysisData.getPercentOfUniqueValues()) < 20)) {
						dataDefinition.setNumericalStat("Y");
						isNumeric = true;
					} else {
						dataDefinition.setNumericalStat("N");
						isNumeric = true;
					}
					// 3
					partitionKeyMap.put(columnName, Double.parseDouble(numAnalysisData.getPercentOfUniqueValues()));
					if (Double.parseDouble(numAnalysisData.getPercentOfUniqueValues()) <= 5) {
						isGroupBy = true;
					}
					if (Double.parseDouble(numAnalysisData.getPercentOfUniqueValues()) == 100) {
						isPrimaryKey = true;
					}
					// ---length Check--

					if(columnType.equalsIgnoreCase("number") || columnType.equalsIgnoreCase("integer") ||
							columnType.equalsIgnoreCase("int") || columnType.equalsIgnoreCase("bigint")
							|| columnType.equalsIgnoreCase("smallint") || 
							columnType.equalsIgnoreCase("int4")){
						double min = Double.parseDouble(numAnalysisData.getMinLength());
						double max = Double.parseDouble(numAnalysisData.getMaxLength());
						if (min == max) {
							dataDefinition.setLengthCheck("Y");
						}
					}

					// -----------------
				}

				if (isDate) {
					DateAnalysisData dateAnalysisData = dateData.get(columnName);
					if (Double.parseDouble(dateAnalysisData.getPercentOfNullValues()) < 25) {
						isNullCheck = true;
					}
				}

				dataDefinition.setIdColumn(i);
				if (columnName.contains(".")) {
					String[] split = columnName.split("\\.");
					columnName = split[1];
				}
				if (isNumeric && !isGroupBy && !isPrimaryKey) {
					dataDefinition.setRecordAnomaly("Y");
					dataDefinition.setDgroup("N");
					dataDefinition.setDataDrift("N");
				} else if (isNumeric && isGroupBy) {
					dataDefinition.setNumericalStat("N");
					dataDefinition.setRecordAnomaly("N");
					dataDefinition.setDgroup("Y");
				}
				dataDefinition.setIncrementalCol("N");
				/*
				 * if (isDate) { dataDefinition.setIncrementalCol("Y"); }
				 */
				if (isNullCheck) {
					dataDefinition.setNonNull("Y");
				} else {
					dataDefinition.setNonNull("N");
				}

				if ((isNumeric || isString) && isPrimaryKey) {
					dataDefinition.setPrimaryKey("Y");
				} else {
					dataDefinition.setPrimaryKey("N");
				}

				dataDefinition.setRecordAnomalyThreshold(3.0);

				if (isString && isGroupBy) {
					dataDefinition.setDgroup("Y");
					dataDefinition.setDataDrift("Y");
					dataDefinition.setStringStat("N");
				} else if (isString && isStringStat) {
					dataDefinition.setStringStat("Y");
				}
				dataDefinition.setDataDriftThreshold(3.0);
				dataDefinition.setIsMasked("N");
			}

			System.out.println("Data Definition size:" + lstDataDefinition.size());
			// logic PartitionKey
			String partitionColumn = getPartitionValueFromMap(partitionKeyMap);
			for (ListDataDefinition listDataDefinition : lstDataDefinition) {
				if (listDataDefinition.getColumnName().equalsIgnoreCase(partitionColumn)) {
					listDataDefinition.setPartitionBy("Y");
				} else {
					listDataDefinition.setPartitionBy("N");
				}
			}

			dataAlgorithService.refineGroupByColumns(numericalData, stringData, lstDataDefinition);
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("Problem reading table metadata..");
		}

		if (session.getAttribute("dataDefinition") != null) {
			mapDataDefinition = (Map<String, List<ListDataDefinition>>) session.getAttribute("dataDefinition");
		}
		mapDataDefinition.put(selTableName, lstDataDefinition);
		session.setAttribute("dataDefinition", mapDataDefinition);
		Gson gson = new Gson();
		htmlData = gson.toJson(lstDataDefinition);
		return htmlData;
	}

	// condition For PartitionKey
	public static String getMaxValueFromMap(Map<String, Double> partitionKeyMap) {
		HashMap<String, Double> subsegMap = new HashMap<String, Double>();
		String maxGroupBy = null;
		Double maxValue = 0.0;
		for (Map.Entry<String, Double> entry : partitionKeyMap.entrySet()) {
			if (entry.getValue() <= 0.05) {
				subsegMap.put(entry.getKey(), entry.getValue());
			}
		}
		Double maxValue2 = 0.0;
		if (!subsegMap.isEmpty()) {
			for (Map.Entry<String, Double> entry : subsegMap.entrySet()) {
				if (entry.getValue() > maxValue2) {
					maxGroupBy = entry.getKey();
					maxValue2 = entry.getValue();
				}
			}
			return maxGroupBy;
		} else {
			Entry<String, Double> min = null;
			for (Entry<String, Double> entry : partitionKeyMap.entrySet()) {
				if (min == null || min.getValue() > entry.getValue()) {
					min = entry;
				}
			}
			if (min != null) {
				maxValue = min.getValue();
				if (maxValue > 0.05 && maxValue <= 0.3) {
					return min.getKey();
				}
			}
		}
		return maxGroupBy;
	}

	public String generateDataDefinitionData(ResultSet resultSetFromDb, List<String> primaryKeys, HttpSession session,
			Map<String, NumericalAnalysisData> numericalData, Map<String, StringAnalysisData> stringData,
			Map<String, DateAnalysisData> dateData, String selTableName,Map<String, List<String>> stringDataMap) throws Exception {

		List<ListDataDefinition> lstDataDefinition = new ArrayList<ListDataDefinition>();
		Map<String, List<ListDataDefinition>> mapDataDefinition = new HashMap<String, List<ListDataDefinition>>();
		String htmlData = null;
		System.out.println("Inside generateDataDefinitionData");
		try {
			ResultSetMetaData metaData = resultSetFromDb.getMetaData();
			Map<String, Double> partitionKeyMap = new HashMap<String, Double>();
			// Based on metadata, identify string, date and numerical columns.
			for (int i = 1; i <= metaData.getColumnCount(); i++) {
				String columnName = metaData.getColumnName(i);
				String columnType = metaData.getColumnTypeName(i);
				ListDataDefinition dataDefinition = new ListDataDefinition();
				lstDataDefinition.add(dataDefinition);
				if (columnName.contains(".")) {
					String[] split = columnName.split("\\.");
					columnName = split[1];
				}
				// String columnName = metaData.getColumnName(i);
				// String columnType = metaData.getColumnTypeName(i);
				dataDefinition.setColumnName(columnName);
				dataDefinition.setDisplayName(columnName);
				dataDefinition.setFormat(columnType);
				dataDefinition.setPartitionBy("N");

				

				dataDefinition.setNumericalThreshold(3.0);
				dataDefinition.setStringStatThreshold(3.0);
				dataDefinition.setNullCountThreshold(3.0);

				dataDefinition.setKBE("Y");
				dataDefinition.setDupkey("N");
				dataDefinition.setMeasurement("N");
				dataDefinition.setBlend("");
				dataDefinition.setIdDataSchema(0);
				dataDefinition.setHashValue("N");
				dataDefinition.setNumericalStat("N");
				dataDefinition.setRecordAnomaly("N");
				dataDefinition.setDgroup("N");
				dataDefinition.setDataDrift("N");
				dataDefinition.setStringStat("N");
				dataDefinition.setTimelinessKey("N");
				dataDefinition.setDefaultCheck("N");
				dataDefinition.setDefaultValues("");
				dataDefinition.setPatternCheck("N");
				dataDefinition.setPatterns("");
				dataDefinition.setbadData("N");

				
				// changes for length check & length val
				dataDefinition.setLengthCheck("N");
				dataDefinition.setLengthValue("0");

				
				dataDefinition.setDateFormat("");
				// dataDefinition.setLengthCheck("N");

				boolean isNumeric = false;
				boolean isString = false;
				boolean isDate = false;
				boolean isPrimaryKey = false;

				boolean isGroupBy = false;
				boolean isNullCheck = false;
				boolean isStringStat = false;

				
				
				if (numericalData.containsKey(columnName)) {
					isNumeric = true;
				} else if (stringData.containsKey(columnName)) {
					isString = true;
				} else if (dateData.containsKey(columnName)) {
					isDate = true;
				}

				if (primaryKeys.contains(columnName)) {
					isPrimaryKey = true;
				}
				if (isDate) {
					dataDefinition.setDupkey("N");
				}
				ArrayList<String> RegexList = null;
				if (isString) {
					dataDefinition.setDupkey("Y");
					StringAnalysisData stringAnalysisData = stringData.get(columnName);
					// List<String> strList = stringDataMap.get(columnName);

					// RegexList = PatternMatchUtility.patternGeneration(strList);

					/*if(RegexList.size() > 0){
						dataDefinition.setPatternCheck("Y");
						//StringJoiner patternsdupSj = new StringJoiner(",");
						StringBuilder sb = new StringBuilder();
						for (String Regexs : RegexList) {
							System.out.println("pattern>"+Regexs);
							sb.append(Regexs);
							sb.append(",");
						
							//patternsdupSj.add(Regexs);
							//dataDefinition.setPatterns(Regexs);
						}
						
						String patternsdupSj = sb.deleteCharAt(sb.length() - 1).toString();
					
						System.out.println("Pattrns:"+patternsdupSj);
						dataDefinition.setPatterns(patternsdupSj);
					}*/
					// 3
					partitionKeyMap.put(columnName, Double.parseDouble(stringAnalysisData.getPercentOfUniqueValues()));
					if (Double.parseDouble(stringAnalysisData.getPercentOfUniqueValues()) < 5) {
						isGroupBy = true;
						// 1
						if (stringData.containsKey(columnName)) {
							dataDefinition.setDataDrift("Y");
						}
					} else if (Double.parseDouble(stringAnalysisData.getPercentOfUniqueValues()) < 20) {
						isStringStat = true;
					} else if (Double.parseDouble(stringAnalysisData.getPercentOfUniqueValues()) == 100) {
						isPrimaryKey = true;
					}
					if (Double.parseDouble(stringAnalysisData.getPercentOfNullValues()) < 25) {
						isNullCheck = true;
					}

					// ---length Check--
					double min = Double.parseDouble(stringAnalysisData.getMinLength());
					double max = Double.parseDouble(stringAnalysisData.getMaxLength());
					if (min == max) {
						dataDefinition.setLengthCheck("Y");
					}
					// -----------------

				
					
				}

				if (isNumeric) {
					NumericalAnalysisData numAnalysisData = numericalData.get(columnName);

					// D2
					if (columnType.equalsIgnoreCase("decimal") || columnType.equalsIgnoreCase("numeric")
							|| columnType.equalsIgnoreCase("REAL") || columnType.equalsIgnoreCase("float")
							|| columnType.equalsIgnoreCase("double")) {
						dataDefinition.setDupkey("Y");
						dataDefinition.setNumericalStat("Y");
						isNumeric = true;
					} else if (Double.parseDouble(numAnalysisData.getPercentOfUniqueValues()) == 100) {
						dataDefinition.setDupkey("N");
					} else {
						dataDefinition.setDupkey("Y");
					}
					if (!(Double.parseDouble(numAnalysisData.getPercentOfUniqueValues()) == 100)
							&& !(Double.parseDouble(numAnalysisData.getPercentOfUniqueValues()) < 20)) {
						dataDefinition.setNumericalStat("Y");
						isNumeric = true;
					} else {
						dataDefinition.setNumericalStat("N");
						isNumeric = true;
					}
					// 3
					partitionKeyMap.put(columnName, Double.parseDouble(numAnalysisData.getPercentOfUniqueValues()));
					if (Double.parseDouble(numAnalysisData.getPercentOfUniqueValues()) <= 5) {
						isGroupBy = true;
					}
					if (Double.parseDouble(numAnalysisData.getPercentOfUniqueValues()) == 100) {
						isPrimaryKey = true;
					}
					// ---length Check--

					if(columnType.equalsIgnoreCase("number") || columnType.equalsIgnoreCase("integer") ||
							columnType.equalsIgnoreCase("int") || columnType.equalsIgnoreCase("bigint")
							|| columnType.equalsIgnoreCase("smallint") || 
							columnType.equalsIgnoreCase("int4")){
						double min = Double.parseDouble(numAnalysisData.getMinLength());
						double max = Double.parseDouble(numAnalysisData.getMaxLength());
						if (min == max) {
							dataDefinition.setLengthCheck("Y");
						}
					}

					// -----------------
				}

				if (isDate) {
					DateAnalysisData dateAnalysisData = dateData.get(columnName);
					if (Double.parseDouble(dateAnalysisData.getPercentOfNullValues()) < 25) {
						isNullCheck = true;
					}
				}

				dataDefinition.setIdColumn(i);
				if (columnName.contains(".")) {
					String[] split = columnName.split("\\.");
					columnName = split[1];
				}
				if (isNumeric && !isGroupBy && !isPrimaryKey) {
					dataDefinition.setRecordAnomaly("Y");
					dataDefinition.setDgroup("N");
					dataDefinition.setDataDrift("N");
				} else if (isNumeric && isGroupBy) {
					dataDefinition.setNumericalStat("N");
					dataDefinition.setRecordAnomaly("N");
					dataDefinition.setDgroup("Y");
				}
				dataDefinition.setIncrementalCol("N");
				/*
				 * if (isDate) { dataDefinition.setIncrementalCol("Y"); }
				 */
				if (isNullCheck) {
					dataDefinition.setNonNull("Y");
				} else {
					dataDefinition.setNonNull("N");
				}

				if ((isNumeric || isString) && isPrimaryKey) {
					dataDefinition.setPrimaryKey("Y");
				} else {
					dataDefinition.setPrimaryKey("N");
				}

				dataDefinition.setRecordAnomalyThreshold(3.0);

				if (isString && isGroupBy) {
					dataDefinition.setDgroup("Y");
					dataDefinition.setDataDrift("Y");
					dataDefinition.setStringStat("N");
				} else if (isString && isStringStat) {
					dataDefinition.setStringStat("Y");
				}
				dataDefinition.setDataDriftThreshold(3.0);
				dataDefinition.setIsMasked("N");
			}

			System.out.println("Data Definition size:" + lstDataDefinition.size());
			// logic PartitionKey
			String partitionColumn = getPartitionValueFromMap(partitionKeyMap);
			for (ListDataDefinition listDataDefinition : lstDataDefinition) {
				if (listDataDefinition.getColumnName().equalsIgnoreCase(partitionColumn)) {
					listDataDefinition.setPartitionBy("Y");
				} else {
					listDataDefinition.setPartitionBy("N");
				}
			}

		} catch (SQLException e) {
			throw new Exception("Problem reading table metadata..");
		}

		dataAlgorithService.refineGroupByColumns(numericalData, stringData, lstDataDefinition);

		if (session.getAttribute("dataDefinition") != null) {
			mapDataDefinition = (Map<String, List<ListDataDefinition>>) session.getAttribute("dataDefinition");
		}
		mapDataDefinition.put(selTableName, lstDataDefinition);
		session.setAttribute("dataDefinition", mapDataDefinition);
		Gson gson = new Gson();
		htmlData = gson.toJson(lstDataDefinition);
		System.out.println("Generated data definition:" + htmlData);
		return htmlData;
	}

	// condition For PartitionKey
	public static String getPartitionValueFromMap(Map<String, Double> partitionKeyMap) {
		HashMap<String, Double> subsegMap = new HashMap<String, Double>();
		String maxGroupBy = null;
		Double minValue = 0.0;
		for (Map.Entry<String, Double> entry : partitionKeyMap.entrySet()) {
			if (entry.getValue() <= 5) {
				subsegMap.put(entry.getKey(), entry.getValue());
			}
		}
		Double maxValue2 = 0.0;
		if (!subsegMap.isEmpty()) {
			for (Map.Entry<String, Double> entry : subsegMap.entrySet()) {
				if (entry.getValue() > maxValue2) {
					maxGroupBy = entry.getKey();
					maxValue2 = entry.getValue();
				}
			}
			return maxGroupBy;
		} else {
			Entry<String, Double> min = null;
			for (Entry<String, Double> entry : partitionKeyMap.entrySet()) {
				if (min == null || min.getValue() > entry.getValue()) {
					min = entry;
				}
			}
			if (min != null) {
				minValue = min.getValue();
				if (minValue > 0.05 && minValue <= 0.3) {
					return min.getKey();
				}
			}
		}
		return null;
	}

	
	@RequestMapping(value = "/saveDataDefinitionData", method = RequestMethod.POST)
	public void saveDataDefinitionData(HttpServletRequest req, HttpServletResponse response, HttpSession session,
			@RequestParam Long idColumn, @RequestParam String columnName, @RequestParam String columnValue,
			@RequestParam String tableName) throws IOException {
		/*		Object user = session.getAttribute("user");
		JSONObject json = new JSONObject();
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		if (columnValue.equalsIgnoreCase("y")) {
			columnValue = "Y";
		} else if (columnValue.equalsIgnoreCase("n")) {
			columnValue = "N";
		}

		boolean flag = true;
		if (!al.contains(columnName)) {
			flag = false;
		}
		System.out.println("idColumn=" + idColumn);
		System.out.println("columnName=" + columnName);
		System.out.println("columnValue=" + columnValue);
		try {
			if (flag) {
				
			Long update = SchemaDAOI.updateDataIntoListDataDefinition(idColumn, columnName, columnValue);
				SchemaDAOI.updateKBEIntoListDataDefinition(idColumn, columnName, columnValue);
				System.out.println("update=" + update);
				

				if (update == -1) {
				//	JSONObject json = new JSONObject();

					json.put("success", "Not Allowed For This Data Type");

					if (columnName.equals("lengthValue")) {
						System.out.println("If ...........lengthValue =>" + columnName);
						json.put("columnValue", "0");
					} else {
						System.out.println("Else...........lengthValue =>" + columnName);
						json.put("columnValue", "N");
					}

					response.getWriter().println(json);
				}
				else if (update > 0) {
					//JSONObject json = new JSONObject();
					System.out.println("update > 0 ................ =>" + columnName);
					json.put("success", "Item Updated Successfully");
					json.put("columnValue", columnValue);
					response.getWriter().println(json);
				} else {

					//JSONObject json = new JSONObject();
					
					json.put("success", "Item failed to Update");
					response.getWriter().println(json);
				}
			} else {
				//JSONObject json = new JSONObject();
				json.put("fail", "Please write Y for Yes and N for No");
				response.getWriter().println(json);
			}*/

		Object user = session.getAttribute("user");
		JSONObject json = new JSONObject();
		System.out.println("user:" + user);
		if ((user == null) || (!user.equals("validUser"))) {
			try {
				response.sendRedirect("loginPage.jsp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		if (columnValue.equalsIgnoreCase("y")) {
			columnValue = "Y";
		} else if (columnValue.equalsIgnoreCase("n")) {
			columnValue = "N";
		}

		boolean flag = true;
		if (!al.contains(columnName)) {
			flag = false;
		}
		System.out.println("idColumn=" + idColumn);
		System.out.println("columnName=" + columnName);
		System.out.println("columnValue=" + columnValue);
		try {
			if (flag) {
				int update = 0;
				Map<String, List<ListDataDefinition>> mapDataDefinition = (Map<String, List<ListDataDefinition>>) session
						.getAttribute("dataDefinition");
				List<ListDataDefinition> lstDataDefinition = mapDataDefinition.get(tableName);
				ListDataDefinition dataDefinition = lstDataDefinition.get((int) (idColumn - 1));
				try {
					Class<?> aClass = Class.forName("com.databuck.bean.ListDataDefinition");
					columnName = columnName.substring(0, 1).toUpperCase() + columnName.substring(1);
					String methodName = "set" + columnName;
					Method method = aClass.getMethod(methodName, String.class);
					System.out.println("dataDefinition=" + dataDefinition);
					System.out.println("columnValue=" + columnValue);
					method.invoke(dataDefinition, columnValue);
					update = 1;
				} catch (Exception e) {
					json.put("success", "Item failed to Update");
					response.getWriter().println(json);
				}
				System.out.println("update=" + update);
				if (update > 0) {
					json.put("success", "Item Updated Successfully");
					json.put("columnValue", columnValue);
					response.getWriter().println(json);
				} else {
					json.put("fail", "Item failed to Update");
					response.getWriter().println(json);
				}
			} else {
				json.put("fail", "This value is not editable.");
				response.getWriter().println(json);
			}
		} catch (IOException e) {
			json.put("fail", "Problem updating value.");
			response.getWriter().println(json);
		}
	}

	/**
     * get table columns from json Object 
     * @param file
     * @return
     */
	Map<String, String> getTableColumns(MultipartFile file){
        Map<String, String> columns=new HashMap();

        //parse json objet file
        JSONObject obj;
        try {

        	JSONTokener tokener = new JSONTokener(new InputStreamReader(file.getInputStream(), "UTF-8"));
            //parse JSON object 
            obj = new JSONObject(tokener);

            obj.keySet().forEach(keyStr ->
            {
                String keyvalue = obj.get(keyStr).toString();
                System.out.println("key: "+ keyStr + " value: " + keyvalue);
                columns.put(keyStr, keyvalue);

                //for nested objects iteration if required
                //if (keyvalue instanceof JSONObject)
                //    printJsonObject((JSONObject)keyvalue);
            });
            
            System.out.println(" columns " + columns);
        } catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } 
        return columns;
    }


	
}
	
