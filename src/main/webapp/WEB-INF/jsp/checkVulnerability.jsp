<!-- checkVulnerability.jsp - contains only Java script functions to check vulnerability include this JSP to sanitize data -->

<script type="text/javascript">
	var checkVulnerability = {
		getVulnerabilityTagCounts: function(sTextData) {
			var oDivElement = document.createElement('div'), nHtmlTagCounts = 0, sEffectiveTextData = '';

			try {
				sEffectiveTextData = checkVulnerability.santizeHtmlTextForBaseTags(sTextData);
				nHtmlTagCounts = (sEffectiveTextData.length === sTextData.length) ? 0 : 1; // if found one or more base tags count it as 1

				$(oDivElement).html(sEffectiveTextData);
				nHtmlTagCounts = nHtmlTagCounts + ( $(oDivElement).children().length );   // this includes script tags also

			} catch(oError) {
				console.log( oError.message);
				nHtmlTagCounts = 0;
			}

			return nHtmlTagCounts;
		},
		wipeOutVulnerabilityTags: function(sTextData) {
			var oDivElement = document.createElement('div'), sRetValue = '';

			try {
				sEffectiveTextData = checkVulnerability.santizeHtmlTextForBaseTags(sTextData);  // chalk out base tags

				$(oDivElement).html(sEffectiveTextData);													  // load allowed div tags

				// Any script getting detected here? Any way childern include script and getting removed
				$(oDivElement).find('script').remove();
				$(oDivElement).children().remove();

				sRetValue = $(oDivElement).html();
				sRetValue = (sRetValue.trim().length < 1) ? '' : sRetValue;

			} catch(oError) {
				console.log( oError.message);
				sRetValue = sTextData;
			}

			return sRetValue;
		},
		santizeHtmlTextForBaseTags: function(sOriginalTextData) {
			var sRetValue = sOriginalTextData, sWorkingText = sOriginalTextData,
				aBaseTagsInfo = [
					{ startTagToken: "<head>", endTagToken: "<\\/head>" },
					{ startTagToken: "<html>", endTagToken: "<\\/html>" },
					{ startTagToken: "<body>", endTagToken: "<\\/body>" },
					{ startTagToken: "<frame>", endTagToken: "<\\/frame>" },
					{ startTagToken: "<frameset>", endTagToken: "<\\/frameset>" },
					{ startTagToken: "<!DOCTYPE>", endTagToken: "<\\/!DOCTYPE>" },
					{ startTagToken: "<!-->", endTagToken: "<\\/-->" },
					{ startTagToken: "<jsp.*>", endTagToken: "" }
				];

			try {

				aBaseTagsInfo.forEach( function( oBaseTagToken, nIndex) {
					let oRegexStartPattern = new RegExp( eval("/" + oBaseTagToken.startTagToken + "/ig") );
					let oRegexEndPattern = new RegExp( eval("/" + oBaseTagToken.endTagToken + "/ig") );

					if ( oRegexStartPattern.test(sWorkingText) ) { sWorkingText = sWorkingText.replace(oRegexStartPattern, ''); }
					if ( oRegexEndPattern.test(sWorkingText) ) { sWorkingText = sWorkingText.replace(oRegexEndPattern, ''); }
				});

				sRetValue = sWorkingText;
			} catch(oError) {
				console.log( oError.message);
				sRetValue = sOriginalTextData;
			}

			return sRetValue;
		}
	}

	function validateHrefVulnerability(obj){
        var hrefVal = decodeURI(obj.href);
        var htmlTagCount = checkVulnerability.getVulnerabilityTagCounts(hrefVal);
        if(htmlTagCount > 0){
           obj.href = "#";
           alert("Vulnerability in submitted link, could not be processed");
        }
        return false;
     }

	function checkInputText(){
		var isvalidtosave = true;
		$("input[type=text],input[type=password],textarea").each(function(){
			 var input = $(this).val();
			 var vcount = checkVulnerability.getVulnerabilityTagCounts(input, true, true);
			 if(vcount > 0){ isvalidtosave = false; }
			});

		return isvalidtosave;
	}

	function checkPromptText(text){
		var isvalidtosave = true;
		var vcount = checkVulnerability.getVulnerabilityTagCounts(text, true, true);
		if(vcount > 0){ isvalidtosave = false; }
		return isvalidtosave;
	}

	/* Whole E2E management of redirection to login page via intermediate message presently simple alert message */
	var ManageRedirectionToLoginScreen = {
		InterceptorErrorData: {	InterceptorErrorCode: "${InterceptorErrorCode}",InterceptorErrorMsg: "${InterceptorErrorMsg}", IsJspLoadingGetRequest: "${IsJspLoadingGetRequest}" },
		extendAjaxErrorEvent: function(oEvent, oRequest, oSettings, oError) {
			try {
				console.log('Customized ajax error handler for jQuery based requests: ');
				ManageRedirectionToLoginScreen.giveMsgAndRedirectToLogin(ManageRedirectionToLoginScreen.getInterceptorErrorData(oRequest));
			} catch (oError) {
				console.log('Error in checkVulnerability.jsp extendAjaxErrorEvent: ' + oError.message);
			}
		},
		extendXMLHttpRequestEvents: function() {
			ManageRedirectionToLoginScreen.OrgXMLHttpRequestSendEvent = window.XMLHttpRequest.prototype.send;
			ManageRedirectionToLoginScreen.OrgXMLHttpReadyStateChangeEvent = null;

  			/* Customized open XMLHttpRequest, right now it is NOT used */
			function customXMLHttpRequestOpenEvent(sMethod, sUrl, sAsync) {
			  this._url = sUrl;
			  console.log('Customized open XMLHttpRequest: ' + sMethod + ',' + sUrl + ',' + sAsync);
			  return ManageRedirectionToLoginScreen.OrgXMLHttpRequestOpenEvent.apply(this, arguments);
			}

			/* Customized send XMLHttpRequest, used to inform interceptor o easily differentiate GET request (ajax or JSP loading) */
			function customXMLHttpRequestSendEvent(oData) {
				ManageRedirectionToLoginScreen.OrgXMLHttpReadyStateChangeEvent = this.onreadystatechange;
				this.onreadystatechange = customXMLHttpRequestReadyStateChangeEvent;
				this.setRequestHeader('IsJspLoadingGetRequest', 'false');

				console.log('Customized send handler common for jQuery + XMLHttpRequest based requests:');

				return ManageRedirectionToLoginScreen.OrgXMLHttpRequestSendEvent.apply(this, arguments);
			}

			/* Customized send XMLHttpRequest, used to inform interceptor o easily differentiate GET request (ajax or JSP loading) */
			function customXMLHttpRequestReadyStateChangeEvent(data) {
				console.log('Customized ready state for XMLHttpRequest only: ');
				if ( (this.readyState === 4) && (this.status === 401) ){
					console.log('Customized ready state XMLHttpRequest: ');
					ManageRedirectionToLoginScreen.giveMsgAndRedirectToLogin(ManageRedirectionToLoginScreen.getInterceptorErrorData(this));
				}
				return ManageRedirectionToLoginScreen.OrgXMLHttpReadyStateChangeEvent.apply(this, arguments);

			}

			window.XMLHttpRequest.prototype.send = customXMLHttpRequestSendEvent;
		},
		getInterceptorErrorData: function(oRequest) {
			var oRetValue = { InterceptorErrorCode: "", InterceptorErrorMsg: "", ReloginUrl: "" };

			try {
				oRetValue.InterceptorErrorCode = (oRequest.getResponseHeader('InterceptorErrorCode')) ? oRequest.getResponseHeader('InterceptorErrorCode') : "";
				oRetValue.InterceptorErrorMsg = (oRequest.getResponseHeader('InterceptorErrorMsg')) ? oRequest.getResponseHeader('InterceptorErrorMsg') : "";
				oRetValue.ReloginUrl = (oRequest.getResponseHeader('ReloginUrl')) ? oRequest.getResponseHeader('ReloginUrl') : "";
			} catch (oError) {
				console.log('Error in checkVulnerability.jsp getInterceptorErrorData: ' + oError.message);
			}

			return oRetValue;
		},
		giveMsgAndRedirectToLogin: function(oEndUseErrorData) {
			if (oEndUseErrorData.ReloginUrl.length > 0) {
				window.parent.location.href = oEndUseErrorData.ReloginUrl;
			}
		}
	}

	/* JQeury document ready not working as this is include JSP so page still not loaded fully at this stage, so using pure Java Script event */
	window.onload = function() {
		var aFormCollections = window.parent.document.forms;

		$( document ).ajaxError(ManageRedirectionToLoginScreen.extendAjaxErrorEvent);
		ManageRedirectionToLoginScreen.extendXMLHttpRequestEvents();

		Array.from(aFormCollections).forEach( function(oForm) {
			//console.log(oForm.id + ',' + oForm.tagName + ',' + (oForm.onsubmit === null ? 'null' : 'event') );

			oForm.onsubmit = function(oEvent) {
				$('<input>').attr('type', 'hidden').attr('name', 'IsFormSubmit').attr('id', 'IsFormSubmit').attr('value', 'Y').appendTo(oForm);
				//console.log('Customized form submit: ');
			}
		});
	};
</script>



